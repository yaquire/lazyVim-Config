# parallel
# Autogenerated from man page /usr/share/man/man1/parallel.1.gz
complete -c parallel -l null -d 'X Item "--null"'
complete -c parallel -s 0 -d 'X Item "-0" . PD Use NUL as delimiter'
complete -c parallel -l arg-file -d 'X Item "--arg-file input-file"'
complete -c parallel -s a -d 'X Item "-a input-file" . PD Use input-file as input source'
complete -c parallel -l arg-file-sep -d 'X Item "--arg-file-sep sep-str" Use sep-str instead of :::: as separator stri…'
complete -c parallel -l arg-sep -d 'X Item "--arg-sep sep-str" Use sep-str instead of ::: as separator string'
complete -c parallel -l bar -d 'X Item "--bar" Show progress as a progress bar'
complete -c parallel -l basefile -d 'X Item "--basefile file"'
complete -c parallel -l bf -d 'X Item "--bf file" '
complete -c parallel -l basenamereplace -d 'X Item "--basenamereplace replace-str"'
complete -c parallel -l bnr -d 'X Item "--bnr replace-str" '
complete -c parallel -l basenameextensionreplace -d 'X Item "--basenameextensionreplace replace-str"'
complete -c parallel -l bner -d 'X Item "--bner replace-str" '
complete -c parallel -l bin -d 'X Item "--bin binexpr" Use binexpr as binning key and bin input to the jobs'
complete -c parallel -l bg -d 'X Item "--bg" Run command in background'
complete -c parallel -l bibtex -d 'X Item "--bibtex"'
complete -c parallel -l citation -d 'X Item "--citation" '
complete -c parallel -l block -d 'X Item "--block size"'
complete -c parallel -l block-size -d 'X Item "--block-size size" . PD Size of block in bytes to read at a time'
complete -c parallel -l block-timeout -d 'X Item "--block-timeout duration"'
complete -c parallel -l bt -d 'X Item "--bt duration" . PD Timeout for reading block when using --pipe'
complete -c parallel -l cat -d 'X Item "--cat" Create a temporary file with content'
complete -c parallel -l cleanup -d 'X Item "--cleanup" Remove transferred files'
complete -c parallel -l color -d 'X Item "--color" Colour output. Sp Colour the output'
complete -c parallel -l color-failed -d 'X Item "--color-failed"'
complete -c parallel -l cf -d 'X Item "--cf" . PD Colour the output from failing jobs white on red'
complete -c parallel -l colsep -d 'X Item "--colsep regexp"'
complete -c parallel -s C -d 'X Item "-C regexp" . PD Column separator'
complete -c parallel -l combineexec -d 'X Item "--combineexec name"'
complete -c parallel -l combine-executable -d 'X Item "--combine-executable name" '
complete -c parallel -l compress -d 'X Item "--compress" Compress temporary files'
complete -c parallel -l compress-program -d 'X Item "--compress-program prg"'
complete -c parallel -l decompress-program -d 'X Item "--decompress-program prg" '
complete -c parallel -l csv -d 'X Item "--csv" Treat input as CSV-format'
complete -c parallel -l ctag -l tag -d 'X Item "--ctag (obsolete: use --color --tag)" Color tag'
complete -c parallel -l ctagstring -l tagstring -d 'X Item "--ctagstring str (obsolete: use --color --tagstring)" Color tagstring'
complete -c parallel -l delay -d 'X Item "--delay duration" Delay starting next job by duration'
complete -c parallel -l delimiter -d 'X Item "--delimiter delim"'
complete -c parallel -s d -d 'X Item "-d delim" . PD Input items are terminated by delim'
complete -c parallel -l dirnamereplace -d 'X Item "--dirnamereplace replace-str"'
complete -c parallel -l dnr -d 'X Item "--dnr replace-str" '
complete -c parallel -l dry-run -d 'X Item "--dry-run" Print the job to run on stdout (standard output), but do n…'
complete -c parallel -s E -d 'X Item "-E eof-str" Set the end of file string to eof-str'
complete -c parallel -l eof -d 'X Item "--eof[=eof-str]"'
complete -c parallel -s e -d 'X Item "-e[eof-str]" . PD This option is a synonym for the -E option'
complete -c parallel -l embed -d 'X Item "--embed" Embed GNU parallel in a shell script'
complete -c parallel -l env -d 'X Item "--env var" Copy exported environment variable var'
complete -c parallel -l eta -d 'X Item "--eta" Show the estimated number of seconds before finishing'
complete -c parallel -l fg -d 'X Item "--fg" Run command in foreground'
complete -c parallel -l fifo -d 'X Item "--fifo" Create a temporary fifo with content'
complete -c parallel -l filter -d 'X Item "--filter filter" Only run jobs where filter is true'
complete -c parallel -l filter-hosts -d 'X Item "--filter-hosts" Remove down hosts'
complete -c parallel -l gnu -d 'X Item "--gnu" Behave like GNU parallel'
complete -c parallel -l group -d 'X Item "--group" Group output'
complete -c parallel -l group-by -d 'X Item "--group-by val" Group input by value'
complete -c parallel -l help -d 'X Item "--help"'
complete -c parallel -s h -d 'X Item "-h" . PD Print a summary of the options to GNU parallel and exit'
complete -c parallel -l halt-on-error -d 'X Item "--halt-on-error val"'
complete -c parallel -l halt -d 'X Item "--halt val" . PD When should GNU parallel terminate? '
complete -c parallel -s 1 -d 'X Item "-1" soon,success=1'
complete -c parallel -s 2 -d 'X Item "-2" now,success=1'
complete -c parallel -o '99%' -d 'X Item "1-99%" soon,fail=1-99% . RE . RS 4 . RE'
complete -c parallel -l header -d 'X Item "--header regexp" Use regexp as header'
complete -c parallel -l hostgroups -d 'X Item "--hostgroups"'
complete -c parallel -l hgrp -d 'X Item "--hgrp" . PD Enable hostgroups on arguments'
complete -c parallel -s I -d 'X Item "-I replace-str" Use the replacement string replace-str instead of {}'
complete -c parallel -l replace -d 'X Item "--replace [replace-str]"'
complete -c parallel -s i -d 'X Item "-i [replace-str]" . PD This option is deprecated; use -I instead'
complete -c parallel -l joblog -d 'X Item "--joblog logfile"'
complete -c parallel -l jl -d 'X Item "--jl logfile" . PD Logfile for executed jobs'
complete -c parallel -l jobs -d 'X Item "--jobs num"'
complete -c parallel -s j -d 'X Item "-j num"'
complete -c parallel -l max-procs -d 'X Item "--max-procs num"'
complete -c parallel -s P -d 'X Item "-P num" . PD Number of jobslots on each machine'
complete -c parallel -o num -d 'X Item "-num" Subtract num from the number of CPU threads'
complete -c parallel -l keep-order -d 'X Item "--keep-order"'
complete -c parallel -s k -d 'X Item "-k" . PD Keep sequence of output same as the order of input'
complete -c parallel -s L -d 'X Item "-L recsize" When used with --pipe: Read records of recsize'
complete -c parallel -l max-lines -d 'X Item "--max-lines [recsize]"'
complete -c parallel -s l -d 'X Item "-l[recsize]" '
complete -c parallel -l limit -d 'X Item "--limit ""command args""" Dynamic job limit'
complete -c parallel -l latest-line -d 'X Item "--latest-line"'
complete -c parallel -l ll -d 'X Item "--ll" . PD Print the lastest line'
complete -c parallel -l line-buffer -d 'X Item "--line-buffer"'
complete -c parallel -l lb -d 'X Item "--lb" . PD Buffer output on line basis'
complete -c parallel -l link -d 'X Item "--link"'
complete -c parallel -l xapply -d 'X Item "--xapply" . PD Link input sources'
complete -c parallel -l load -d 'X Item "--load max-load" Only start jobs if load is less than max-load'
complete -c parallel -l controlmaster -d 'X Item "--controlmaster"'
complete -c parallel -s M -d 'X Item "-M" . PD Use ssh\'s ControlMaster to make ssh connections faster'
complete -c parallel -s m -d 'X Item "-m" Multiple arguments'
complete -c parallel -l memfree -d 'X Item "--memfree size (alpha testing)" Minimum memory free when starting ano…'
complete -c parallel -l memsuspend -d 'X Item "--memsuspend size" Suspend jobs when there is less memory available'
complete -c parallel -l minversion -d 'X Item "--minversion version" Print the version GNU parallel and exit'
complete -c parallel -l max-args -d 'X Item "--max-args max-args"'
complete -c parallel -s n -d 'X Item "-n max-args" . PD Use at most max-args arguments per command line'
complete -c parallel -l max-replace-args -d 'X Item "--max-replace-args max-args"'
complete -c parallel -s N -d 'X Item "-N max-args" . PD Use at most max-args arguments per command line'
complete -c parallel -l nonall -d 'X Item "--nonall (alpha testing)" --onall with no arguments'
complete -c parallel -l onall -d 'X Item "--onall (alpha testing)" Run all the jobs on all computers given with…'
complete -c parallel -l open-tty -d 'X Item "--open-tty"'
complete -c parallel -s o -d 'X Item "-o" . PD Open terminal tty'
complete -c parallel -l output-as-files -d 'X Item "--output-as-files"'
complete -c parallel -l outputasfiles -d 'X Item "--outputasfiles"'
complete -c parallel -l files -d 'X Item "--files"'
complete -c parallel -l files0 -d 'X Item "--files0" . PD Save output to files'
complete -c parallel -l pipe -d 'X Item "--pipe"'
complete -c parallel -l spreadstdin -d 'X Item "--spreadstdin" . PD Spread input to jobs on stdin (standard input)'
complete -c parallel -l pipe-part -d 'X Item "--pipe-part" Pipe parts of a physical file'
complete -c parallel -l plain -d 'X Item "--plain" Ignore --profile, \\f(CW$PARALLEL, and ~/. parallel/config'
complete -c parallel -l plus -d 'X Item "--plus" Add more replacement strings'
complete -c parallel -l process-slot-var -d 'X Item "--process-slot-var varname" Set the environment variable varname to t…'
complete -c parallel -l progress -d 'X Item "--progress" Show progress of computations'
complete -c parallel -l max-line-length-allowed -d 'X Item "--max-line-length-allowed" Print maximal command line length'
complete -c parallel -l number-of-cpus -d 'X Item "--number-of-cpus (obsolete)" Print the number of physical CPU cores a…'
complete -c parallel -l number-of-cores -d 'X Item "--number-of-cores" Print the number of physical CPU cores and exit (u…'
complete -c parallel -l number-of-sockets -d 'X Item "--number-of-sockets" Print the number of filled CPU sockets and exit …'
complete -c parallel -l number-of-threads -d 'X Item "--number-of-threads" Print the number of hyperthreaded CPU cores and …'
complete -c parallel -l no-keep-order -d 'X Item "--no-keep-order" Overrides an earlier --keep-order (e. g'
complete -c parallel -l nice -d 'X Item "--nice niceness" Run the command at this niceness'
complete -c parallel -l interactive -d 'X Item "--interactive"'
complete -c parallel -s p -d 'X Item "-p" . PD Ask user before running a job'
complete -c parallel -l _parset -d 'X Item "--_parset type,varname" Used internally by parset'
complete -c parallel -l parens -d 'X Item "--parens parensstring" Use parensstring instead of {==}'
complete -c parallel -l profile -d 'X Item "--profile profilename"'
complete -c parallel -s J -d 'X Item "-J profilename" . PD Use profile profilename for options'
complete -c parallel -l quote -d 'X Item "--quote"'
complete -c parallel -s q -d 'X Item "-q" . PD Quote command'
complete -c parallel -l no-run-if-empty -d 'X Item "--no-run-if-empty"'
complete -c parallel -s r -d 'X Item "-r" . PD Do not run empty input'
complete -c parallel -l noswap -d 'X Item "--noswap" Do not start job is computer is swapping'
complete -c parallel -l record-env -d 'X Item "--record-env" Record exported environment'
complete -c parallel -l recstart -d 'X Item "--recstart startstring"'
complete -c parallel -l recend -d 'X Item "--recend endstring" '
complete -c parallel -l regexp -d 'X Item "--regexp" Use --regexp to interpret --recstart and --recend as regula…'
complete -c parallel -l remove-rec-sep -d 'X Item "--remove-rec-sep"'
complete -c parallel -l removerecsep -d 'X Item "--removerecsep"'
complete -c parallel -l rrs -d 'X Item "--rrs" . PD Remove record separator'
complete -c parallel -l results -d 'X Item "--results name"'
complete -c parallel -l res -d 'X Item "--res name" . PD Save the output into files'
complete -c parallel -l resume -d 'X Item "--resume" Resumes from the last unfinished job'
complete -c parallel -l resume-failed -d 'X Item "--resume-failed" Retry all failed and resume from the last unfinished…'
complete -c parallel -l retry-failed -d 'X Item "--retry-failed" Retry all failed jobs in joblog'
complete -c parallel -l retries -d 'X Item "--retries n" Try failing jobs n times'
complete -c parallel -l return -d 'X Item "--return filename" Transfer files from remote computers'
complete -c parallel -l round-robin -d 'X Item "--round-robin"'
complete -c parallel -l round -d 'X Item "--round" '
complete -c parallel -l rpl -d 'X Item "--rpl \'tag perl expression\'" Define replacement string'
complete -c parallel -l rsync-opts -d 'X Item "--rsync-opts options" Options to pass on to rsync'
complete -c parallel -l max-chars -d 'X Item "--max-chars max-chars"'
complete -c parallel -s s -d 'X Item "-s max-chars" . PD Limit length of command'
complete -c parallel -l show-limits -d 'X Item "--show-limits" Display limits given by the operating system'
complete -c parallel -l semaphore -d 'X Item "--semaphore" Work as a counting semaphore'
complete -c parallel -l semaphore-name -d 'X Item "--semaphore-name name"'
complete -c parallel -l id -d 'X Item "--id name" . PD Use name as the name of the semaphore'
complete -c parallel -l semaphore-timeout -d 'X Item "--semaphore-timeout secs"'
complete -c parallel -l st -d 'X Item "--st secs" '
complete -c parallel -l seqreplace -d 'X Item "--seqreplace replace-str" Use the replacement string replace-str inst…'
complete -c parallel -l session -d 'X Item "--session" Record names in current environment in \\f(CB$PARALLEL_IGNO…'
complete -c parallel -l shard -d 'X Item "--shard shardexpr" Use shardexpr as shard key and shard input to the …'
complete -c parallel -l shebang -d 'X Item "--shebang"'
complete -c parallel -l hashbang -d 'X Item "--hashbang" '
complete -c parallel -l shebang-wrap -d 'X Item "--shebang-wrap" GNU parallel can parallelize scripts by wrapping the …'
complete -c parallel -l shell-completion -d 'X Item "--shell-completion shell" Generate shell completion code for interact…'
complete -c parallel -l shell-quote -d 'X Item "--shell-quote" Does not run the command but quotes it'
complete -c parallel -l shuf -d 'X Item "--shuf" Shuffle jobs'
complete -c parallel -l skip-first-line -d 'X Item "--skip-first-line" Do not use the first line of input (used by GNU pa…'
complete -c parallel -l sql -d 'X Item "--sql DBURL (obsolete)" Use --sql-master instead'
complete -c parallel -l sql-master -d 'X Item "--sql-master DBURL" Submit jobs via SQL server'
complete -c parallel -l sql-and-worker -d 'X Item "--sql-and-worker DBURL" Shorthand for: --sql-master DBURL --sql-worke…'
complete -c parallel -l sql-worker -d 'X Item "--sql-worker DBURL" Execute jobs via SQL server'
complete -c parallel -l ssh -d 'X Item "--ssh sshcommand" GNU parallel defaults to using ssh for remote access'
complete -c parallel -l ssh-delay -d 'X Item "--ssh-delay duration" Delay starting next ssh by duration'
complete -c parallel -l sshlogin -d 'X Item "--sshlogin [@hostgroups/][ncpus/][[user][:[password]]@]host[:port][,'
complete -c parallel -s S -d 'X Item "-S [@hostgroups/][ncpus/][ssh command][[user][:[password]]@]host[:por…'
complete -c parallel -l sshloginfile -d 'X Item "--sshloginfile filename"'
complete -c parallel -l slf -d 'X Item "--slf filename" . PD File with sshlogins'
complete -c parallel -l slotreplace -d 'X Item "--slotreplace replace-str" Use the replacement string replace-str ins…'
complete -c parallel -l silent -d 'X Item "--silent" Silent. Sp The job to be run will not be printed'
complete -c parallel -l template -d 'X Item "--template file=repl"'
complete -c parallel -l tmpl -d 'X Item "--tmpl file=repl" '
complete -c parallel -l tty -d 'X Item "--tty" Open terminal tty'
complete -c parallel -l tee -d 'X Item "--tee" Pipe all data to all jobs'
complete -c parallel -l term-seq -d 'X Item "--term-seq sequence" Termination sequence'
complete -c parallel -l total-jobs -d 'X Item "--total-jobs jobs"'
complete -c parallel -l total -d 'X Item "--total jobs" '
complete -c parallel -l tmpdir -d 'X Item "--tmpdir dirname" Directory for temporary files'
complete -c parallel -l tmux -d 'X Item "--tmux (Long beta testing)" Use tmux for output'
complete -c parallel -l tmuxpane -d 'X Item "--tmuxpane (Long beta testing)" Use tmux for output but put output in…'
complete -c parallel -l timeout -d 'X Item "--timeout duration" Time out for command'
complete -c parallel -l verbose -d 'X Item "--verbose"'
complete -c parallel -s t -d 'X Item "-t" . PD Print the job to be run on stderr (standard error)'
complete -c parallel -l transfer -d 'X Item "--transfer" Transfer files to remote computers'
complete -c parallel -l transferfile -d 'X Item "--transferfile filename"'
complete -c parallel -l tf -d 'X Item "--tf filename" . PD Transfer filename to remote computers'
complete -c parallel -l trc -d 'X Item "--trc filename" Transfer, Return, Cleanup'
complete -c parallel -l trim -d 'X Item "--trim <n|l|r|lr|rl>" Trim white space in input. RS 4'
complete -c parallel -l ungroup -d 'X Item "--ungroup"'
complete -c parallel -s u -d 'X Item "-u" . PD Ungroup output'
complete -c parallel -l extensionreplace -d 'X Item "--extensionreplace replace-str"'
complete -c parallel -l er -d 'X Item "--er replace-str" '
complete -c parallel -l use-sockets-instead-of-threads -d 'X Item "--use-sockets-instead-of-threads" See also: --use-cores-instead-of-th…'
complete -c parallel -l use-cores-instead-of-threads -d 'X Item "--use-cores-instead-of-threads"'
complete -c parallel -l use-cpus-instead-of-cores -d 'X Item "--use-cpus-instead-of-cores (obsolete)" '
complete -c parallel -s v -d 'X Item "-v" Verbose. Sp Print the job to be run on stdout (standard output)'
complete -c parallel -l version -d 'X Item "--version"'
complete -c parallel -s V -d 'X Item "-V" . PD Print the version GNU parallel and exit'
complete -c parallel -l workdir -d 'X Item "--workdir mydir"'
complete -c parallel -l wd -d 'X Item "--wd mydir" . PD Jobs will be run in the dir mydir'
complete -c parallel -l wait -d 'X Item "--wait" Wait for all commands to complete'
complete -c parallel -s X -d 'X Item "-X" Multiple arguments with context replace'
complete -c parallel -l exit -d 'X Item "--exit"'
complete -c parallel -s x -d 'X Item "-x" . PD Exit if the size (see the -s option) is exceeded'
complete -c parallel -l will-cite -d 'the citation notice for this single run'
complete -c parallel -s f
complete -c parallel -l tollef -d 'used.  --gnu is kept for compatibility, but does nothing'
complete -c parallel -l xargs
complete -c parallel -o X/-m/--xargs
complete -c parallel -o '.csv/-.tsv' -d '(standard output)'
complete -c parallel -o '.json' -d 'output)'
complete -c parallel -l sqlmaster -d 'the jobs to be run'
complete -c parallel -o Sdev -o Sprod -d '[]\'s are allowed: server[01-10]. cluster[1-5]. example. net  :port 15'
complete -c parallel -o 1000
complete -c parallel -o 1220

