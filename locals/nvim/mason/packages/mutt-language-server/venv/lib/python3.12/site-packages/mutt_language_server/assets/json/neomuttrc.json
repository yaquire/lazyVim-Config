{
  "$id": "https://github.com/neomutt/mutt-language-server/blob/main/src/termux_language_server/assets/json/neomuttrc.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$comment": "Don't edit this file directly! It is generated by `mutt-language-server --generate-schema=neomuttrc`.",
  "type": "object",
  "properties": {
    "account-hook": {
      "description": "```neomuttrc\naccount-hook regex command\n```\nThis hook is executed whenever you access a remote mailbox. Useful to adjust configuration settings to different IMAP or POP servers."
    },
    "alias": {
      "description": "```neomuttrc\nalias [ -group name ... ] key address [, address ... ]\nunalias [ -group name ... ] { * | key ... }\n```\n**alias** defines a surrogate *key* for the given address(es). Each *address* will be resolved into either an email address (user@example.com) or a named email address (User Name \\<user@example.com\\>). The address may be specified in either format, or in the format \"user@example.com (User Name)\".**Note**: If you want to create an alias for more than one address, you **must** separate the addresses with a comma (\"**,**\").**unalias** removes the alias corresponding to the given *key* or all aliases when \"**\\***\" is used as an argument.The optional **-group** flag causes the address(es) to be added to or removed from the *name*d group."
    },
    "unalias": {
      "description": "```neomuttrc\nalias [ -group name ... ] key address [, address ... ]\nunalias [ -group name ... ] { * | key ... }\n```\n**alias** defines a surrogate *key* for the given address(es). Each *address* will be resolved into either an email address (user@example.com) or a named email address (User Name \\<user@example.com\\>). The address may be specified in either format, or in the format \"user@example.com (User Name)\".**Note**: If you want to create an alias for more than one address, you **must** separate the addresses with a comma (\"**,**\").**unalias** removes the alias corresponding to the given *key* or all aliases when \"**\\***\" is used as an argument.The optional **-group** flag causes the address(es) to be added to or removed from the *name*d group."
    },
    "alternates": {
      "description": "```neomuttrc\nalternates [ -group name ... ] regex [ regex ... ]\nunalternates [ -group name ... ] { * | regex ... }\n```\n**alternates** is used to inform NeoMutt about alternate addresses where you receive mail; you can use regular expressions (*regex*) to specify alternate addresses. This affects NeoMutt\\'s idea about messages from you, and messages addressed to you.**unalternates** can be used to write exceptions to alternates regular expression. To remove a regular expression from the alternates list, use the unalternates command with exactly the same *regex* or use \"**\\***\" to remove all entries.The optional **-group** flag causes all of the subsequent regular expressions to be added to or removed from the *name*d group."
    },
    "unalternates": {
      "description": "```neomuttrc\nalternates [ -group name ... ] regex [ regex ... ]\nunalternates [ -group name ... ] { * | regex ... }\n```\n**alternates** is used to inform NeoMutt about alternate addresses where you receive mail; you can use regular expressions (*regex*) to specify alternate addresses. This affects NeoMutt\\'s idea about messages from you, and messages addressed to you.**unalternates** can be used to write exceptions to alternates regular expression. To remove a regular expression from the alternates list, use the unalternates command with exactly the same *regex* or use \"**\\***\" to remove all entries.The optional **-group** flag causes all of the subsequent regular expressions to be added to or removed from the *name*d group."
    },
    "alternative_order": {
      "description": "```neomuttrc\nalternative_order mime-type[/mime-subtype] [ mime-type[/mime-subtype] ... ]\nunalternative_order { * | mime-type[/mime-subtype] ... }\n```\n**alternative_order** command permits you to define an order of preference that is used by NeoMutt to determine which part of a **multipart/alternative** body to display. A *mime-subtype* of \"**\\***\" matches any **multipart/alternative** subtype, as does an empty *mime-subtype*.**unalternative_order** removes entries from the ordered list or deletes the entire list when \"**\\***\" is used as an argument."
    },
    "unalternative_order": {
      "description": "```neomuttrc\nalternative_order mime-type[/mime-subtype] [ mime-type[/mime-subtype] ... ]\nunalternative_order { * | mime-type[/mime-subtype] ... }\n```\n**alternative_order** command permits you to define an order of preference that is used by NeoMutt to determine which part of a **multipart/alternative** body to display. A *mime-subtype* of \"**\\***\" matches any **multipart/alternative** subtype, as does an empty *mime-subtype*.**unalternative_order** removes entries from the ordered list or deletes the entire list when \"**\\***\" is used as an argument."
    },
    "attachments": {
      "description": "```neomuttrc\nattachments { + | - }disposition mime-type [ mime-type ... ]\nunattachments { + | - }disposition mime-type [ mime-type ... ]\nattachments ?\nunattachments *\n```\nYou can make your message index display the number of qualifying attachments in each message, or search for messages by attachment count. You also can configure what kinds of attachments qualify for this feature with the **attachments** and **unattachments** commands.You can make your message index display the number of qualifying attachments in each message, or search for messages by attachment count. You also can configure what kinds of attachments qualify for this feature with the **attachments** and **unattachments** commands.*disposition* is the attachment\\'s Content-Disposition type --- either **inline** or **attachment**. You can abbreviate this to **I** or **A**.*disposition* is the attachment\\'s Content-Disposition type --- either **inline** or **attachment**. You can abbreviate this to **I** or **A**.Disposition is prefixed by either a **+** symbol or a **-** symbol. If it\\'s a **+**, you\\'re saying that you want to allow this disposition and MIME type to qualify. If it\\'s a **-**, you\\'re saying that this disposition and MIME type is an exception to previous **+** rules.Disposition is prefixed by either a **+** symbol or a **-** symbol. If it\\'s a **+**, you\\'re saying that you want to allow this disposition and MIME type to qualify. If it\\'s a **-**, you\\'re saying that this disposition and MIME type is an exception to previous **+** rules.*mime-type* is the MIME type of the attachment you want the command to affect. A MIME type is always of the format **major/minor**. The major part of *mime-type* must be literal text (or the special token \"**\\***\", but the minor part may be a regular expression. Therefore, \"**\\*/.\\***\" matches any MIME type.*mime-type* is the MIME type of the attachment you want the command to affect. A MIME type is always of the format **major/minor**. The major part of *mime-type* must be literal text (or the special token \"**\\***\", but the minor part may be a regular expression. Therefore, \"**\\*/.\\***\" matches any MIME type.Note that the first MIME part is treated slightly differently: It is almost always the message text. Thus, it is not counted as an attachment if its disposition is **inline** and it is not a **multipart/\\*** or **message/\\*** MIME-type.Note that the first MIME part is treated slightly differently: It is almost always the message text. Thus, it is not counted as an attachment if its disposition is **inline** and it is not a **multipart/\\*** or **message/\\*** MIME-type.Entering the command \"**attachments ?**\" as a command will list your current settings in neomuttrc format, so that it can be pasted elsewhere.Entering the command \"**attachments ?**\" as a command will list your current settings in neomuttrc format, so that it can be pasted elsewhere.Entering the command \"**unattachments \\***\" as a command will Clear all attachment settings.Entering the command \"**unattachments \\***\" as a command will Clear all attachment settings."
    },
    "unattachments": {
      "description": "```neomuttrc\nattachments { + | - }disposition mime-type [ mime-type ... ]\nunattachments { + | - }disposition mime-type [ mime-type ... ]\nattachments ?\nunattachments *\n```\nYou can make your message index display the number of qualifying attachments in each message, or search for messages by attachment count. You also can configure what kinds of attachments qualify for this feature with the **attachments** and **unattachments** commands.You can make your message index display the number of qualifying attachments in each message, or search for messages by attachment count. You also can configure what kinds of attachments qualify for this feature with the **attachments** and **unattachments** commands.*disposition* is the attachment\\'s Content-Disposition type --- either **inline** or **attachment**. You can abbreviate this to **I** or **A**.*disposition* is the attachment\\'s Content-Disposition type --- either **inline** or **attachment**. You can abbreviate this to **I** or **A**.Disposition is prefixed by either a **+** symbol or a **-** symbol. If it\\'s a **+**, you\\'re saying that you want to allow this disposition and MIME type to qualify. If it\\'s a **-**, you\\'re saying that this disposition and MIME type is an exception to previous **+** rules.Disposition is prefixed by either a **+** symbol or a **-** symbol. If it\\'s a **+**, you\\'re saying that you want to allow this disposition and MIME type to qualify. If it\\'s a **-**, you\\'re saying that this disposition and MIME type is an exception to previous **+** rules.*mime-type* is the MIME type of the attachment you want the command to affect. A MIME type is always of the format **major/minor**. The major part of *mime-type* must be literal text (or the special token \"**\\***\", but the minor part may be a regular expression. Therefore, \"**\\*/.\\***\" matches any MIME type.*mime-type* is the MIME type of the attachment you want the command to affect. A MIME type is always of the format **major/minor**. The major part of *mime-type* must be literal text (or the special token \"**\\***\", but the minor part may be a regular expression. Therefore, \"**\\*/.\\***\" matches any MIME type.Note that the first MIME part is treated slightly differently: It is almost always the message text. Thus, it is not counted as an attachment if its disposition is **inline** and it is not a **multipart/\\*** or **message/\\*** MIME-type.Note that the first MIME part is treated slightly differently: It is almost always the message text. Thus, it is not counted as an attachment if its disposition is **inline** and it is not a **multipart/\\*** or **message/\\*** MIME-type.Entering the command \"**attachments ?**\" as a command will list your current settings in neomuttrc format, so that it can be pasted elsewhere.Entering the command \"**attachments ?**\" as a command will list your current settings in neomuttrc format, so that it can be pasted elsewhere.Entering the command \"**unattachments \\***\" as a command will Clear all attachment settings.Entering the command \"**unattachments \\***\" as a command will Clear all attachment settings."
    },
    "auto_view": {
      "description": "```neomuttrc\nauto_view mime-type[/mime-subtype] [ mime-type[/mime-subtype] ... ]\nunauto_view { * | mime-type[/mime-subtype] ... }\n```\nThis commands permits you to specify that NeoMutt should automatically convert the given *mime-type*s to text/plain when displaying messages. For this to work, there must be a **mailcap**(5) entry for the given *mime-type* with the **copiousoutput** option set. A *mime-subtype* of \"**\\***\" matches any **multipart/alternative** subtype, as does an empty *mime-subtype*."
    },
    "unauto_view": {
      "description": "```neomuttrc\nauto_view mime-type[/mime-subtype] [ mime-type[/mime-subtype] ... ]\nunauto_view { * | mime-type[/mime-subtype] ... }\n```\nThis commands permits you to specify that NeoMutt should automatically convert the given *mime-type*s to text/plain when displaying messages. For this to work, there must be a **mailcap**(5) entry for the given *mime-type* with the **copiousoutput** option set. A *mime-subtype* of \"**\\***\" matches any **multipart/alternative** subtype, as does an empty *mime-subtype*."
    },
    "bind": {
      "description": "```neomuttrc\nbind map[,map ... ] key function\nunbind { * | map | [,map...]} [ key ]\n```\nThis command allows you to change the default or define additional key bindings (operation invoked when pressing a key).*map* specifies in which menu the binding belongs. Multiple *map*s may be specified by separating them with commas (no additional whitespace is allowed). The currently defined *map*s are: **alias**, **attach**, **browser**, **compose**, **editor**, **generic**, **index**, **mix**, **pager**, **pgp**, **postpone**, **query** and **smime**.*key* is the key (or key sequence) you wish to bind, e.g. \"**\\\\Ca**\" for control-A. In addition, *key* may be specified as a three digit octal number prefixed with a \"**\\\\**\" or as a symbolic name. The **\\<what-key\\>** function can be used to explore keycode and symbolic names for the keys on your keyboard.*function* specifies which action to take when key is pressed. Note that the function name is to be specified without angle brackets.Missing key sequence in **unbind** command means unbind all bindings in menus given in *map* .For more information on keys and functions, please consult the NeoMutt manual."
    },
    "unbind": {
      "description": "```neomuttrc\nbind map[,map ... ] key function\nunbind { * | map | [,map...]} [ key ]\n```\nThis command allows you to change the default or define additional key bindings (operation invoked when pressing a key).*map* specifies in which menu the binding belongs. Multiple *map*s may be specified by separating them with commas (no additional whitespace is allowed). The currently defined *map*s are: **alias**, **attach**, **browser**, **compose**, **editor**, **generic**, **index**, **mix**, **pager**, **pgp**, **postpone**, **query** and **smime**.*key* is the key (or key sequence) you wish to bind, e.g. \"**\\\\Ca**\" for control-A. In addition, *key* may be specified as a three digit octal number prefixed with a \"**\\\\**\" or as a symbolic name. The **\\<what-key\\>** function can be used to explore keycode and symbolic names for the keys on your keyboard.*function* specifies which action to take when key is pressed. Note that the function name is to be specified without angle brackets.Missing key sequence in **unbind** command means unbind all bindings in menus given in *map* .For more information on keys and functions, please consult the NeoMutt manual."
    },
    "charset-hook": {
      "description": "```neomuttrc\ncharset-hook alias charset\niconv-hook charset local-charset\n```\n**charset-hook** defines an *alias* for a character set. This is useful to properly display messages which are tagged with a character set name not known to NeoMutt.**iconv-hook** defines a system-specific name for a character set. This is useful when your system\\'s **iconv**(3) implementation does not understand MIME character set names (such as **iso-8859-1**), but instead insists on being fed with implementation-specific character set names (such as **8859-1**). In this specific case, you\\'d put \"**iconv-hook**\u00a0iso-8859-1\u00a08859-1\" into your configuration file."
    },
    "iconv-hook": {
      "description": "```neomuttrc\ncharset-hook alias charset\niconv-hook charset local-charset\n```\n**charset-hook** defines an *alias* for a character set. This is useful to properly display messages which are tagged with a character set name not known to NeoMutt.**iconv-hook** defines a system-specific name for a character set. This is useful when your system\\'s **iconv**(3) implementation does not understand MIME character set names (such as **iso-8859-1**), but instead insists on being fed with implementation-specific character set names (such as **8859-1**). In this specific case, you\\'d put \"**iconv-hook**\u00a0iso-8859-1\u00a08859-1\" into your configuration file."
    },
    "color": {
      "description": "```neomuttrc\ncolor object [ attribute ... ] foreground background\ncolor { header | body } [ attribute ... ] foreground background regex\ncolor status foreground background [regex [ num ]]\ncolor index-object [ attribute ... ] foreground background pattern\ncolor compose composeobject foreground background\ncolor compose composeobject [ attribute ... ] foreground background\nuncolor { index-object | header | body } { * | pattern ... }\n```\nIf your terminal supports color, these commands can be used to assign *foreground*/*background* combinations to certain *object*s. The currently defined *object*s are: **attach_headers**, **attachment**, **body**, **bold**, **error**, **hdrdefault**, **header**, **index**, **index_author**, **index_collapsed**, **index_date**, **index_flags**, **index_label**, **index_number**, **index_size**, **index_subject**, **index_tag**, **index_tags**, **indicator**, **markers**, **message**, **normal**, **progress**, **prompt**, **quoted**, **quoted*N***, **search**, **signature**, **status**, **tilde**, **tree**, **underline**.If your terminal supports color, these commands can be used to assign *foreground*/*background* combinations to certain *object*s. The currently defined *object*s are: **attach_headers**, **attachment**, **body**, **bold**, **error**, **hdrdefault**, **header**, **index**, **index_author**, **index_collapsed**, **index_date**, **index_flags**, **index_label**, **index_number**, **index_size**, **index_subject**, **index_tag**, **index_tags**, **indicator**, **markers**, **message**, **normal**, **progress**, **prompt**, **quoted**, **quoted*N***, **search**, **signature**, **status**, **tilde**, **tree**, **underline**.If your terminal supports color, these commands can be used to assign *foreground*/*background* combinations to certain *object*s. The currently defined *object*s are: **attach_headers**, **attachment**, **body**, **bold**, **error**, **hdrdefault**, **header**, **index**, **index_author**, **index_collapsed**, **index_date**, **index_flags**, **index_label**, **index_number**, **index_size**, **index_subject**, **index_tag**, **index_tags**, **indicator**, **markers**, **message**, **normal**, **progress**, **prompt**, **quoted**, **quoted*N***, **search**, **signature**, **status**, **tilde**, **tree**, **underline**.If your terminal supports color, these commands can be used to assign *foreground*/*background* combinations to certain *object*s. The currently defined *object*s are: **attach_headers**, **attachment**, **body**, **bold**, **error**, **hdrdefault**, **header**, **index**, **index_author**, **index_collapsed**, **index_date**, **index_flags**, **index_label**, **index_number**, **index_size**, **index_subject**, **index_tag**, **index_tags**, **indicator**, **markers**, **message**, **normal**, **progress**, **prompt**, **quoted**, **quoted*N***, **search**, **signature**, **status**, **tilde**, **tree**, **underline**.If your terminal supports color, these commands can be used to assign *foreground*/*background* combinations to certain *object*s. The currently defined *object*s are: **attach_headers**, **attachment**, **body**, **bold**, **error**, **hdrdefault**, **header**, **index**, **index_author**, **index_collapsed**, **index_date**, **index_flags**, **index_label**, **index_number**, **index_size**, **index_subject**, **index_tag**, **index_tags**, **indicator**, **markers**, **message**, **normal**, **progress**, **prompt**, **quoted**, **quoted*N***, **search**, **signature**, **status**, **tilde**, **tree**, **underline**.If your terminal supports color, these commands can be used to assign *foreground*/*background* combinations to certain *object*s. The currently defined *object*s are: **attach_headers**, **attachment**, **body**, **bold**, **error**, **hdrdefault**, **header**, **index**, **index_author**, **index_collapsed**, **index_date**, **index_flags**, **index_label**, **index_number**, **index_size**, **index_subject**, **index_tag**, **index_tags**, **indicator**, **markers**, **message**, **normal**, **progress**, **prompt**, **quoted**, **quoted*N***, **search**, **signature**, **status**, **tilde**, **tree**, **underline**.If the sidebar is enabled the following *object*s are also valid: **sidebar_background**, **sidebar_divider**, **sidebar_flagged**, **sidebar_highlight**, **sidebar_indicator**, **sidebar_new**, **sidebar_ordinary**, **sidebar_spool_file**.If the sidebar is enabled the following *object*s are also valid: **sidebar_background**, **sidebar_divider**, **sidebar_flagged**, **sidebar_highlight**, **sidebar_indicator**, **sidebar_new**, **sidebar_ordinary**, **sidebar_spool_file**.If the sidebar is enabled the following *object*s are also valid: **sidebar_background**, **sidebar_divider**, **sidebar_flagged**, **sidebar_highlight**, **sidebar_indicator**, **sidebar_new**, **sidebar_ordinary**, **sidebar_spool_file**.If the sidebar is enabled the following *object*s are also valid: **sidebar_background**, **sidebar_divider**, **sidebar_flagged**, **sidebar_highlight**, **sidebar_indicator**, **sidebar_new**, **sidebar_ordinary**, **sidebar_spool_file**.If the sidebar is enabled the following *object*s are also valid: **sidebar_background**, **sidebar_divider**, **sidebar_flagged**, **sidebar_highlight**, **sidebar_indicator**, **sidebar_new**, **sidebar_ordinary**, **sidebar_spool_file**.If the sidebar is enabled the following *object*s are also valid: **sidebar_background**, **sidebar_divider**, **sidebar_flagged**, **sidebar_highlight**, **sidebar_indicator**, **sidebar_new**, **sidebar_ordinary**, **sidebar_spool_file**.The **body** and **header** objects allow you to restrict the colorization to a regular expression. The **index-object** permits you to select colored messages by pattern.The **body** and **header** objects allow you to restrict the colorization to a regular expression. The **index-object** permits you to select colored messages by pattern.The **body** and **header** objects allow you to restrict the colorization to a regular expression. The **index-object** permits you to select colored messages by pattern.The **body** and **header** objects allow you to restrict the colorization to a regular expression. The **index-object** permits you to select colored messages by pattern.The **body** and **header** objects allow you to restrict the colorization to a regular expression. The **index-object** permits you to select colored messages by pattern.The **body** and **header** objects allow you to restrict the colorization to a regular expression. The **index-object** permits you to select colored messages by pattern.The **header** and **body** match *regex* in the header/body of a message, **index-object** can match *pattern* in the message index. Note that IMAP server-side searches (=b, =B, =h) are not supported for color index patterns.The **header** and **body** match *regex* in the header/body of a message, **index-object** can match *pattern* in the message index. Note that IMAP server-side searches (=b, =B, =h) are not supported for color index patterns.The **header** and **body** match *regex* in the header/body of a message, **index-object** can match *pattern* in the message index. Note that IMAP server-side searches (=b, =B, =h) are not supported for color index patterns.The **header** and **body** match *regex* in the header/body of a message, **index-object** can match *pattern* in the message index. Note that IMAP server-side searches (=b, =B, =h) are not supported for color index patterns.The **header** and **body** match *regex* in the header/body of a message, **index-object** can match *pattern* in the message index. Note that IMAP server-side searches (=b, =B, =h) are not supported for color index patterns.The **header** and **body** match *regex* in the header/body of a message, **index-object** can match *pattern* in the message index. Note that IMAP server-side searches (=b, =B, =h) are not supported for color index patterns.The **status** object optionally takes an regex and a match number. If the regex is given, only the matching parts are colored. If additionally the match number is given, only that sub-match of the regex is colored.The **status** object optionally takes an regex and a match number. If the regex is given, only the matching parts are colored. If additionally the match number is given, only that sub-match of the regex is colored.The **status** object optionally takes an regex and a match number. If the regex is given, only the matching parts are colored. If additionally the match number is given, only that sub-match of the regex is colored.The **status** object optionally takes an regex and a match number. If the regex is given, only the matching parts are colored. If additionally the match number is given, only that sub-match of the regex is colored.The **status** object optionally takes an regex and a match number. If the regex is given, only the matching parts are colored. If additionally the match number is given, only that sub-match of the regex is colored.The **status** object optionally takes an regex and a match number. If the regex is given, only the matching parts are colored. If additionally the match number is given, only that sub-match of the regex is colored.Valid composeobjects include **header**, **security_encrypt**, **security_sign**, **security_both**, **security_none**.Valid composeobjects include **header**, **security_encrypt**, **security_sign**, **security_both**, **security_none**.Valid composeobjects include **header**, **security_encrypt**, **security_sign**, **security_both**, **security_none**.Valid composeobjects include **header**, **security_encrypt**, **security_sign**, **security_both**, **security_none**.Valid composeobjects include **header**, **security_encrypt**, **security_sign**, **security_both**, **security_none**.Valid composeobjects include **header**, **security_encrypt**, **security_sign**, **security_both**, **security_none**.Valid colors include: **default**, **black**, **red**, **green**, **yellow**, **blue**, **magenta**, **cyan**, **white**, **\\#*RRGGBB***, **color*N***.Valid colors include: **default**, **black**, **red**, **green**, **yellow**, **blue**, **magenta**, **cyan**, **white**, **\\#*RRGGBB***, **color*N***.Valid colors include: **default**, **black**, **red**, **green**, **yellow**, **blue**, **magenta**, **cyan**, **white**, **\\#*RRGGBB***, **color*N***.Valid colors include: **default**, **black**, **red**, **green**, **yellow**, **blue**, **magenta**, **cyan**, **white**, **\\#*RRGGBB***, **color*N***.Valid colors include: **default**, **black**, **red**, **green**, **yellow**, **blue**, **magenta**, **cyan**, **white**, **\\#*RRGGBB***, **color*N***.Valid colors include: **default**, **black**, **red**, **green**, **yellow**, **blue**, **magenta**, **cyan**, **white**, **\\#*RRGGBB***, **color*N***.Valid attributes include: **none**, **bold**, **underline**, **reverse**, and **standout**.Valid attributes include: **none**, **bold**, **underline**, **reverse**, and **standout**.Valid attributes include: **none**, **bold**, **underline**, **reverse**, and **standout**.Valid attributes include: **none**, **bold**, **underline**, **reverse**, and **standout**.Valid attributes include: **none**, **bold**, **underline**, **reverse**, and **standout**.Valid attributes include: **none**, **bold**, **underline**, **reverse**, and **standout**.The **uncolor** command can be applied to the index, header and body objects only. It removes entries from the list. You must specify the same *pattern* specified in the **color** command for it to be removed. The pattern \"**\\***\" is a special token which means to clear the color list of all entries.The **uncolor** command can be applied to the index, header and body objects only. It removes entries from the list. You must specify the same *pattern* specified in the **color** command for it to be removed. The pattern \"**\\***\" is a special token which means to clear the color list of all entries.The **uncolor** command can be applied to the index, header and body objects only. It removes entries from the list. You must specify the same *pattern* specified in the **color** command for it to be removed. The pattern \"**\\***\" is a special token which means to clear the color list of all entries.The **uncolor** command can be applied to the index, header and body objects only. It removes entries from the list. You must specify the same *pattern* specified in the **color** command for it to be removed. The pattern \"**\\***\" is a special token which means to clear the color list of all entries.The **uncolor** command can be applied to the index, header and body objects only. It removes entries from the list. You must specify the same *pattern* specified in the **color** command for it to be removed. The pattern \"**\\***\" is a special token which means to clear the color list of all entries.The **uncolor** command can be applied to the index, header and body objects only. It removes entries from the list. You must specify the same *pattern* specified in the **color** command for it to be removed. The pattern \"**\\***\" is a special token which means to clear the color list of all entries.For further information on colorization, please consult the NeoMutt manual.For further information on colorization, please consult the NeoMutt manual.For further information on colorization, please consult the NeoMutt manual.For further information on colorization, please consult the NeoMutt manual.For further information on colorization, please consult the NeoMutt manual.For further information on colorization, please consult the NeoMutt manual."
    },
    "uncolor": {
      "description": "```neomuttrc\ncolor object [ attribute ... ] foreground background\ncolor { header | body } [ attribute ... ] foreground background regex\ncolor status foreground background [regex [ num ]]\ncolor index-object [ attribute ... ] foreground background pattern\ncolor compose composeobject foreground background\ncolor compose composeobject [ attribute ... ] foreground background\nuncolor { index-object | header | body } { * | pattern ... }\n```\nIf your terminal supports color, these commands can be used to assign *foreground*/*background* combinations to certain *object*s. The currently defined *object*s are: **attach_headers**, **attachment**, **body**, **bold**, **error**, **hdrdefault**, **header**, **index**, **index_author**, **index_collapsed**, **index_date**, **index_flags**, **index_label**, **index_number**, **index_size**, **index_subject**, **index_tag**, **index_tags**, **indicator**, **markers**, **message**, **normal**, **progress**, **prompt**, **quoted**, **quoted*N***, **search**, **signature**, **status**, **tilde**, **tree**, **underline**.If the sidebar is enabled the following *object*s are also valid: **sidebar_background**, **sidebar_divider**, **sidebar_flagged**, **sidebar_highlight**, **sidebar_indicator**, **sidebar_new**, **sidebar_ordinary**, **sidebar_spool_file**.The **body** and **header** objects allow you to restrict the colorization to a regular expression. The **index-object** permits you to select colored messages by pattern.The **header** and **body** match *regex* in the header/body of a message, **index-object** can match *pattern* in the message index. Note that IMAP server-side searches (=b, =B, =h) are not supported for color index patterns.The **status** object optionally takes an regex and a match number. If the regex is given, only the matching parts are colored. If additionally the match number is given, only that sub-match of the regex is colored.Valid composeobjects include **header**, **security_encrypt**, **security_sign**, **security_both**, **security_none**.Valid colors include: **default**, **black**, **red**, **green**, **yellow**, **blue**, **magenta**, **cyan**, **white**, **\\#*RRGGBB***, **color*N***.Valid attributes include: **none**, **bold**, **underline**, **reverse**, and **standout**.The **uncolor** command can be applied to the index, header and body objects only. It removes entries from the list. You must specify the same *pattern* specified in the **color** command for it to be removed. The pattern \"**\\***\" is a special token which means to clear the color list of all entries.For further information on colorization, please consult the NeoMutt manual."
    },
    "crypt-hook": {
      "description": "```neomuttrc\ncrypt-hook regex keyid\n```\nThe crypt-hook command provides a method by which you can specify the ID of the public key to be used when encrypting messages to a certain recipient. The meaning of *keyid* is to be taken broadly: This can be a different email address, a numerical *keyid*, or even just an arbitrary search string. You may use multiple **crypt-hook**s with the same *regex*; multiple matching **crypt-hook**s result in the use of multiple *keyid*s for a recipient."
    },
    "index-format-hook": {
      "description": "```neomuttrc\n**index-format-hook** *name* \\[**!**\\]*pattern* *format-string*\n```\n:   This command is used to inject format strings dynamically into     \\$index_format based on pattern matching against the current     message.The \\$index_format expando *%@name@* specifies a placeholder for the injection. Index-format-hooks with the same *name* are matched using *pattern* against the current message. Matching is done in the order specified in the .neomuttrc, with the first match being used. The hook\\'s *format-string* is then substituted and evaluated. "
    },
    "exec": {
      "description": "```neomuttrc\nexec function [ function ... ]\n```\nThis command can be used to execute any *function*. Functions are listed in the function reference. \"**exec** *function*\" is equivalent to \"**push** \\<*function*\\>\"."
    },
    "fcc-save-hook": {
      "description": "```neomuttrc\nfcc-save-hook pattern mailbox\nfcc-hook pattern mailbox\nsave-hook pattern mailbox\n```\n**fcc-save-hook** is a shortcut, equivalent to doing both a **fcc-hook** and a **save-hook** with its arguments, including %-expansion on *mailbox* according to \\$index_format.**fcc-hook** is used to save outgoing mail in a mailbox other than \\$record. NeoMutt searches the initial list of message recipients for the first matching *pattern* and uses *mailbox* as the default \"Fcc:\" mailbox. If no match is found the message will be saved to \\$record mailbox.**save-hook** is used to override the default mailbox used when saving messages. *mailbox* will be used as the default if the message matches *pattern*.To provide more flexibility and good defaults, NeoMutt applies the expandos of \\$index_format to *mailbox* after it was expanded. See *PATTERNS* section below or consult section \"**Message Matching in Hooks**\" in NeoMutt manual for information on the exact format of *pattern*."
    },
    "fcc-hook": {
      "description": "```neomuttrc\nfcc-save-hook pattern mailbox\nfcc-hook pattern mailbox\nsave-hook pattern mailbox\n```\n**fcc-save-hook** is a shortcut, equivalent to doing both a **fcc-hook** and a **save-hook** with its arguments, including %-expansion on *mailbox* according to \\$index_format.**fcc-hook** is used to save outgoing mail in a mailbox other than \\$record. NeoMutt searches the initial list of message recipients for the first matching *pattern* and uses *mailbox* as the default \"Fcc:\" mailbox. If no match is found the message will be saved to \\$record mailbox.**save-hook** is used to override the default mailbox used when saving messages. *mailbox* will be used as the default if the message matches *pattern*.To provide more flexibility and good defaults, NeoMutt applies the expandos of \\$index_format to *mailbox* after it was expanded. See *PATTERNS* section below or consult section \"**Message Matching in Hooks**\" in NeoMutt manual for information on the exact format of *pattern*."
    },
    "save-hook": {
      "description": "```neomuttrc\nfcc-save-hook pattern mailbox\nfcc-hook pattern mailbox\nsave-hook pattern mailbox\n```\n**fcc-save-hook** is a shortcut, equivalent to doing both a **fcc-hook** and a **save-hook** with its arguments, including %-expansion on *mailbox* according to \\$index_format.**fcc-hook** is used to save outgoing mail in a mailbox other than \\$record. NeoMutt searches the initial list of message recipients for the first matching *pattern* and uses *mailbox* as the default \"Fcc:\" mailbox. If no match is found the message will be saved to \\$record mailbox.**save-hook** is used to override the default mailbox used when saving messages. *mailbox* will be used as the default if the message matches *pattern*.To provide more flexibility and good defaults, NeoMutt applies the expandos of \\$index_format to *mailbox* after it was expanded. See *PATTERNS* section below or consult section \"**Message Matching in Hooks**\" in NeoMutt manual for information on the exact format of *pattern*."
    },
    "folder-hook": {
      "description": "```neomuttrc\nfolder-hook [-noregex] regex command\n```\nWhen NeoMutt enters a folder which matches *regex* (or, when *regex* is preceded by an exclamation mark, does not match *regex*), the given *command* is executed. The *-noregex* switch controls whether *regex* is matches as simple string equality or full regex match.When several **folder-hook**s match a given mail folder, they are executed in the order given in the configuration file."
    },
    "group": {
      "description": "```neomuttrc\ngroup [ -group name ... ] { -rx regex ... | -addr address ... }\nungroup [ -group name ... ] { * | -rx regex ... | -addr address ... }\n```\n**group** is used to directly add either addresses or regular expressions to the specified group or groups. The different categories of arguments to the **group** command can be in any order. The flags **-rx** and **-addr** specify what the following strings (that cannot begin with a hyphen) should be interpreted as: either a regular expression or an email address, respectively.**ungroup** is used to remove addresses or regular expressions from the specified group or groups. The syntax is similar to the **group** command, however the special character \"**\\***\" can be used to empty a group of all of its contents.These address groups can also be created implicitly by the **alias**, **lists**, **subscribe** and **alternates** commands by specifying the optional **-group** option.Once defined, these address groups can be used in patterns to search for and limit the display to messages matching a group."
    },
    "ungroup": {
      "description": "```neomuttrc\ngroup [ -group name ... ] { -rx regex ... | -addr address ... }\nungroup [ -group name ... ] { * | -rx regex ... | -addr address ... }\n```\n**group** is used to directly add either addresses or regular expressions to the specified group or groups. The different categories of arguments to the **group** command can be in any order. The flags **-rx** and **-addr** specify what the following strings (that cannot begin with a hyphen) should be interpreted as: either a regular expression or an email address, respectively.**ungroup** is used to remove addresses or regular expressions from the specified group or groups. The syntax is similar to the **group** command, however the special character \"**\\***\" can be used to empty a group of all of its contents.These address groups can also be created implicitly by the **alias**, **lists**, **subscribe** and **alternates** commands by specifying the optional **-group** option.Once defined, these address groups can be used in patterns to search for and limit the display to messages matching a group."
    },
    "hdr_order": {
      "description": "```neomuttrc\nhdr_order header [ header ... ]\nunhdr_order { * | header ... }\n```\nWith the **hdr_order** command you can specify an order in which NeoMutt will attempt to present these headers to you when viewing messages.\"**unhdr_order\u00a0\\***\" will clear all previous headers from the order list, thus removing the header order effects set by the system-wide startup file."
    },
    "unhdr_order": {
      "description": "```neomuttrc\nhdr_order header [ header ... ]\nunhdr_order { * | header ... }\n```\nWith the **hdr_order** command you can specify an order in which NeoMutt will attempt to present these headers to you when viewing messages.\"**unhdr_order\u00a0\\***\" will clear all previous headers from the order list, thus removing the header order effects set by the system-wide startup file."
    },
    "ifdef": {
      "description": "```neomuttrc\nifdef symbol \"config-command [ args ... ]\"\nifndef symbol \"config-command [ args ... ]\"\nfinish\n```\nThe **ifdef** feature introduces three new commands to NeoMutt and allow you to share one config file between versions of NeoMutt that may have different features compiled in.Example Symbol                          Description`sidebar_format`                        Config variable   `status-color`, `imap`                  Compiled-in feature   `pgp-menu`, `group-related`             Function   `index-format-hook`, `tag-transforms`   Command   `my_var`                                My variable   `lmdb`, `tokyocabinet`                  Store (database)   `HOME`, `COLUMNS`                       Environment variableA list of compile-time *symbol*s can be seen in the output of the command \"**neomutt\u00a0-v**\" (in the \"**Compile options**\" section).**finish** is particularly useful when combined with **ifndef**."
    },
    "ifndef": {
      "description": "```neomuttrc\nifdef symbol \"config-command [ args ... ]\"\nifndef symbol \"config-command [ args ... ]\"\nfinish\n```\nThe **ifdef** feature introduces three new commands to NeoMutt and allow you to share one config file between versions of NeoMutt that may have different features compiled in.Example Symbol                          Description`sidebar_format`                        Config variable   `status-color`, `imap`                  Compiled-in feature   `pgp-menu`, `group-related`             Function   `index-format-hook`, `tag-transforms`   Command   `my_var`                                My variable   `lmdb`, `tokyocabinet`                  Store (database)   `HOME`, `COLUMNS`                       Environment variableA list of compile-time *symbol*s can be seen in the output of the command \"**neomutt\u00a0-v**\" (in the \"**Compile options**\" section).**finish** is particularly useful when combined with **ifndef**."
    },
    "finish": {
      "description": "```neomuttrc\nifdef symbol \"config-command [ args ... ]\"\nifndef symbol \"config-command [ args ... ]\"\nfinish\n```\nThe **ifdef** feature introduces three new commands to NeoMutt and allow you to share one config file between versions of NeoMutt that may have different features compiled in.Example Symbol                          Description`sidebar_format`                        Config variable   `status-color`, `imap`                  Compiled-in feature   `pgp-menu`, `group-related`             Function   `index-format-hook`, `tag-transforms`   Command   `my_var`                                My variable   `lmdb`, `tokyocabinet`                  Store (database)   `HOME`, `COLUMNS`                       Environment variableA list of compile-time *symbol*s can be seen in the output of the command \"**neomutt\u00a0-v**\" (in the \"**Compile options**\" section).**finish** is particularly useful when combined with **ifndef**."
    },
    "ignore": {
      "description": "```neomuttrc\nignore string [ string ... ]\nunignore { * | string ... }\n```\nThe **ignore** command allows you to specify header fields which you don\\'t normally want to see in the pager. You do not need to specify the full header field name. For example, \"**ignore** content-\" will ignore all header fields that begin with the string \"content-\", \"**ignore**\u00a0\\*\" will ignore all headers.To remove a previously added token from the list, use the **unignore** command. For example, \"**unignore**\u00a0\\*\" will remove all tokens from the ignore list."
    },
    "unignore": {
      "description": "```neomuttrc\nignore string [ string ... ]\nunignore { * | string ... }\n```\nThe **ignore** command allows you to specify header fields which you don\\'t normally want to see in the pager. You do not need to specify the full header field name. For example, \"**ignore** content-\" will ignore all header fields that begin with the string \"content-\", \"**ignore**\u00a0\\*\" will ignore all headers.To remove a previously added token from the list, use the **unignore** command. For example, \"**unignore**\u00a0\\*\" will remove all tokens from the ignore list."
    },
    "lists": {
      "description": "```neomuttrc\nlists [ -group name ... ] regex [ regex ... ]\nunlists [ -group name ... ] { * | regex ... }\nsubscribe [ -group name ... ] regex [ regex ... ]\nunsubscribe [ -group name ... ] { * | regex ... }\n```\nNeoMutt maintains two lists of mailing list address regular expressions, a list of subscribed mailing lists, and a list of known mailing lists. All subscribed mailing lists are known.The **lists** command adds a mailing list address to the list of known mailing lists. The **unlists** command removes a mailing list from the lists of known and subscribed mailing lists.The **subscribe** command adds a mailing list to the lists of known and subscribed mailing lists. The **unsubscribe** command removes it from the list of subscribed mailing lists.The **-group** flag adds all of the subsequent regular expressions to the *name*d group."
    },
    "unlists": {
      "description": "```neomuttrc\nlists [ -group name ... ] regex [ regex ... ]\nunlists [ -group name ... ] { * | regex ... }\nsubscribe [ -group name ... ] regex [ regex ... ]\nunsubscribe [ -group name ... ] { * | regex ... }\n```\nNeoMutt maintains two lists of mailing list address regular expressions, a list of subscribed mailing lists, and a list of known mailing lists. All subscribed mailing lists are known.The **lists** command adds a mailing list address to the list of known mailing lists. The **unlists** command removes a mailing list from the lists of known and subscribed mailing lists.The **subscribe** command adds a mailing list to the lists of known and subscribed mailing lists. The **unsubscribe** command removes it from the list of subscribed mailing lists.The **-group** flag adds all of the subsequent regular expressions to the *name*d group."
    },
    "subscribe": {
      "description": "```neomuttrc\nlists [ -group name ... ] regex [ regex ... ]\nunlists [ -group name ... ] { * | regex ... }\nsubscribe [ -group name ... ] regex [ regex ... ]\nunsubscribe [ -group name ... ] { * | regex ... }\n```\nNeoMutt maintains two lists of mailing list address regular expressions, a list of subscribed mailing lists, and a list of known mailing lists. All subscribed mailing lists are known.The **lists** command adds a mailing list address to the list of known mailing lists. The **unlists** command removes a mailing list from the lists of known and subscribed mailing lists.The **subscribe** command adds a mailing list to the lists of known and subscribed mailing lists. The **unsubscribe** command removes it from the list of subscribed mailing lists.The **-group** flag adds all of the subsequent regular expressions to the *name*d group."
    },
    "unsubscribe": {
      "description": "```neomuttrc\nlists [ -group name ... ] regex [ regex ... ]\nunlists [ -group name ... ] { * | regex ... }\nsubscribe [ -group name ... ] regex [ regex ... ]\nunsubscribe [ -group name ... ] { * | regex ... }\n```\nNeoMutt maintains two lists of mailing list address regular expressions, a list of subscribed mailing lists, and a list of known mailing lists. All subscribed mailing lists are known.The **lists** command adds a mailing list address to the list of known mailing lists. The **unlists** command removes a mailing list from the lists of known and subscribed mailing lists.The **subscribe** command adds a mailing list to the lists of known and subscribed mailing lists. The **unsubscribe** command removes it from the list of subscribed mailing lists.The **-group** flag adds all of the subsequent regular expressions to the *name*d group."
    },
    "macro": {
      "description": "```neomuttrc\nmacro menu[,menu ... ] key sequence [ description ]\nunmacro { * | menu | [,menu...]} [ key ]\n```\nThis command binds the given *sequence* of keys to the given *key* in the given *menu* or menus. For currently defined menus, see **bind** command above. To specify multiple menus, put only a comma between the menus.Optionally you can specify a descriptive text after *sequence*, which is shown in the help screens if they contain a *description*.Missing key sequence in **unmacro** command means unmacro all macros in menus given in *menu*."
    },
    "unmacro": {
      "description": "```neomuttrc\nmacro menu[,menu ... ] key sequence [ description ]\nunmacro { * | menu | [,menu...]} [ key ]\n```\nThis command binds the given *sequence* of keys to the given *key* in the given *menu* or menus. For currently defined menus, see **bind** command above. To specify multiple menus, put only a comma between the menus.Optionally you can specify a descriptive text after *sequence*, which is shown in the help screens if they contain a *description*.Missing key sequence in **unmacro** command means unmacro all macros in menus given in *menu*."
    },
    "mailboxes": {
      "description": "```neomuttrc\nmailboxes mailbox [ mailbox ... ]\nnamed-mailboxes description mailbox [description mailbox ... ]\nunmailboxes { * | mailbox ... }\n```\nThe **mailboxes** specifies folders which can receive mail and which will be checked for new messages. When changing folders, pressing space will cycle through folders with new mail.The **named-mailboxes** is an alternative to **mailboxes** that allows adding a description for a mailbox. NeoMutt can be configured to display the description instead of the mailbox path.The **unmailboxes** command is used to remove a file name from the list of folders which can receive mail. If \"**\\***\" is specified as the file name, the list is emptied."
    },
    "named-mailboxes": {
      "description": "```neomuttrc\nmailboxes mailbox [ mailbox ... ]\nnamed-mailboxes description mailbox [description mailbox ... ]\nunmailboxes { * | mailbox ... }\n```\nThe **mailboxes** specifies folders which can receive mail and which will be checked for new messages. When changing folders, pressing space will cycle through folders with new mail.The **named-mailboxes** is an alternative to **mailboxes** that allows adding a description for a mailbox. NeoMutt can be configured to display the description instead of the mailbox path.The **unmailboxes** command is used to remove a file name from the list of folders which can receive mail. If \"**\\***\" is specified as the file name, the list is emptied."
    },
    "unmailboxes": {
      "description": "```neomuttrc\nmailboxes mailbox [ mailbox ... ]\nnamed-mailboxes description mailbox [description mailbox ... ]\nunmailboxes { * | mailbox ... }\n```\nThe **mailboxes** specifies folders which can receive mail and which will be checked for new messages. When changing folders, pressing space will cycle through folders with new mail.The **named-mailboxes** is an alternative to **mailboxes** that allows adding a description for a mailbox. NeoMutt can be configured to display the description instead of the mailbox path.The **unmailboxes** command is used to remove a file name from the list of folders which can receive mail. If \"**\\***\" is specified as the file name, the list is emptied."
    },
    "mailto_allow": {
      "description": "```neomuttrc\nmailto_allow { * | header-field ... }\nunmailto_allow { * | header-field ... }\n```\nAs a security measure, NeoMutt will only add user-approved *header-field*s from a *mailto:* URL. This is necessary since NeoMutt will handle certain *header-field*s, such as **Attach**, in a special way. The **mailto_allow** and **unmailto_allow** commands allow the user to modify the list of approved headers.NeoMutt initializes the default list to contain only the **Subject** and **Body** *header-field*s, which are the only requirement specified by the *mailto:* specification in RFC2368, and the **Cc**, **In-Reply-To**, **References** headers to aid with replies to mailing lists."
    },
    "unmailto_allow": {
      "description": "```neomuttrc\nmailto_allow { * | header-field ... }\nunmailto_allow { * | header-field ... }\n```\nAs a security measure, NeoMutt will only add user-approved *header-field*s from a *mailto:* URL. This is necessary since NeoMutt will handle certain *header-field*s, such as **Attach**, in a special way. The **mailto_allow** and **unmailto_allow** commands allow the user to modify the list of approved headers.NeoMutt initializes the default list to contain only the **Subject** and **Body** *header-field*s, which are the only requirement specified by the *mailto:* specification in RFC2368, and the **Cc**, **In-Reply-To**, **References** headers to aid with replies to mailing lists."
    },
    "echo": {
      "description": "```neomuttrc\n**echo** *message*\n```\n:   Prints *message* to the message window. After printing the message,     echo will pause for the number of seconds specified by \\$sleep_time."
    },
    "cd": {
      "description": "```neomuttrc\n**cd** *directory*\n```\n:   Changes the current working directory."
    },
    "mbox-hook": {
      "description": "```neomuttrc\nmbox-hook [-noregex] regex mailbox\n```\nWhen NeoMutt changes to a mail folder which matches *regex*, *mailbox* will be used as the \"mbox\" folder, i.e. read messages will be moved to that folder when the mail folder is left. The *-noregex* switch controls whether *regex* is matches as simple string equality or full regex match.Note that execution of **mbox-hook**s is dependent on the \\$move configuration variable. If set to \"no\" (the default), **mbox-hook**s will not be executed.The first matching **mbox-hook** applies."
    },
    "message-hook": {
      "description": "```neomuttrc\nmessage-hook pattern command\n```\nBefore NeoMutt displays (or formats for replying or forwarding) a message which matches the given *pattern* (or, when it is preceded by an exclamation mark, does not match the *pattern*), the given *command* is executed. When multiple **message-hook**s match, they are executed in the order in which they occur in the configuration file."
    },
    "mime_lookup": {
      "description": "```neomuttrc\nmime_lookup mime-type[/mime-subtype] [ mime-type[/mime-subtype] ... ]\nunmime_lookup { * | mime-type[/mime-subtype] ... }\n```\nThis command permits you to define a list of \"data\" MIME content types for which NeoMutt will try to determine the actual file type from the file name, and not use a **mailcap**(5) entry given for the original MIME type. For instance, you may add the **application/octet-stream** MIME type to this list.In addition, the **unmime_lookup** command may be used to disable this feature for any particular MIME type if it had been set, for example in a global *neomuttrc*."
    },
    "unmime_lookup": {
      "description": "```neomuttrc\nmime_lookup mime-type[/mime-subtype] [ mime-type[/mime-subtype] ... ]\nunmime_lookup { * | mime-type[/mime-subtype] ... }\n```\nThis command permits you to define a list of \"data\" MIME content types for which NeoMutt will try to determine the actual file type from the file name, and not use a **mailcap**(5) entry given for the original MIME type. For instance, you may add the **application/octet-stream** MIME type to this list.In addition, the **unmime_lookup** command may be used to disable this feature for any particular MIME type if it had been set, for example in a global *neomuttrc*."
    },
    "mono": {
      "description": "```neomuttrc\nmono object attribute\nmono { header | body } attribute regex\nmono index-object attribute pattern\nunmono { index-object | header | body } { * | pattern ... }\n```\nFor terminals which don\\'t support color, you can still assign attributes to objects.For terminals which don\\'t support color, you can still assign attributes to objects.For terminals which don\\'t support color, you can still assign attributes to objects."
    },
    "unmono": {
      "description": "```neomuttrc\nmono object attribute\nmono { header | body } attribute regex\nmono index-object attribute pattern\nunmono { index-object | header | body } { * | pattern ... }\n```\nFor terminals which don\\'t support color, you can still assign attributes to objects."
    },
    "my_hdr": {
      "description": "```neomuttrc\nmy_hdr string\nunmy_hdr { * | field ... }\n```\nUsing **my_hdr**, you can define headers which will be added to the messages you compose. **unmy_hdr** will remove the given user-defined headers."
    },
    "unmy_hdr": {
      "description": "```neomuttrc\nmy_hdr string\nunmy_hdr { * | field ... }\n```\nUsing **my_hdr**, you can define headers which will be added to the messages you compose. **unmy_hdr** will remove the given user-defined headers."
    },
    "open-hook": {
      "description": "```neomuttrc\nappend-hook '\\.gz$' \"gzip --stdout '%t' >> '%f'\"\nclose-hook '\\.gz$' \"gzip --stdout '%t' > '%f'\"\nopen-hook '\\.gz$' \"gzip --stdout --decompress '%f' > '%t'\"\n```\n"
    },
    "close-hook": {
      "description": "```neomuttrc\nappend-hook '\\.gz$' \"gzip --stdout '%t' >> '%f'\"\nclose-hook '\\.gz$' \"gzip --stdout '%t' > '%f'\"\nopen-hook '\\.gz$' \"gzip --stdout --decompress '%f' > '%t'\"\n```\n"
    },
    "append-hook": {
      "description": "```neomuttrc\nappend-hook '\\.gz$' \"gzip --stdout '%t' >> '%f'\"\nclose-hook '\\.gz$' \"gzip --stdout '%t' > '%f'\"\nopen-hook '\\.gz$' \"gzip --stdout --decompress '%f' > '%t'\"\n```\n"
    },
    "push": {
      "description": "```neomuttrc\npush string\n```\nThis command adds the named *string* to the beginning of the keyboard buffer. The string may contain control characters, key names and function names like the sequence string in the **macro** command. You may use it to automatically run a sequence of commands at startup, or when entering certain folders.For using functions, it\\'s important to use angle brackets (\"\\<\" and \"\\>\") to make NeoMutt recognize the input as a function name. Otherwise it will simulate individual just keystrokes."
    },
    "reply-hook": {
      "description": "```neomuttrc\nreply-hook pattern command\nsend-hook pattern command\nsend2-hook pattern command\n```\nThese commands can be used to execute arbitrary configuration commands based upon recipients of the message. *pattern* is used to match the message, see section \"**Message Matching in Hooks**\" in manual for details. *command* is executed when *pattern* matches.**reply-hook** is matched against the message you are replying to, instead of the message you are sending. **send-hook** is matched against all messages, both new and replies. **Note**, **reply-hook**s are matched before the **send-hook**, regardless of the order specified in the user\\'s configuration file.**send2-hook** is matched every time a message is changed, either by editing it, or by using the compose menu to change its recipients or subject. **send2-hook** is executed after **send-hook**, and can, e.g., be used to set parameters such as the \\$sendmail variable depending on the message\\'s sender address. **Note**, **send-hook**s are only executed once after getting the initial list of recipients."
    },
    "send-hook": {
      "description": "```neomuttrc\nreply-hook pattern command\nsend-hook pattern command\nsend2-hook pattern command\n```\nThese commands can be used to execute arbitrary configuration commands based upon recipients of the message. *pattern* is used to match the message, see section \"**Message Matching in Hooks**\" in manual for details. *command* is executed when *pattern* matches.**reply-hook** is matched against the message you are replying to, instead of the message you are sending. **send-hook** is matched against all messages, both new and replies. **Note**, **reply-hook**s are matched before the **send-hook**, regardless of the order specified in the user\\'s configuration file.**send2-hook** is matched every time a message is changed, either by editing it, or by using the compose menu to change its recipients or subject. **send2-hook** is executed after **send-hook**, and can, e.g., be used to set parameters such as the \\$sendmail variable depending on the message\\'s sender address. **Note**, **send-hook**s are only executed once after getting the initial list of recipients."
    },
    "send2-hook": {
      "description": "```neomuttrc\nreply-hook pattern command\nsend-hook pattern command\nsend2-hook pattern command\n```\nThese commands can be used to execute arbitrary configuration commands based upon recipients of the message. *pattern* is used to match the message, see section \"**Message Matching in Hooks**\" in manual for details. *command* is executed when *pattern* matches.**reply-hook** is matched against the message you are replying to, instead of the message you are sending. **send-hook** is matched against all messages, both new and replies. **Note**, **reply-hook**s are matched before the **send-hook**, regardless of the order specified in the user\\'s configuration file.**send2-hook** is matched every time a message is changed, either by editing it, or by using the compose menu to change its recipients or subject. **send2-hook** is executed after **send-hook**, and can, e.g., be used to set parameters such as the \\$sendmail variable depending on the message\\'s sender address. **Note**, **send-hook**s are only executed once after getting the initial list of recipients."
    },
    "score": {
      "description": "```neomuttrc\nscore pattern value\nunscore { * | pattern ... }\n```\nThe **score** command adds *value* to a message\\'s score if *pattern* matches it. *pattern* is a string in the format described in the *PATTERNS* section below. *value* is a positive or negative integer. A message\\'s final score is the sum total of all matching score entries.The **unscore** command removes score entries from the list. You must specify the same *pattern* specified in the **score** command for it to be removed. The pattern \"**\\***\" is a special token which means to clear the list of all score entries."
    },
    "unscore": {
      "description": "```neomuttrc\nscore pattern value\nunscore { * | pattern ... }\n```\nThe **score** command adds *value* to a message\\'s score if *pattern* matches it. *pattern* is a string in the format described in the *PATTERNS* section below. *value* is a positive or negative integer. A message\\'s final score is the sum total of all matching score entries.The **unscore** command removes score entries from the list. You must specify the same *pattern* specified in the **score** command for it to be removed. The pattern \"**\\***\" is a special token which means to clear the list of all score entries."
    },
    "set": {
      "description": "```neomuttrc\nset { [ no | inv | & | ? ]variable } [ ... ]\nset { variable=value | variable+=increment | variable-=decrement } [ ... ]\nunset variable  [ variable ... ]\nreset variable  [ variable ... ]\ntoggle variable [ variable ... ]\nset variable ?\n```\nThese commands are used to set and manipulate configuration *variable*s.These commands are used to set and manipulate configuration *variable*s.These commands are used to set and manipulate configuration *variable*s.NeoMutt knows four basic types of *variable*s: boolean, number, string, string list and quadoption. Boolean *variable*s can be **set** (true), **unset** (false), or **toggle**d. Number *variable*s can be assigned a positive integer *value*. Value of number *variable*s can be incremented \\\"**+=**\\\" and decremented \\\"**-=**\\\". String list *variable*s use \\\"**+=**\\\" for appending increment to the string list and \\\"**-=**\\\" for removal decrement from the string list.NeoMutt knows four basic types of *variable*s: boolean, number, string, string list and quadoption. Boolean *variable*s can be **set** (true), **unset** (false), or **toggle**d. Number *variable*s can be assigned a positive integer *value*. Value of number *variable*s can be incremented \\\"**+=**\\\" and decremented \\\"**-=**\\\". String list *variable*s use \\\"**+=**\\\" for appending increment to the string list and \\\"**-=**\\\" for removal decrement from the string list.NeoMutt knows four basic types of *variable*s: boolean, number, string, string list and quadoption. Boolean *variable*s can be **set** (true), **unset** (false), or **toggle**d. Number *variable*s can be assigned a positive integer *value*. Value of number *variable*s can be incremented \\\"**+=**\\\" and decremented \\\"**-=**\\\". String list *variable*s use \\\"**+=**\\\" for appending increment to the string list and \\\"**-=**\\\" for removal decrement from the string list.String *variable*s consist of any number of printable characters and must be enclosed in quotes if they contain spaces or tabs. You may also use the escape sequences \"**\\\\n**\" and \"**\\\\t**\" for newline and tab, respectively. Content of a string *variable*s can be extended using \\\"**+=**\\\"String *variable*s consist of any number of printable characters and must be enclosed in quotes if they contain spaces or tabs. You may also use the escape sequences \"**\\\\n**\" and \"**\\\\t**\" for newline and tab, respectively. Content of a string *variable*s can be extended using \\\"**+=**\\\"String *variable*s consist of any number of printable characters and must be enclosed in quotes if they contain spaces or tabs. You may also use the escape sequences \"**\\\\n**\" and \"**\\\\t**\" for newline and tab, respectively. Content of a string *variable*s can be extended using \\\"**+=**\\\"Quadoption *variable*s are used to control whether or not to be prompted for certain actions, or to specify a default action. A *value* of **yes** will cause the action to be carried out automatically as if you had answered \"yes\" to the question. Similarly, a *value* of **no** will cause the action to be carried out as if you had answered \"no\". A *value* of **ask-yes** will cause a prompt with a default answer of \"yes\" and **ask-no** will provide a default answer of \"no\".Quadoption *variable*s are used to control whether or not to be prompted for certain actions, or to specify a default action. A *value* of **yes** will cause the action to be carried out automatically as if you had answered \"yes\" to the question. Similarly, a *value* of **no** will cause the action to be carried out as if you had answered \"no\". A *value* of **ask-yes** will cause a prompt with a default answer of \"yes\" and **ask-no** will provide a default answer of \"no\".Quadoption *variable*s are used to control whether or not to be prompted for certain actions, or to specify a default action. A *value* of **yes** will cause the action to be carried out automatically as if you had answered \"yes\" to the question. Similarly, a *value* of **no** will cause the action to be carried out as if you had answered \"no\". A *value* of **ask-yes** will cause a prompt with a default answer of \"yes\" and **ask-no** will provide a default answer of \"no\".The **toggle** command automatically prepends the \"**inv**\" prefix to all specified *variable*s. The **unset** command automatically prepends the \"**no**\" prefix to all specified *variable*s. If you use the command **set** and prefix the *variable* with \"**&**\" this has the same behavior as the **reset** command.The **toggle** command automatically prepends the \"**inv**\" prefix to all specified *variable*s. The **unset** command automatically prepends the \"**no**\" prefix to all specified *variable*s. If you use the command **set** and prefix the *variable* with \"**&**\" this has the same behavior as the **reset** command.The **toggle** command automatically prepends the \"**inv**\" prefix to all specified *variable*s. The **unset** command automatically prepends the \"**no**\" prefix to all specified *variable*s. If you use the command **set** and prefix the *variable* with \"**&**\" this has the same behavior as the **reset** command.The **reset** command resets all given *variable*s to the compile time defaults. With the **reset** command there exists the special *variable* **all**, which allows you to reset all *variable*s to their system defaults.The **reset** command resets all given *variable*s to the compile time defaults. With the **reset** command there exists the special *variable* **all**, which allows you to reset all *variable*s to their system defaults.The **reset** command resets all given *variable*s to the compile time defaults. With the **reset** command there exists the special *variable* **all**, which allows you to reset all *variable*s to their system defaults.Using the \\<**enter-command**\\> function, you can query the *value* of a *variable* by suffixing the name of the *variable* with a question mark: \\\":**set**\u00a0allow_8bit**?**\\\". The old prefix query syntax (\\\":**set**\u00a0**?**allow_8bit\\\") is also still supported.Using the \\<**enter-command**\\> function, you can query the *value* of a *variable* by suffixing the name of the *variable* with a question mark: \\\":**set**\u00a0allow_8bit**?**\\\". The old prefix query syntax (\\\":**set**\u00a0**?**allow_8bit\\\") is also still supported.Using the \\<**enter-command**\\> function, you can query the *value* of a *variable* by suffixing the name of the *variable* with a question mark: \\\":**set**\u00a0allow_8bit**?**\\\". The old prefix query syntax (\\\":**set**\u00a0**?**allow_8bit\\\") is also still supported.",
      "properties": {
        "abort_backspace": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, hitting backspace against an empty prompt aborts the prompt."
        },
        "abort_key": {
          "type": "string",
          "default": "007",
          "description": "Type: string\nDefault: \"007\"\n\nSpecifies the key that can be used to abort prompts. The format is the same as used in \\\"bind\\\" commands. The default is equivalent to \\\"Ctrl-G\\\". Note that the specified key should not be used in other bindings, as the abort operation has higher precedence and the binding will not have the desired effect.\nExample:\nset abort_key = \"<Esc>\" \nPlease note that when using \\<Esc\\> as the abort key, you may also want to set the environment variable ESCDELAY to a low value or even 0 which will reduce the time that ncurses waits to distinguish singular \\<Esc\\> key presses from the start of a terminal escape sequence. The default time is 1000 milliseconds and thus quite noticeable."
        },
        "abort_noattach": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "no",
          "description": "Type: quadoption\nDefault: no\n\nIf set to *yes*, when composing messages containing the regular expression specified by \\$abort_noattach_regex and no attachments are given, composition will be aborted. If set to *no*, composing messages as such will never be aborted.\nExample:\nset abort_noattach_regex = \"\\\\<attach(|ed|ments?)\\\\>\" "
        },
        "abort_noattach_regex": {
          "type": "string",
          "format": "regex",
          "default": "\\<(attach|attached|attachments?)\\>",
          "description": "Type: regular expression\nDefault: \"\\<(attach|attached|attachments?)\\>\"\n\nSpecifies a regular expression to match against the body of the message, to determine if an attachment was mentioned but mistakenly forgotten. If it matches, \\$abort_noattach will be consulted to determine if message sending will be aborted.\nLike other regular expressions in NeoMutt, the search is case sensitive if the pattern contains at least one upper case letter, and case insensitive otherwise."
        },
        "abort_nosubject": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-yes",
          "description": "Type: quadoption\nDefault: ask-yes\n\nIf set to *yes*, when composing messages and no subject is given at the subject prompt, composition will be aborted. If set to *no*, composing messages with no subject given at the subject prompt will never be aborted."
        },
        "abort_unmodified": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "yes",
          "description": "Type: quadoption\nDefault: yes\n\nIf set to *yes*, composition will automatically abort after editing the message body if no changes are made to the file (this check only happens after the *first* edit of the file). When set to *no*, composition will never be aborted."
        },
        "account_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nIf set, this command is used to retrieve account credentials. The command is invoked passing a number of *\\--key value* arguments with the specifics of the account to lookup. The command writes to standard output a number of *key: value* lines. Currently supported arguments are *\\--hostname*, *\\--username*, and *\\--type*, where type can be any of *imap*, *imaps*, *pop*, *pops*, *smtp*, *smtps*, *nntp*, and *nntps*. Currently supported output lines are *login*, *username*, and *password*."
        },
        "alias_file": {
          "type": "string",
          "default": "~/.neomuttrc",
          "description": "Type: path\nDefault: \"~/.neomuttrc\"\n\nThe default file in which to save aliases created by the `<create-alias>` function. Entries added to this file are encoded in the character set specified by \\$config_charset if it is *set* or the current character set otherwise.\n**Note:** NeoMutt will not automatically source this file; you must explicitly use the \\\"source\\\" command for it to be executed in case this option points to a dedicated alias file.\nThe default for this option is the currently used neomuttrc file, or \\\"\\~/.neomuttrc\\\" if no user neomuttrc was found."
        },
        "alias_format": {
          "type": "string",
          "default": "%3n %f%t %-15a %-56r | %c",
          "description": "Type: string\nDefault: \"%3n %f%t %-15a %-56r | %c\"\n\nSpecifies the format of the data displayed for the \\\"alias\\\" menu. The following `printf(3)`-style sequences are available:\n%a\n:   Alias name\n%c\n:   Comment\n%f\n:   Flags - currently, a \\\"d\\\" for an alias marked for deletion\n%n\n:   Index number\n%r\n:   Address which alias expands to\n%t\n:   Character which indicates if the alias is tagged for inclusion\n%\\>X\n:   right justify the rest of the string and pad with character \\\"X\\\"\n%\\|X\n:   pad to the end of the line with character \\\"X\\\"\n%\\*X\n:   soft-fill with character \\\"X\\\" as pad"
        },
        "allow_8bit": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nControls whether 8-bit data is converted to 7-bit using either Quoted- Printable or Base64 encoding when sending mail."
        },
        "allow_ansi": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nControls whether ANSI color codes in messages (and color tags in rich text messages) are to be interpreted. Messages containing these codes are rare, but if this option is *set*, their text will be colored accordingly. Note that this may override your color choices, and even present a security problem, since a message could include a line like\n[-- PGP output follows ... \nand give it the same color as your attachment color (see also \\$crypt_timestamp)."
        },
        "arrow_cursor": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, an arrow (\\\"-\\>\\\") will be used to indicate the current entry in menus instead of highlighting the whole line. On slow network or modem links this will make response faster because there is less that has to be redrawn on the screen when moving to the next or previous entries in the menu."
        },
        "arrow_string": {
          "type": "string",
          "default": "->",
          "description": "Type: string\nDefault: \"->\"\n\nSpecifies the string of arrow_cursor when arrow_cursor enabled."
        },
        "ascii_chars": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, NeoMutt will use plain ASCII characters when displaying thread and attachment trees, instead of the default *ACS* characters."
        },
        "ask_bcc": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, NeoMutt will prompt you for blind-carbon-copy (Bcc) recipients before editing an outgoing message."
        },
        "ask_cc": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, NeoMutt will prompt you for carbon-copy (Cc) recipients before editing the body of an outgoing message."
        },
        "ask_followup_to": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf set, NeoMutt will prompt you for follow-up groups before editing the body of an outgoing message."
        },
        "ask_x_comment_to": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf set, NeoMutt will prompt you for x-comment-to field before editing the body of an outgoing message."
        },
        "assumed_charset": {
          "type": "string",
          "default": "",
          "description": "Type: string list\nDefault: \"\"\n\nThis variable is a colon-separated list of character encoding schemes for messages without character encoding indication. Header field values and message body content without character encoding indication would be assumed that they are written in one of this list. By default, all the header fields and message body without any charset indication are assumed to be in \\\"us-ascii\\\".\nFor example, Japanese users might prefer this:\nset assumed_charset=\"iso-2022-jp:euc-jp:shift_jis:utf-8\" \nHowever, only the first content is valid for the message body."
        },
        "attach_charset": {
          "type": "string",
          "default": "",
          "description": "Type: string list\nDefault: \"\"\n\nThis variable is a colon-separated list of character encoding schemes for text file attachments. NeoMutt uses this setting to guess which encoding files being attached are encoded in to convert them to a proper character set given in \\$send_charset.\nIf *unset*, the value of \\$charset will be used instead. For example, the following configuration would work for Japanese text handling:\nset attach_charset=\"iso-2022-jp:euc-jp:shift_jis:utf-8\" \nNote: for Japanese users, \\\"iso-2022-\\*\\\" must be put at the head of the value as shown above if included."
        },
        "attach_format": {
          "type": "string",
          "default": "%u%D%I %t%4n %T%.40d%> [%.7m/%.10M, %.6e%?C?, %C?, %s] ",
          "description": "Type: string\nDefault: \"%u%D%I %t%4n %T%.40d%> [%.7m/%.10M, %.6e%?C?, %C?, %s] \"\n\nThis variable describes the format of the \\\"attachment\\\" menu. The following `printf(3)`-style sequences are understood:\n%C\n:   Charset\n%c\n:   Requires charset conversion (\\\"n\\\" or \\\"c\\\")\n%D\n:   Deleted flag\n%d\n:   Description (if none, falls back to %F)\n%e\n:   MIME content-transfer-encoding\n%f\n:   Filename\n%F\n:   Filename in content-disposition header (if none, falls back to %f)\n%I\n:   Disposition (\\\"I\\\" for inline, \\\"A\\\" for attachment)\n%m\n:   Major MIME type\n%M\n:   MIME subtype\n%n\n:   Attachment number\n%Q\n:   \\\"Q\\\", if MIME part qualifies for attachment counting\n%s\n:   Size (see formatstrings-size)\n%T\n:   Graphic tree characters\n%t\n:   Tagged flag\n%u\n:   Unlink (=to delete) flag\n%X\n:   Number of qualifying MIME parts in this part and its children (please see the \\\"attachments\\\" section for possible speed effects)\n%\\>X\n:   Right justify the rest of the string and pad with character \\\"X\\\"\n%\\|X\n:   Pad to the end of the line with character \\\"X\\\"\n%\\*X\n:   Soft-fill with character \\\"X\\\" as pad\nFor an explanation of \\\"soft-fill\\\", see the \\$index_format documentation."
        },
        "attach_save_dir": {
          "type": "string",
          "default": "./",
          "description": "Type: path\nDefault: \"./\"\n\nThe directory where attachments are saved."
        },
        "attach_save_without_prompting": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis variable, when set to true, will cause attachments to be saved to the \\'attach_save_dir\\' location without prompting the user for the filename."
        },
        "attach_sep": {
          "type": "string",
          "default": "\\n",
          "description": "Type: string\nDefault: \"\\n\"\n\nThe separator to add between attachments when operating (saving, printing, piping, etc) on a list of tagged attachments."
        },
        "attach_split": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf this variable is *unset*, when operating (saving, printing, piping, etc) on a list of tagged attachments, NeoMutt will concatenate the attachments and will operate on them as a single attachment. The \\$attach_sep separator is added after each attachment. When *set*, NeoMutt will operate on the attachments one by one."
        },
        "attribution_intro": {
          "type": "string",
          "default": "On %d, %n wrote",
          "description": "Type: string\nDefault: \"On %d, %n wrote:\"\n\nThis is the string that will precede a replied-to message which is quoted in the main body of the reply (this is the case when \\$include is set).\nFor a full listing of defined `printf(3)`-like sequences see the section on \\$index_format. See also \\$attribution_locale."
        },
        "attribution_locale": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThe locale used by `strftime(3)` to format dates in the attribution strings. Legal values are the strings your system accepts for the locale environment variable `$LC_TIME`.\nThis variable is to allow the attribution date format to be customized by recipient or folder using hooks. By default, NeoMutt will use your locale environment, so there is no need to set this except to override that default.\nAffected variables are: \\$attribution_intro, \\$attribution_trailer, \\$forward_attribution_intro, \\$forward_attribution_trailer, \\$indent_string."
        },
        "attribution_trailer": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nSimilar to the \\$attribution_intro variable, this is the string that will come after a replied-to message which is quoted in the main body of the reply (this is the case when \\$include is set).\nFor a full listing of defined `printf(3)`-like sequences see the section on \\$index_format. See also \\$attribution_locale."
        },
        "auto_edit": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set* along with \\$edit_headers, NeoMutt will skip the initial send-menu (prompting for subject and recipients) and allow you to immediately begin editing the body of your message. The send-menu may still be accessed once you have finished editing the body of your message.\n**Note:** when this option is *set*, you can\\'t use send-hooks that depend on the recipients when composing a new (non-reply) message, as the initial list of recipients is empty.\nAlso see \\$fast_reply."
        },
        "auto_subscribe": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt assumes the presence of a List-Post header means the recipient is subscribed to the list. Unless the mailing list is in the \\\"unsubscribe\\\" or \\\"unlist\\\" lists, it will be added to the \\\"subscribe\\\" list. Parsing and checking these things slows header reading down, so this option is disabled by default."
        },
        "auto_tag": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, functions in the *index* menu which affect a message will be applied to all tagged messages (if there are any). When unset, you must first use the `<tag-prefix>` function (bound to \\\";\\\" by default) to make the next function apply to all tagged messages."
        },
        "autocrypt": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, enables autocrypt, which provides passive encryption protection with keys exchanged via headers. See \\\"autocryptdoc\\\" for more details. (Autocrypt only)"
        },
        "autocrypt_acct_format": {
          "type": "string",
          "default": "%4n %-30a %20p %10s",
          "description": "Type: string\nDefault: \"%4n %-30a %20p %10s\"\n\nThis variable describes the format of the \\\"autocrypt account\\\" menu. The following `printf(3)`-style sequences are understood\n%a\n:   email address\n%k\n:   gpg keyid\n%n\n:   current entry number\n%p\n:   prefer-encrypt flag\n%s\n:   status flag (active/inactive)\n(Autocrypt only)"
        },
        "autocrypt_dir": {
          "type": "string",
          "default": "~/.mutt/autocrypt",
          "description": "Type: path\nDefault: \"~/.mutt/autocrypt\"\n\nThis variable sets where autocrypt files are stored, including the GPG keyring and SQLite database. See \\\"autocryptdoc\\\" for more details. (Autocrypt only)"
        },
        "autocrypt_reply": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, replying to an autocrypt email automatically enables autocrypt in the reply. You may want to unset this if you\\'re using the same key for autocrypt as normal web-of-trust, so that autocrypt isn\\'t forced on for all encrypted replies. (Autocrypt only)"
        },
        "beep": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen this variable is *set*, NeoMutt will beep when an error occurs."
        },
        "beep_new": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen this variable is *set*, NeoMutt will beep whenever it prints a message notifying you of new mail. This is independent of the setting of the \\$beep variable."
        },
        "bounce": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-yes",
          "description": "Type: quadoption\nDefault: ask-yes\n\nControls whether you will be asked to confirm bouncing messages. If set to *yes* you don\\'t get asked if you want to bounce a message. Setting this variable to *no* is not generally useful, and thus not recommended, because you are unable to bounce messages."
        },
        "bounce_delivered": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen this variable is *set*, NeoMutt will include Delivered-To headers when bouncing messages. Postfix users may wish to *unset* this variable."
        },
        "braille_friendly": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen this variable is *set*, NeoMutt will place the cursor at the beginning of the current line in menus, even when the \\$arrow_cursor variable is *unset*, making it easier for blind persons using Braille displays to follow these menus. The option is *unset* by default because many visual terminals don\\'t permit making the cursor invisible."
        },
        "browser_abbreviate_mailboxes": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen this variable is *set*, NeoMutt will abbreviate mailbox names in the browser mailbox list, using \\'\\~\\' and \\'=\\' shortcuts.\nThe default `\"alpha\"` setting of \\$sort_browser uses locale-based sorting (using `strcoll(3)`), which ignores some punctuation. This can lead to some situations where the order doesn\\'t make intuitive sense. In those cases, it may be desirable to *unset* this variable."
        },
        "catchup_newsgroup": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-yes",
          "description": "Type: quadoption\nDefault: ask-yes\n\nIf this variable is *set*, NeoMutt will mark all articles in newsgroup as read when you quit the newsgroup (catchup newsgroup)."
        },
        "certificate_file": {
          "type": "string",
          "default": "~/.mutt_certificates",
          "description": "Type: path\nDefault: \"~/.mutt_certificates\"\n\nThis variable specifies the file where the certificates you trust are saved. When an unknown certificate is encountered, you are asked if you accept it or not. If you accept it, the certificate can also be saved in this file and further connections are automatically accepted.\nYou can also manually add CA certificates in this file. Any server certificate that is signed with one of these CA certificates is also automatically accepted.\nExample:\nset certificate_file=~/.neomutt/certificates "
        },
        "change_folder_next": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen this variable is *set*, the `<change-folder>` function mailbox suggestion will start at the next folder in your \\\"mailboxes\\\" list, instead of starting at the first folder in the list."
        },
        "charset": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nCharacter set your terminal uses to display and enter textual data. It is also the fallback for \\$send_charset.\nUpon startup NeoMutt tries to derive this value from environment variables such as `$LC_CTYPE` or `$LANG`.\n**Note:** It should only be set in case NeoMutt isn\\'t able to determine the character set used correctly."
        },
        "check_mbox_size": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen this variable is *set*, NeoMutt will use file size attribute instead of access time when checking for new mail in mbox and mmdf folders.\nThis variable is *unset* by default and should only be enabled when new mail detection for these folder types is unreliable or doesn\\'t work.\nNote that enabling this variable should happen before any \\\"mailboxes\\\" directives occur in configuration files regarding mbox or mmdf folders because NeoMutt needs to determine the initial new mail status of such a mailbox by performing a fast mailbox scan when it is defined. Afterwards the new mail status is tracked by file size changes."
        },
        "check_new": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\n**Note:** this option only affects *maildir* and *MH* style mailboxes.\nWhen *set*, NeoMutt will check for new mail delivered while the mailbox is open. Especially with MH mailboxes, this operation can take quite some time since it involves scanning the directory and checking each file to see if it has already been looked at. If this variable is *unset*, no check for new mail is performed while the mailbox is open."
        },
        "collapse_all": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will collapse all threads when entering a folder."
        },
        "collapse_flagged": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *unset*, NeoMutt will not collapse a thread if it contains any flagged messages."
        },
        "collapse_unread": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *unset*, NeoMutt will not collapse a thread if it contains any unread messages."
        },
        "color_directcolor": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will use and allow 24bit colours (aka truecolor aka directcolor). For colours to work properly support from the terminal is required as well as a properly set TERM environment variable advertising the terminals directcolor capability, e.g. \\\"TERM=xterm-direct\\\".\nNeoMutt tries to detect whether the terminal supports 24bit colours and enables this variable if it does. If this fails for some reason, you can force 24bit colours by setting this variable manually. You may also try to force a certain TERM environment variable by starting NeoMutt from a terminal as follows (this results in wrong colours if the terminal does not implement directcolors):\nTERM=xterm-direct neomutt \nNote: This variable must be set before using any \\`color\\` commands."
        },
        "compose_format": {
          "type": "string",
          "default": "-- NeoMutt",
          "description": "Type: string\nDefault: \"-- NeoMutt: Compose  [Approx. msg size: %l   Atts: %a]%>-\"\n\nControls the format of the status line displayed in the \\\"compose\\\" menu. This string is similar to \\$status_format, but has its own set of `printf(3)`-like sequences:\n%a\n:   Total number of attachments\n%h\n:   Local hostname\n%l\n:   Approximate size (in bytes) of the current message (see formatstrings-size)\n%v\n:   NeoMutt version string\n%\\>X\n:   right justify the rest of the string and pad with character \\\"X\\\"\n%\\|X\n:   pad to the end of the line with character \\\"X\\\"\n%\\*X\n:   soft-fill with character \\\"X\\\" as pad\nSee the text describing the \\$status_format option for more information on how to set \\$compose_format."
        },
        "compose_show_user_headers": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, Neomutt will display user-defined headers (set via my_hdr or from editing with edit-headers)."
        },
        "config_charset": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nWhen defined, NeoMutt will recode commands in rc files from this encoding to the current character set as specified by \\$charset and aliases written to \\$alias_file from the current character set.\nPlease note that if setting \\$charset it must be done before setting \\$config_charset.\nRecoding should be avoided as it may render unconvertable characters as question marks which can lead to undesired side effects (for example in regular expressions)."
        },
        "confirm_append": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will prompt for confirmation when appending messages to an existing mailbox."
        },
        "confirm_create": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will prompt for confirmation when saving messages to a mailbox which does not yet exist before creating it."
        },
        "content_type": {
          "type": "string",
          "default": "text/plain",
          "description": "Type: string\nDefault: \"text/plain\"\n\nSets the default Content-Type for the body of newly composed messages."
        },
        "copy": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "yes",
          "description": "Type: quadoption\nDefault: yes\n\nThis variable controls whether or not copies of your outgoing messages will be saved for later references. Also see \\$record, \\$save_name, \\$force_name and \\\"fcc-hook\\\"."
        },
        "copy_decode_weed": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nControls whether NeoMutt will weed headers when invoking the `<decode-copy>` or `<decode-save>` functions."
        },
        "count_alternatives": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will recurse inside multipart/alternatives while performing attachment searching and counting(see attachments).\nTraditionally, multipart/alternative parts have simply represented different encodings of the main content of the email. Unfortunately, some mail clients have started to place email attachments inside one of alternatives. Setting this will allow NeoMutt to find and count matching attachments hidden there, and include them in the index via %X or through \\~X pattern matching."
        },
        "crypt_auto_encrypt": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nSetting this variable will cause NeoMutt to always attempt to PGP encrypt outgoing messages. This is probably only useful in connection to the \\\"send-hook\\\" command. It can be overridden by use of the pgp menu, when encryption is not required or signing is requested as well. If \\$smime_is_default is *set*, then OpenSSL is used instead to create S/MIME messages and settings can be overridden by use of the smime menu instead. (Crypto only)"
        },
        "crypt_auto_pgp": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nThis variable controls whether or not NeoMutt may automatically enable PGP encryption/signing for messages. See also \\$crypt_auto_encrypt, \\$crypt_reply_encrypt, \\$crypt_auto_sign, \\$crypt_reply_sign and \\$smime_is_default."
        },
        "crypt_auto_sign": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nSetting this variable will cause NeoMutt to always attempt to cryptographically sign outgoing messages. This can be overridden by use of the pgp menu, when signing is not required or encryption is requested as well. If \\$smime_is_default is *set*, then OpenSSL is used instead to create S/MIME messages and settings can be overridden by use of the smime menu instead of the pgp menu. (Crypto only)"
        },
        "crypt_auto_smime": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nThis variable controls whether or not NeoMutt may automatically enable S/MIME encryption/signing for messages. See also \\$crypt_auto_encrypt, \\$crypt_reply_encrypt, \\$crypt_auto_sign, \\$crypt_reply_sign and \\$smime_is_default."
        },
        "crypt_chars": {
          "type": "string",
          "default": "SPsK ",
          "description": "Type: character string\nDefault: \"SPsK \"\n\nControls the characters used in cryptography flags.\n**Character**\n:   **Default** **Description**\n1\n:   S The mail is signed, and the signature is successfully verified.\n2\n:   P The mail is PGP encrypted.\n3\n:   s The mail is signed.\n4\n:   K The mail contains a PGP public key.\n5\n:   \\<space\\> The mail has no crypto info."
        },
        "crypt_confirm_hook": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf set, then you will be prompted for confirmation of keys when using the *crypt-hook* command. If unset, no such confirmation prompt will be presented. This is generally considered unsafe, especially where typos are concerned."
        },
        "crypt_opportunistic_encrypt": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nSetting this variable will cause NeoMutt to automatically enable and disable encryption, based on whether all message recipient keys can be located by NeoMutt.\nWhen this option is enabled, NeoMutt will enable/disable encryption each time the TO, CC, and BCC lists are edited. If \\$edit_headers is set, NeoMutt will also do so each time the message is edited.\nWhile this is set, encryption can\\'t be manually enabled/disabled. The pgp or smime menus provide a selection to temporarily disable this option for the current message.\nIf \\$crypt_auto_encrypt or \\$crypt_reply_encrypt enable encryption for a message, this option will be disabled for that message. It can be manually re-enabled in the pgp or smime menus. (Crypto only)"
        },
        "crypt_opportunistic_encrypt_strong_keys": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen set, this modifies the behavior of \\$crypt_opportunistic_encrypt to only search for \\\"strong keys\\\", that is, keys with full validity according to the web-of-trust algorithm. A key with marginal or no validity will not enable opportunistic encryption.\nFor S/MIME, the behavior depends on the backend. Classic S/MIME will filter for certificates with the \\'t\\'(trusted) flag in the .index file. The GPGME backend will use the same filters as with OpenPGP, and depends on GPGME\\'s logic for assigning the GPGME_VALIDITY_FULL and GPGME_VALIDITY_ULTIMATE validity flag."
        },
        "crypt_protected_headers_read": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen set, NeoMutt will display protected headers (\\\"Memory Hole\\\") in the pager, When set, NeoMutt will display protected headers in the pager, and will update the index and header cache with revised headers.\nProtected headers are stored inside the encrypted or signed part of an an email, to prevent disclosure or tampering. For more information see https://github.com/autocrypt/protected-headers Currently NeoMutt only supports the Subject header.\nEncrypted messages using protected headers often substitute the exposed Subject header with a dummy value (see \\$crypt_protected_headers_subject). NeoMutt will update its concept of the correct subject **after** the message is opened, i.e. via the `<display-message>` function. If you reply to a message before opening it, NeoMutt will end up using the dummy Subject header, so be sure to open such a message first. (Crypto only)"
        },
        "crypt_protected_headers_save": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen \\$crypt_protected_headers_read is set, and a message with a protected Subject is opened, NeoMutt will save the updated Subject into the header cache by default. This allows searching/limiting based on the protected Subject header if the mailbox is re-opened, without having to re-open the message each time. However, for mbox/mh mailbox types, or if header caching is not set up, you would need to re-open the message each time the mailbox was reopened before you could see or search/limit on the protected subject again.\nWhen this variable is set, NeoMutt additionally saves the protected Subject back **in the clear-text message headers**. This provides better usability, but with the tradeoff of reduced security. The protected Subject header, which may have previously been encrypted, is now stored in clear-text in the message headers. Copying the message elsewhere, via NeoMutt or external tools, could expose this previously encrypted data. Please make sure you understand the consequences of this before you enable this variable. (Crypto only)"
        },
        "crypt_protected_headers_subject": {
          "type": "string",
          "default": "...",
          "description": "Type: string\nDefault: \"...\"\n\nWhen \\$crypt_protected_headers_write is set, and the message is marked for encryption, this will be substituted into the Subject field in the message headers.\nTo prevent a subject from being substituted, unset this variable, or set it to the empty string. (Crypto only)"
        },
        "crypt_protected_headers_write": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen set, NeoMutt will generate protected headers for signed and encrypted emails.\nProtected headers are stored inside the encrypted or signed part of an an email, to prevent disclosure or tampering. For more information see https://github.com/autocrypt/protected-headers\nCurrently NeoMutt only supports the Subject header. (Crypto only)"
        },
        "crypt_reply_encrypt": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, automatically PGP or OpenSSL encrypt replies to messages which are encrypted. (Crypto only)"
        },
        "crypt_reply_sign": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, automatically PGP or OpenSSL sign replies to messages which are signed.\n**Note:** this does not work on messages that are encrypted *and* signed! (Crypto only)"
        },
        "crypt_reply_sign_encrypted": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, automatically PGP or OpenSSL sign replies to messages which are encrypted. This makes sense in combination with \\$crypt_reply_encrypt, because it allows you to sign all messages which are automatically encrypted. This works around the problem noted in \\$crypt_reply_sign, that NeoMutt is not able to find out whether an encrypted message is also signed. (Crypto only)"
        },
        "crypt_timestamp": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, NeoMutt will include a time stamp in the lines surrounding PGP or S/MIME output, so spoofing such lines is more difficult. If you are using colors to mark these lines, and rely on these, you may *unset* this setting. (Crypto only)"
        },
        "crypt_use_gpgme": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nThis variable controls the use of the GPGME-enabled crypto backends. If it is *set* and NeoMutt was built with GPGME support, the gpgme code for S/MIME and PGP will be used instead of the classic code. Note that you need to set this option in .neomuttrc; it won\\'t have any effect when used interactively.\nNote that the GPGME backend does not support creating old-style inline (traditional) PGP encrypted or signed messages (see \\$pgp_auto_inline)."
        },
        "crypt_use_pka": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nControls whether NeoMutt uses PKA (see http://www.g10code.de/docs/pka-intro.de.pdf) during signature verification (only supported by the GPGME backend)."
        },
        "crypt_verify_sig": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "yes",
          "description": "Type: quadoption\nDefault: yes\n\nIf *\\\"yes\\\"*, always attempt to verify PGP or S/MIME signatures. If *\\\"ask-\\*\\\"*, ask whether or not to verify the signature. If *\\\"no\\\"*, never attempt to verify cryptographic signatures. (Crypto only)"
        },
        "date_format": {
          "type": "string",
          "default": "!%a, %b %d, %Y at %I",
          "description": "Type: string\nDefault: \"!%a, %b %d, %Y at %I:%M:%S%p %Z\"\n\nInstead of using \\$date_format it is encouraged to use \\\"%\\[fmt\\]\\\" directly in the corresponding format strings, where \\\"fmt\\\" is the value of \\$date_format. This allows for a more fine grained control of the different menu needs.\nThis variable controls the format of the date printed by the \\\"%d\\\" sequence in \\$index_format. This is passed to the `strftime(3)` function to process the date, see the man page for the proper syntax.\nUnless the first character in the string is a bang (\\\"!\\\"), the month and week day names are expanded according to the locale. If the first character in the string is a bang, the bang is discarded, and the month and week day names in the rest of the string are expanded in the *C* locale (that is in US English).\nFormat strings using this variable are:\nUI: \\$folder_format, \\$index_format, \\$mailbox_folder_format, \\$message_format.IP Composing: \\$attribution_intro, \\$forward_attribution_intro, \\$forward_attribution_trailer, \\$forward_format, \\$indent_string."
        },
        "debug_file": {
          "type": "string",
          "default": "~/.neomuttdebug",
          "description": "Type: path\nDefault: \"~/.neomuttdebug\"\n\nDebug logging is controlled by the variables `$debug_file` and `$debug_level`. `$debug_file` specifies the root of the filename. NeoMutt will add \\\"0\\\" to the end. Each time NeoMutt is run with logging enabled, the log files are rotated. A maximum of five log files are kept, numbered 0 (most recent) to 4 (oldest).\nThis option can be enabled on the command line, \\\"neomutt -l mylog\\\"\nSee also: `$debug_level`"
        },
        "debug_level": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nDebug logging is controlled by the variables `$debug_file` and `$debug_level`.\nThe debug level controls how much information is saved to the log file. If you have a problem with NeoMutt, then enabling logging may help find the cause. Levels 1-3 will usually provide enough information for writing a bug report. Levels 4,5 will be extremely verbose.\nWarning: Logging at high levels may save private information to the file.\nThis option can be enabled on the command line, \\\"neomutt -d 2\\\"\nSee also: `$debug_file`"
        },
        "default_hook": {
          "type": "string",
          "default": "~f %s !~P | (~P ~C %s)",
          "description": "Type: string\nDefault: \"~f %s !~P | (~P ~C %s)\"\n\nThis variable controls how some hooks are interpreted if their pattern is a plain string or a regex. i.e. They don\\'t contain a pattern, like `~f`\nThe hooks are: fcc-hook, fcc-save-hook, index-format-hook, message-hook, reply-hook, save-hook, send-hook and send2-hook.\nThe hooks are expanded when they are declared, so a hook will be interpreted according to the value of this variable at the time the hook is declared.\nThe default value matches if the message is either from a user matching the regular expression given, or if it is from you (if the from address matches \\\"alternates\\\") and is to or cc\\'ed to a user matching the given regular expression."
        },
        "delete": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-yes",
          "description": "Type: quadoption\nDefault: ask-yes\n\nControls whether or not messages are really deleted when closing or synchronizing a mailbox. If set to *yes*, messages marked for deleting will automatically be purged without prompting. If set to *no*, messages marked for deletion will be kept in the mailbox."
        },
        "delete_untag": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf this option is *set*, NeoMutt will untag messages when marking them for deletion. This applies when you either explicitly delete a message, or when you save it to another folder."
        },
        "digest_collapse": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf this option is *set*, NeoMutt\\'s received-attachments menu will not show the subparts of individual messages in a multipart/digest. To see these subparts, press \\\"v\\\" on that menu."
        },
        "display_filter": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nWhen set, specifies a command used to filter messages. When a message is viewed it is passed as standard input to \\$display_filter, and the filtered message is read from the standard output.\nWhen preparing the message, NeoMutt inserts some escape sequences into the text. They are of the form: `<esc>]9;XXX<bel>` where \\\"XXX\\\" is a random 64-bit number.\nIf these escape sequences interfere with your filter, they can be removed using a tool like `ansifilter` or `sed 's/^\\x1b]9;[0-9]\\+\\x7//'`\nIf they are removed, then PGP and MIME headers will no longer be coloured. This can be fixed by adding this to your config: `color body magenta default '^\\[-- .* --\\]$'`."
        },
        "dsn_notify": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThis variable sets the request for when notification is returned. The string consists of a comma separated list (no spaces!) of one or more of the following: *never*, to never request notification, *failure*, to request notification on transmission failure, *delay*, to be notified of message delays, *success*, to be notified of successful transmission.\nExample:\nset dsn_notify=\"failure,delay\" \n**Note:** when using \\$sendmail for delivery, you should not enable this unless you are either using Sendmail 8.8.x or greater or a MTA providing a `sendmail(1)`-compatible interface supporting the `-N` option for DSN. For SMTP delivery, DSN support is auto-detected so that it depends on the server whether DSN will be used or not."
        },
        "dsn_return": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThis variable controls how much of your message is returned in DSN messages. It may be set to either *hdrs* to return just the message header, or *full* to return the full message.\nExample:\nset dsn_return=hdrs \n**Note:** when using \\$sendmail for delivery, you should not enable this unless you are either using Sendmail 8.8.x or greater or a MTA providing a `sendmail(1)`-compatible interface supporting the `-R` option for DSN. For SMTP delivery, DSN support is auto-detected so that it depends on the server whether DSN will be used or not."
        },
        "duplicate_threads": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nThis variable controls whether NeoMutt, when \\$sort is set to *threads*, threads messages with the same Message-Id together. If it is *set*, it will indicate that it thinks they are duplicates of each other with an equals sign in the thread tree."
        },
        "edit_headers": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis option allows you to edit the header of your outgoing messages along with the body of your message.\nAlthough the compose menu may have localized header labels, the labels passed to your editor will be standard RFC2822 headers, (e.g. To:, Cc:, Subject:). Headers added in your editor must also be RFC2822 headers, or one of the pseudo headers listed in \\\"edit-header\\\". NeoMutt will not understand localized header labels, just as it would not when parsing an actual email.\n**Note** that changes made to the References: and Date: headers are ignored for interoperability reasons."
        },
        "editor": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis variable specifies which editor is used by NeoMutt. It defaults to the value of the `$VISUAL`, or `$EDITOR`, environment variable, or to the string \\\"vi\\\" if neither of those are set.\nThe `$editor` string may contain a *%s* escape, which will be replaced by the name of the file to be edited. If the *%s* escape does not appear in `$editor`, a space and the name to be edited are appended.\nThe resulting string is then executed by running\nsh -c 'string' \nwhere *string* is the expansion of `$editor` described above."
        },
        "empty_subject": {
          "type": "string",
          "default": "Re",
          "description": "Type: string\nDefault: \"Re: your mail\"\n\nThis variable specifies the subject to be used when replying to an email with an empty subject. It defaults to \\\"Re: your mail\\\"."
        },
        "encode_from": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will quoted-printable encode messages when they contain the string \\\"From \\\" (note the trailing space) in the beginning of a line. This is useful to avoid the tampering certain mail delivery and transport agents tend to do with messages (in order to prevent tools from misinterpreting the line as a mbox message separator)."
        },
        "entropy_file": {
          "type": "string",
          "default": "",
          "description": "Type: path\nDefault: \"\"\n\nThe file which includes random data that is used to initialize SSL library functions."
        },
        "envelope_from_address": {
          "type": "string",
          "format": "email",
          "default": "",
          "description": "Type: e-mail address\nDefault: \"\"\n\nManually sets the *envelope* sender for outgoing messages. This value is ignored if \\$use_envelope_from is *unset*."
        },
        "external_search_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nIf set, contains the name of the external program used by \\\"\\~I\\\" patterns. This will usually be a wrapper script around mairix, mu, or similar indexers other than notmuch (for which there is optional special support).\nHere is an example how it works. Let\\'s assume \\$external_search_command is set to \\\"mairix_filter\\\", and mairix_filter is a script which runs the old but well loved mairix indexer with the arguments given to mairix_filter, in the \\\"raw\\\" mode of mairix, producing on the standard output a list of Message-IDs, one per line.\nIf possible, it also filters down the results coming from mairix such that only messages in the current folder remain. It can do this because it gets a hidden first argument which is the path to the folder. (This can be the type of clean and simple script called a *one-liner*.)\nNow if NeoMutt gets a limit or tag command followed by the pattern \\\"\\~I \\'-t s:bleeping=\\'\\\", mairix_filter runs mairix with the arguments from inside the quotes (the quotes are needed because of the space after \\\"-t\\\"), mairix finds all messages with \\\"bleeping\\\" in the Subject plus all messages sharing threads with these and outputs their file names, and mairix_filter translates the file names into Message-IDs. Finally, NeoMutt reads the Message-IDs and targets the matching messages with the command given to it.\nYou, the user, still have to rewrite the mairix_filter script to match the behavior of your indexer, but this should help users of indexers other than notmuch to integrate them cleanly with NeoMutt."
        },
        "fast_reply": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, the initial prompt for recipients (to, cc, bcc) and subject are skipped when the relevant information is already provided. These cases include replying to messages and passing the relevant command line arguments. The initial prompt for recipients is also skipped when composing a new message to the current message sender, while the initial prompt for subject is also skipped when forwarding messages.\n**Note:** this variable has no effect when the \\$auto_edit variable is *set*.\nSee also: \\$auto_edit, \\$edit_headers, \\$ask_cc, \\$ask_bcc"
        },
        "fcc_attach": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "yes",
          "description": "Type: quadoption\nDefault: yes\n\nThis variable controls whether or not attachments on outgoing messages are saved along with the main body of your message.\nNote: \\$fcc_before_send forces the default (set) behavior of this option."
        },
        "fcc_before_send": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen this variable is *set*, FCCs will occur before sending the message. Before sending, the message cannot be manipulated, so it will be stored the exact same as sent: \\$fcc_attach and \\$fcc_clear will be ignored (using their default values).\nWhen *unset*, the default, FCCs will occur after sending. Variables \\$fcc_attach and \\$fcc_clear will be respected, allowing it to be stored without attachments or encryption/signing if desired."
        },
        "fcc_clear": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen this variable is *set*, FCCs will be stored unencrypted and unsigned, even when the actual message is encrypted and/or signed.\nNote: \\$fcc_before_send forces the default (unset) behavior of this option. (PGP only)\nSee also \\$pgp_self_encrypt, \\$smime_self_encrypt"
        },
        "flag_chars": {
          "type": "string",
          "default": "*!DdrONon- ",
          "description": "Type: character string\nDefault: \"*!DdrONon- \"\n\nControls the characters used in several flags.\n**Character**\n:   **Default** **Description**\n1\n:   \\* The mail is tagged.\n2\n:   ! The mail is flagged as important.\n3\n:   D The mail is marked for deletion.\n4\n:   d The mail has attachments marked for deletion.\n5\n:   r The mail has been replied to.\n6\n:   O The mail is Old (Unread but seen).\n7\n:   N The mail is New (Unread but not seen).\n8\n:   o The mail thread is Old (Unread but seen).\n9\n:   n The mail thread is New (Unread but not seen).\n10\n:   \\- The mail is read - %S expando.\n11\n:   \\<space\\> The mail is read - %Z expando."
        },
        "flag_safe": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf set, flagged messages can\\'t be deleted."
        },
        "folder": {
          "type": "string",
          "default": "~/Mail",
          "description": "Type: mailbox\nDefault: \"~/Mail\"\n\nSpecifies the default location of your mailboxes. A \\\"+\\\" or \\\"=\\\" at the beginning of a pathname will be expanded to the value of this variable. Note that if you change this variable (from the default) value you need to make sure that the assignment occurs *before* you use \\\"+\\\" or \\\"=\\\" for any other variables since expansion takes place when handling the \\\"mailboxes\\\" command."
        },
        "folder_format": {
          "type": "string",
          "default": "%2C %t %N %F %2l %-8.8u %-8.8g %8s %d %i",
          "description": "Type: string\nDefault: \"%2C %t %N %F %2l %-8.8u %-8.8g %8s %d %i\"\n\nThis variable allows you to customize the file browser display to your personal taste. This string is similar to \\$index_format, but has its own set of `printf(3)`-like sequences:\n%C\n:    Current file number\n%d\n:    Date/time folder was last modified\n%D\n:    Date/time folder was last modified using \\$date_format. It is encouraged to use \\\"%\\[fmt\\]\\\" instead, where \\\"fmt\\\" is the value of \\$date_format.\n%f\n:    Filename (\\\"/\\\" is appended to directory names, \\\"@\\\" to symbolic links and \\\"\\*\\\" to executable files)\n%F\n:    File permissions\n%g\n:    Group name (or numeric gid, if missing)\n%i\n:    Description of the folder\n%l\n:    Number of hard links\n%m\n:   \\* Number of messages in the mailbox\n%n\n:   \\* Number of unread messages in the mailbox\n%N\n:    \\\"N\\\" if mailbox has new mail, \\\" \\\" (space) otherwise\n%s\n:    Size in bytes (see formatstrings-size)\n%t\n:    \\\"\\*\\\" if the file is tagged, blank otherwise\n%u\n:    Owner name (or numeric uid, if missing)\n%\\[fmt\\]\n:    Date/time folder was last modified using an `strftime(3)` expression\n%\\>X\n:    Right justify the rest of the string and pad with character \\\"X\\\"\n%\\|X\n:    Pad to the end of the line with character \\\"X\\\"\n%\\*X\n:    Soft-fill with character \\\"X\\\" as pad\nFor an explanation of \\\"soft-fill\\\", see the \\$index_format documentation.\n\\* = can be optionally printed if nonzero\n%m, %n, and %N only work for monitored mailboxes. %m requires \\$mail_check_stats to be set. %n requires \\$mail_check_stats to be set (except for IMAP mailboxes)."
        },
        "followup_to": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nControls whether or not the \\\"Mail-Followup-To:\\\" header field is generated when sending mail. When *set*, NeoMutt will generate this field when you are replying to a known mailing list, specified with the \\\"subscribe\\\" or \\\"lists\\\" commands.\nThis field has two purposes. First, preventing you from receiving duplicate copies of replies to messages which you send to mailing lists, and second, ensuring that you do get a reply separately for any messages sent to known lists to which you are not subscribed.\nThe header will contain only the list\\'s address for subscribed lists, and both the list address and your own email address for unsubscribed lists. Without this header, a group reply to your message sent to a subscribed list will be sent to both the list and your address, resulting in two copies of the same email for you."
        },
        "followup_to_poster": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-yes",
          "description": "Type: quadoption\nDefault: ask-yes\n\nIf this variable is *set* and the keyword \\\"poster\\\" is present in *Followup-To* header, follow-up to newsgroup function is not permitted. The message will be mailed to the submitter of the message via mail."
        },
        "force_name": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis variable is similar to \\$save_name, except that NeoMutt will store a copy of your outgoing message by the username of the address you are sending to even if that mailbox does not exist.\nAlso see the \\$record variable."
        },
        "forward_attachments": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-yes",
          "description": "Type: quadoption\nDefault: ask-yes\n\nWhen forwarding inline (i.e. \\$mime_forward *unset* or answered with \\\"no\\\" and \\$forward_decode *set*), attachments which cannot be decoded in a reasonable manner will be attached to the newly composed message if this quadoption is *set* or answered with \\\"yes\\\"."
        },
        "forward_attribution_intro": {
          "type": "string",
          "default": "----- Forwarded message from %f -----",
          "description": "Type: string\nDefault: \"----- Forwarded message from %f -----\"\n\nThis is the string that will precede a message which has been forwarded in the main body of a message (when \\$mime_forward is unset). For a full listing of defined `printf(3)`-like sequences see the section on \\$index_format. See also \\$attribution_locale."
        },
        "forward_attribution_trailer": {
          "type": "string",
          "default": "----- End forwarded message -----",
          "description": "Type: string\nDefault: \"----- End forwarded message -----\"\n\nThis is the string that will follow a message which has been forwarded in the main body of a message (when \\$mime_forward is unset). For a full listing of defined `printf(3)`-like sequences see the section on \\$index_format. See also \\$attribution_locale."
        },
        "forward_decode": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nControls the decoding of complex MIME messages into `text/plain` when forwarding a message. The message header is also RFC2047 decoded. This variable is only used, if \\$mime_forward is *unset*, otherwise \\$mime_forward_decode is used instead."
        },
        "forward_decrypt": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nControls the handling of encrypted messages when forwarding a message. When *set*, the outer layer of encryption is stripped off. This variable is only used if \\$mime_forward is *set* and \\$mime_forward_decode is *unset*."
        },
        "forward_edit": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "yes",
          "description": "Type: quadoption\nDefault: yes\n\nThis quadoption controls whether or not the user is automatically placed in the editor when forwarding messages. For those who always want to forward with no modification, use a setting of \\\"no\\\"."
        },
        "forward_format": {
          "type": "string",
          "default": "[%a",
          "description": "Type: string\nDefault: \"[%a: %s]\"\n\nThis variable controls the default subject when forwarding a message. It uses the same format sequences as the \\$index_format variable."
        },
        "forward_quote": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, forwarded messages included in the main body of the message (when \\$mime_forward is *unset*) will be quoted using \\$indent_string."
        },
        "forward_references": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, forwarded messages set the \\\"In-Reply-To:\\\" and \\\"References:\\\" headers in the same way as normal replies would. Hence the forwarded message becomes part of the original thread instead of starting a new one."
        },
        "from": {
          "type": "string",
          "format": "email",
          "default": "",
          "description": "Type: e-mail address\nDefault: \"\"\n\nWhen *set*, this variable contains a default \\\"from\\\" address. It can be overridden using \\\"my_hdr\\\" (including from a \\\"send-hook\\\") and \\$reverse_name. This variable is ignored if \\$use_from is *unset*.\nIf not specified, then it may be read from the environment variable `$EMAIL`."
        },
        "from_chars": {
          "type": "string",
          "default": "",
          "description": "Type: character string\nDefault: \"\"\n\nControls the character used to prefix the %F and %L fields in the index.\n**Character**\n:   **Description**\n1\n:   Mail is written by you and has a To address, or has a known mailing list in the To address.\n2\n:   Mail is written by you and has a Cc address, or has a known mailing list in the Cc address.\n3\n:   Mail is written by you and has a Bcc address.\n4\n:   All remaining cases.\nIf this is empty or unset (default), the traditional long \\\"To \\\", \\\"Cc \\\" and \\\"Bcc \\\" prefixes are used. If set but too short to include a character for a particular case, a single space will be prepended to the field. To prevent any prefix at all from being added in a particular case, use the special value CR (aka \\^M) for the corresponding character.\nThis slightly odd interface is necessitated by NeoMutt\\'s handling of string variables; one can\\'t tell a variable that is unset from one that is set to the empty string."
        },
        "gecos_mask": {
          "type": "string",
          "format": "regex",
          "default": "^[^,]*",
          "description": "Type: regular expression\nDefault: \"^[^,]*\"\n\nA regular expression used by NeoMutt to parse the GECOS field of a password entry when expanding the alias. The default value will return the string up to the first \\\",\\\" encountered. If the GECOS field contains a string like \\\"lastname, firstname\\\" then you should set it to \\\"`.*`\\\".\nThis can be useful if you see the following behavior: you address an e-mail to user ID \\\"stevef\\\" whose full name is \\\"Steve Franklin\\\". If NeoMutt expands \\\"stevef\\\" to \\'\\\"Franklin\\\" stevef@foo.bar\\' then you should set the \\$gecos_mask to a regular expression that will match the whole name so NeoMutt will expand \\\"Franklin\\\" to \\\"Franklin, Steve\\\"."
        },
        "greeting": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nWhen set, this is the string that will precede every message as a greeting phrase to the recipients.\n\\\"Format strings\\\" are similar to the strings used in the \\\"C\\\" function printf to format output (see the man page for more detail). The following sequences are defined in NeoMutt:\n%n\n:   Recipient\\'s real name\n%u\n:   User (login) name of recipient\n%v\n:   First name of recipient"
        },
        "group_index_format": {
          "type": "string",
          "default": "%4C %M%N %5s  %-45.45f %d",
          "description": "Type: string\nDefault: \"%4C %M%N %5s  %-45.45f %d\"\n\nThis variable allows you to customize the newsgroup browser display to your personal taste. This string is similar to \\\"index_format\\\", but has its own set of printf()-like sequences:\n%C\n:   Current newsgroup number\n%d\n:   Description of newsgroup (becomes from server)\n%f\n:   Newsgroup name\n%M\n:   \\- if newsgroup not allowed for direct post (moderated for example)\n%N\n:   N if newsgroup is new, u if unsubscribed, blank otherwise\n%n\n:   Number of new articles in newsgroup\n%s\n:   Number of unread articles in newsgroup\n%\\>X\n:   Right justify the rest of the string and pad with character \\\"X\\\"\n%\\|X\n:   Pad to the end of the line with character \\\"X\\\""
        },
        "hdrs": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *unset*, the header fields normally added by the \\\"my_hdr\\\" command are not created. This variable *must* be unset before composing a new message or replying in order to take effect. If *set*, the user defined header fields are added to every new message."
        },
        "header": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, this variable causes NeoMutt to include the header of the message you are replying to into the edit buffer. The \\$weed setting applies."
        },
        "header_cache": {
          "type": "string",
          "default": "",
          "description": "Type: path\nDefault: \"\"\n\nThis variable points to the header cache database. If the path points to an existing directory, NeoMutt will create a dedicated header cache database per folder. Otherwise, the path points to a regular file, which will be created as needed and used as a shared global header cache for all folders. By default it is *unset* so no header caching will be used.\nHeader caching can greatly improve speed when opening POP, IMAP MH or Maildir folders, see \\\"caching\\\" in the NeoMutt Guide for details."
        },
        "header_cache_backend": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThis variable specifies the header cache backend. If no backend is specified, the first available backend will be used in the following order: tokyocabinet, kyotocabinet, qdbm, rocksdb, gdbm, bdb, tdb, lmdb."
        },
        "header_cache_compress_level": {
          "type": "number",
          "default": 1,
          "description": "Type: number\nDefault: 1\n\nWhen NeoMutt is compiled with lz4, zstd or zlib, this option can be used to setup the compression level."
        },
        "header_cache_compress_method": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nWhen NeoMutt is compiled with lz4, zstd or zlib, the header cache backend can use these compression methods for compressing the cache files. This results in much smaller cache file sizes and may even improve speed."
        },
        "header_color_partial": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, color header regexes behave like color body regexes: color is applied to the exact text matched by the regex. When *unset*, color is applied to the entire header.\nOne use of this option might be to apply color to just the header labels.\nSee \\\"color\\\" for more details."
        },
        "help": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, help lines describing the bindings for the major functions provided by each menu are displayed on the first line of the screen.\n**Note:** The binding will not be displayed correctly if the function is bound to a sequence rather than a single keystroke. Also, the help line may not be updated if a binding is changed while NeoMutt is running. Since this variable is primarily aimed at new users, neither of these should present a major problem."
        },
        "hidden_host": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will skip the host name part of \\$hostname variable when adding the domain part to addresses."
        },
        "hidden_tags": {
          "type": "string",
          "default": "unread,draft,flagged,passed,replied,attachment,signed,encrypted",
          "description": "Type: string list\nDefault: \"unread,draft,flagged,passed,replied,attachment,signed,encrypted\"\n\nThis variable specifies a list of comma-separated private notmuch/imap tags which should not be printed on screen."
        },
        "hide_limited": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will not show the presence of messages that are hidden by limiting, in the thread tree."
        },
        "hide_missing": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will not show the presence of missing messages in the thread tree."
        },
        "hide_thread_subject": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will not show the subject of messages in the thread tree that have the same subject as their parent or closest previously displayed sibling."
        },
        "hide_top_limited": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will not show the presence of messages that are hidden by limiting, at the top of threads in the thread tree. Note that when \\$hide_limited is *set*, this option will have no effect."
        },
        "hide_top_missing": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will not show the presence of missing messages at the top of threads in the thread tree. Note that when \\$hide_missing is *set*, this option will have no effect."
        },
        "history": {
          "type": "number",
          "default": 10,
          "description": "Type: number\nDefault: 10\n\nThis variable controls the size (in number of strings remembered) of the string history buffer per category. The buffer is cleared each time the variable is set.\nNote that strings (e.g. commands) starting with a space are never recorded in the history. This is for example useful to prevent leaking sensitive information into the history file or for one off tests.\nAlso note that a string is not added to the history if it exactly matches its immediate predecessor, e.g. executing the same command twice in a row results in only one copy being added to the history. To prevent duplicates over all entries use \\$history_remove_dups."
        },
        "history_file": {
          "type": "string",
          "default": "~/.mutthistory",
          "description": "Type: path\nDefault: \"~/.mutthistory\"\n\nThe file in which NeoMutt will save its history.\nAlso see \\$save_history."
        },
        "history_remove_dups": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, all of the string history will be scanned for duplicates when a new entry is added. Duplicate entries in the \\$history_file will also be removed when it is periodically compacted."
        },
        "honor_disposition": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will not display attachments with a disposition of \\\"attachment\\\" inline even if it could render the part to plain text. These MIME parts can only be viewed from the attachment menu.\nIf *unset*, NeoMutt will render all MIME parts it can properly transform to plain text."
        },
        "honor_followup_to": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "yes",
          "description": "Type: quadoption\nDefault: yes\n\nThis variable controls whether or not a Mail-Followup-To header is honored when group-replying to a message."
        },
        "hostname": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nSpecifies the fully-qualified hostname of the system NeoMutt is running on containing the host\\'s name and the DNS domain it belongs to. It is used as the domain part (after \\\"@\\\") for local email addresses.\nIf not specified in a config file, then NeoMutt will try to determine the hostname itself.\nOptionally, NeoMutt can be compiled with a fixed domain name.\nAlso see \\$use_domain and \\$hidden_host."
        },
        "idn_decode": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will show you international domain names decoded. Note: You can use IDNs for addresses even if this is *unset*. This variable only affects decoding. (IDN only)"
        },
        "idn_encode": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will encode international domain names using IDN. Unset this if your SMTP server can handle newer (RFC6531) UTF-8 encoded domains. (IDN only)"
        },
        "ignore_list_reply_to": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nAffects the behavior of the `<reply>` function when replying to messages from mailing lists (as defined by the \\\"subscribe\\\" or \\\"lists\\\" commands). When *set*, if the \\\"Reply-To:\\\" field is set to the same value as the \\\"To:\\\" field, NeoMutt assumes that the \\\"Reply-To:\\\" field was set by the mailing list to automate responses to the list, and will ignore this field. To direct a response to the mailing list when this option is *set*, use the `<list-reply>` function; `<group-reply>` will reply to both the sender and the list."
        },
        "imap_authenticators": {
          "type": "string",
          "default": "",
          "description": "Type: string list\nDefault: \"\"\n\nThis is a colon-separated list of authentication methods NeoMutt may attempt to use to log in to an IMAP server, in the order NeoMutt should try them. Authentication methods are either \\\"login\\\" or the right side of an IMAP \\\"AUTH=xxx\\\" capability string, e.g. \\\"digest-md5\\\", \\\"gssapi\\\" or \\\"cram-md5\\\". This option is case-insensitive. If it\\'s *unset* (the default) NeoMutt will try all available methods, in order from most-secure to least-secure.\nExample:\nset imap_authenticators=\"gssapi:cram-md5:login\" \n**Note:** NeoMutt will only fall back to other authentication methods if the previous methods are unavailable. If a method is available but authentication fails, NeoMutt will not connect to the IMAP server."
        },
        "imap_check_subscribed": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will fetch the set of subscribed folders from your server whenever a mailbox is **selected**, and add them to the set of mailboxes it polls for new mail just as if you had issued individual \\\"mailboxes\\\" commands."
        },
        "imap_condstore": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will use the CONDSTORE extension (RFC7162) if advertised by the server. NeoMutt\\'s current implementation is basic, used only for initial message fetching and flag updates.\nFor some IMAP servers, enabling this will slightly speed up downloading initial messages. Unfortunately, Gmail is not one those, and displays worse performance when enabled. Your mileage may vary."
        },
        "imap_deflate": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will use the COMPRESS=DEFLATE extension (RFC4978) if advertised by the server.\nIn general a good compression efficiency can be achieved, which speeds up reading large mailboxes also on fairly good connections."
        },
        "imap_delim_chars": {
          "type": "string",
          "default": "/.",
          "description": "Type: string\nDefault: \"/.\"\n\nThis contains the list of characters that NeoMutt will use as folder separators for IMAP paths, when no separator is provided on the IMAP connection."
        },
        "imap_fetch_chunk_size": {
          "type": "number (long)",
          "default": "0",
          "description": "Type: number (long)\nDefault: 0\n\nWhen set to a value greater than 0, new headers will be downloaded in groups of this many headers per request. If you have a very large mailbox, this might prevent a timeout and disconnect when opening the mailbox, by sending a FETCH per set of this many headers, instead of a single FETCH for all new headers."
        },
        "imap_headers": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nNeoMutt requests these header fields in addition to the default headers (\\\"Date:\\\", \\\"From:\\\", \\\"Sender:\\\", \\\"Subject:\\\", \\\"To:\\\", \\\"Cc:\\\", \\\"Message-Id:\\\", \\\"References:\\\", \\\"Content-Type:\\\", \\\"Content-Description:\\\", \\\"In-Reply-To:\\\", \\\"Reply-To:\\\", \\\"Lines:\\\", \\\"List-Post:\\\", \\\"X-Label:\\\") from IMAP servers before displaying the index menu. You may want to add more headers for spam detection.\n**Note:** This is a space separated list, items should be uppercase and not contain the colon, e.g. \\\"X-BOGOSITY X-SPAM-STATUS\\\" for the \\\"X-Bogosity:\\\" and \\\"X-Spam-Status:\\\" header fields."
        },
        "imap_idle": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will attempt to use the IMAP IDLE extension to check for new mail in the current mailbox. Some servers (dovecot was the inspiration for this option) react badly to NeoMutt\\'s implementation. If your connection seems to freeze up periodically, try unsetting this."
        },
        "imap_keepalive": {
          "type": "number",
          "default": 300,
          "description": "Type: number\nDefault: 300\n\nThis variable specifies the maximum amount of time in seconds that NeoMutt will wait before polling open IMAP connections, to prevent the server from closing them before NeoMutt has finished with them. The default is well within the RFC-specified minimum amount of time (30 minutes) before a server is allowed to do this, but in practice the RFC does get violated every now and then. Reduce this number if you find yourself getting disconnected from your IMAP server due to inactivity."
        },
        "imap_list_subscribed": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis variable configures whether IMAP folder browsing will look for only subscribed folders or all folders. This can be toggled in the IMAP browser with the `<toggle-subscribed>` function."
        },
        "imap_login": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nYour login name on the IMAP server.\nThis variable defaults to the value of \\$imap_user."
        },
        "imap_oauth_refresh_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThe command to run to generate an OAUTH refresh token for authorizing your connection to your IMAP server. This command will be run on every connection attempt that uses the OAUTHBEARER or XOAUTH2 authentication mechanisms. See \\\"oauth\\\" for details."
        },
        "imap_pass": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nSpecifies the password for your IMAP account. If *unset*, NeoMutt will prompt you for your password when you invoke the `<imap-fetch-mail>` function or try to open an IMAP folder.\n**Warning**: you should only use this option when you are on a fairly secure machine, because the superuser can read your neomuttrc even if you are the only one who can read the file."
        },
        "imap_passive": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will not open new IMAP connections to check for new mail. NeoMutt will only check for new mail over existing IMAP connections. This is useful if you don\\'t want to be prompted for user/password pairs on NeoMutt invocation, or if opening the connection is slow."
        },
        "imap_peek": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will avoid implicitly marking your mail as read whenever you fetch a message from the server. This is generally a good thing, but can make closing an IMAP folder somewhat slower. This option exists to appease speed freaks."
        },
        "imap_pipeline_depth": {
          "type": "number",
          "default": 15,
          "description": "Type: number\nDefault: 15\n\nControls the number of IMAP commands that may be queued up before they are sent to the server. A deeper pipeline reduces the amount of time NeoMutt must wait for the server, and can make IMAP servers feel much more responsive. But not all servers correctly handle pipelined commands, so if you have problems you might want to try setting this variable to 0.\n**Note:** Changes to this variable have no effect on open connections."
        },
        "imap_poll_timeout": {
          "type": "number",
          "default": 15,
          "description": "Type: number\nDefault: 15\n\nThis variable specifies the maximum amount of time in seconds that NeoMutt will wait for a response when polling IMAP connections for new mail, before timing out and closing the connection. Set to 0 to disable timing out."
        },
        "imap_qresync": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will use the QRESYNC extension (RFC7162) if advertised by the server. NeoMutt\\'s current implementation is basic, used only for initial message fetching and flag updates.\nNote: this feature is currently experimental. If you experience strange behavior, such as duplicate or missing messages please file a bug report to let us know."
        },
        "imap_rfc5161": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will use the IMAP ENABLE extension (RFC5161) to select CAPABILITIES. Some servers (notably Coremail System IMap Server) do not properly respond to ENABLE commands, which might cause NeoMutt to hang. If your connection seems to freeze at login, try unsetting this. See also https://github.com/neomutt/neomutt/issues/1689"
        },
        "imap_server_noise": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will display warning messages from the IMAP server as error messages. Since these messages are often harmless, or generated due to configuration problems on the server which are out of the users\\' hands, you may wish to suppress them at some point."
        },
        "imap_user": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThe name of the user whose mail you intend to access on the IMAP server.\nThis variable defaults to your user name on the local machine."
        },
        "imap_send_id": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will send an IMAP ID command (RFC2971) to the server when logging in if advertised by the server. This command provides information about the IMAP client, such as \\\"NeoMutt\\\" and the current version."
        },
        "implicit_auto_view": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf set to \\\"yes\\\", NeoMutt will look for a mailcap entry with the \\\"`copiousoutput`\\\" flag set for *every* MIME attachment it doesn\\'t have an internal viewer defined for. If such an entry is found, NeoMutt will use the viewer defined in that entry to convert the body part to text form."
        },
        "include": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-yes",
          "description": "Type: quadoption\nDefault: ask-yes\n\nControls whether or not a copy of the message(s) you are replying to is included in your reply."
        },
        "include_encrypted": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nControls whether or not NeoMutt includes separately encrypted attachment contents when replying.\nThis variable was added to prevent accidental exposure of encrypted contents when replying to an attacker. If a previously encrypted message were attached by the attacker, they could trick an unwary recipient into decrypting and including the message in their reply."
        },
        "include_only_first": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nControls whether or not NeoMutt includes only the first attachment of the message you are replying."
        },
        "indent_string": {
          "type": "string",
          "default": "> ",
          "description": "Type: string\nDefault: \"> \"\n\nSpecifies the string to prepend to each line of text quoted in a message to which you are replying. You are strongly encouraged not to change this value, as it tends to agitate the more fanatical netizens.\nThe value of this option is ignored if \\$text_flowed is set, because the quoting mechanism is strictly defined for format=flowed.\nThis option is a format string, please see the description of \\$index_format for supported `printf(3)`-style sequences."
        },
        "index_format": {
          "type": "string",
          "default": "%4C %Z %{%b %d} %-15.15L (%?l?%4l&%4c?) %s",
          "description": "Type: string\nDefault: \"%4C %Z %{%b %d} %-15.15L (%?l?%4l&%4c?) %s\"\n\nThis variable allows you to customize the message index display to your personal taste.\n\\\"Format strings\\\" are similar to the strings used in the C function `printf(3)` to format output (see the man page for more details). For an explanation of the %? construct, see the status_format description. The following sequences are defined in NeoMutt:\n%a\n:   Address of the author\n%A\n:   Reply-to address (if present; otherwise: address of author)\n%b\n:   Filename of the original message folder (think mailbox)\n%B\n:   Same as %K\n%C\n:   Current message number\n%c\n:   Number of characters (bytes) in the body of the message (see formatstrings-size)\n%cr\n:   Number of characters (bytes) in the raw message, including the header (see formatstrings-size)\n%D\n:   Date and time of message using date_format and local timezone It is encouraged to use \\\"%\\[fmt\\]\\\" instead, where \\\"fmt\\\" is the value of \\$date_format.\n%d\n:   Date and time of message using date_format and sender\\'s timezone It is encouraged to use \\\"%{fmt}\\\" instead, where \\\"fmt\\\" is the value of \\$date_format.\n%e\n:   Current message number in thread\n%E\n:   Number of messages in current thread\n%F\n:   Author name, or recipient name if the message is from you\n%Fp\n:   Like %F, but plain. No contextual formatting is applied to recipient name\n%f\n:   Sender (address + real name), either From: or Return-Path:\n%g\n:   Newsgroup name (if compiled with NNTP support)\n%g\n:   Message tags (e.g. notmuch tags/imap flags)\n%Gx\n:   Individual message tag (e.g. notmuch tags/imap flags)\n%H\n:   Spam attribute(s) of this message\n%I\n:   Initials of author\n%i\n:   Message-id of the current message\n%J\n:   Message tags (if present, tree unfolded, and != parent\\'s tags)\n%K\n:   The list to which the letter was sent (if any; otherwise: empty)\n%L\n:   If an address in the \\\"To:\\\" or \\\"Cc:\\\" header field matches an address Defined by the user\\'s \\\"subscribe\\\" command, this displays \\\"To \\<list-name\\>\\\", otherwise the same as %F\n%l\n:   number of lines in the unprocessed message (may not work with maildir, mh, and IMAP folders)\n%M\n:   Number of hidden messages if the thread is collapsed\n%m\n:   Total number of message in the mailbox\n%N\n:   Message score\n%n\n:   Author\\'s real name (or address if missing)\n%O\n:   Original save folder where NeoMutt would formerly have Stashed the message: list name or recipient name If not sent to a list\n%P\n:   Progress indicator for the built-in pager (how much of the file has been displayed)\n%q\n:   Newsgroup name (if compiled with NNTP support)\n%R\n:   Comma separated list of \\\"Cc:\\\" recipients\n%r\n:   Comma separated list of \\\"To:\\\" recipients\n%S\n:   Single character status of the message (\\\"N\\\"/\\\"O\\\"/\\\"D\\\"/\\\"d\\\"/\\\"!\\\"/\\\"r\\\"/\\\"\\*\\\")\n%s\n:   Subject of the message\n%T\n:   The appropriate character from the \\$to_chars string\n%t\n:   \\\"To:\\\" field (recipients)\n%u\n:   User (login) name of the author\n%v\n:   First name of the author, or the recipient if the message is from you\n%W\n:   Name of organization of author (\\\"Organization:\\\" field)\n%x\n:   \\\"X-Comment-To:\\\" field (if present and compiled with NNTP support)\n%X\n:   Number of MIME attachments (please see the \\\"attachments\\\" section for possible speed effects)\n%Y\n:   \\\"X-Label:\\\" field, if present, and *(1)* not at part of a thread tree, *(2)* at the top of a thread, or *(3)* \\\"X-Label:\\\" is different from Preceding message\\'s \\\"X-Label:\\\"\n%y\n:   \\\"X-Label:\\\" field, if present\n%Z\n:   A three character set of message status flags. The first character is new/read/replied flags (\\\"n\\\"/\\\"o\\\"/\\\"r\\\"/\\\"O\\\"/\\\"N\\\"). The second is deleted or encryption flags (\\\"D\\\"/\\\"d\\\"/\\\"S\\\"/\\\"P\\\"/\\\"s\\\"/\\\"K\\\"). The third is either tagged/flagged (\\\"\\*\\\"/\\\"!\\\"), or one of the characters Listed in \\$to_chars.\n%zc\n:   Message crypto flags\n%zs\n:   Message status flags\n%zt\n:   Message tag flags\n%@name@\n:   insert and evaluate format-string from the matching \\\"index-format-hook\\\" command\n%{fmt}\n:   the date and time of the message is converted to sender\\'s time zone, and \\\"fmt\\\" is expanded by the library function `strftime(3)`; if the first character inside the braces is a bang (\\\"!\\\"), the date is formatted ignoring any locale settings. Note that the sender\\'s time zone might only be available as a numerical offset, so \\\"%Z\\\" behaves like \\\"%z\\\".\n%\\[fmt\\]\n:   the date and time of the message is converted to the local time zone, and \\\"fmt\\\" is expanded by the library function `strftime(3)`; if the first character inside the brackets is a bang (\\\"!\\\"), the date is formatted ignoring any locale settings.\n%(fmt)\n:   the local date and time when the message was received, and \\\"fmt\\\" is expanded by the library function `strftime(3)`; if the first character inside the parentheses is a bang (\\\"!\\\"), the date is formatted ignoring any locale settings.\n%\\>X\n:   right justify the rest of the string and pad with character \\\"X\\\"\n%\\|X\n:   pad to the end of the line with character \\\"X\\\"\n%\\*X\n:   soft-fill with character \\\"X\\\" as pad\nDate format expressions can be constructed based on relative dates. Using the date formatting operators along with nested conditionals, the date format can be modified based on how old a message is. See the section on \\\"Conditional Dates\\\" for an explanation and examples\nNote that for mbox/mmdf, \\\"%l\\\" applies to the unprocessed message, and for maildir/mh, the value comes from the \\\"Lines:\\\" header field when present (the meaning is normally the same). Thus the value depends on the encodings used in the different parts of the message and has little meaning in practice.\n\\\"Soft-fill\\\" deserves some explanation: Normal right-justification will print everything to the left of the \\\"%\\>\\\", displaying padding and whatever lies to the right only if there\\'s room. By contrast, soft-fill gives priority to the right-hand side, guaranteeing space to display it and showing padding only if there\\'s still room. If necessary, soft-fill will eat text leftwards to make room for rightward text.\nNote that these expandos are supported in \\\"save-hook\\\", \\\"fcc-hook\\\" and \\\"fcc-save-hook\\\", too."
        },
        "inews": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nIf set, specifies the program and arguments used to deliver news posted by NeoMutt. Otherwise, NeoMutt posts article using current connection to news server. The following printf-style sequence is understood:\n%a\n:   account url\n%p\n:   port\n%P\n:   port if specified\n%s\n:   news server name\n%S\n:   url schema\n%u\n:   username\nExample:\nset inews=\"/usr/local/bin/inews -hS\" "
        },
        "ispell": {
          "type": "string",
          "default": "ispell",
          "description": "Type: command\nDefault: \"ispell\"\n\nHow to invoke ispell (GNU\\'s spell-checking software)."
        },
        "keep_flagged": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, read messages marked as flagged will not be moved from your spool mailbox to your \\$mbox mailbox or to the \\\"mbox\\\" specified by a mbox-hook command.\nNote that \\$keep_flagged only has an effect if \\$move is set."
        },
        "local_date_header": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, the date in the Date header of emails that you send will be in your local timezone. If unset a UTC date will be used instead to avoid leaking information about your current location."
        },
        "mail_check": {
          "type": "number",
          "default": 5,
          "description": "Type: number\nDefault: 5\n\nThis variable configures how often (in seconds) NeoMutt should look for new mail. Also see the \\$timeout variable."
        },
        "mail_check_recent": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will only notify you about new mail that has been received since the last time you opened the mailbox. When *unset*, NeoMutt will notify you if any new mail exists in the mailbox, regardless of whether you have visited it recently.\nWhen *\\$mark_old* is set, NeoMutt does not consider the mailbox to contain new mail if only old messages exist."
        },
        "mail_check_stats": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will periodically calculate message statistics of a mailbox while polling for new mail. It will check for unread, flagged, and total message counts. Because this operation is more performance intensive, it defaults to *unset*, and has a separate option, \\$mail_check_stats_interval, to control how often to update these counts.\nMessage statistics can also be explicitly calculated by invoking the `<check-stats>` function."
        },
        "mail_check_stats_interval": {
          "type": "number",
          "default": 60,
          "description": "Type: number\nDefault: 60\n\nWhen \\$mail_check_stats is *set*, this variable configures how often (in seconds) NeoMutt will update message counts."
        },
        "mailbox_folder_format": {
          "type": "string",
          "default": "%2C %?n?%6n&%6 ? %6m %i",
          "description": "Type: string\nDefault: \"%2C %?n?%6n&%6 ? %6m %i\"\n\nThis variable allows you to customize the file browser display to your personal taste. It\\'s only used to customize network mailboxes (e.g. imap). This string is identical in formatting to the one used by \\\"\\$folder_format\\\"."
        },
        "mailcap_path": {
          "type": "string",
          "default": "~/.mailcap",
          "description": "Type: string list\nDefault: \"~/.mailcap:/nix/store/dc7s76mm4v832dibrr8qr5z2xv63xd8l-neomutt-20230517/share/neomutt/mailcap:/nix/store/dc7s76mm4v832dibrr8qr5z2xv63xd8l-neomutt-20230517/etc/mailcap:/etc/mailcap:/usr/etc/mailcap:/usr/local/etc/mailcap\"\n\nThis variable specifies a list of colon-separated files to consult when attempting to display MIME bodies not directly supported by NeoMutt. The default value is generated during startup: see the \\\"mailcap\\\" section of the manual.\n\\$mailcap_path is overridden by the environment variable `$MAILCAPS`.\nThe default search path is from RFC1524."
        },
        "mailcap_sanitize": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, NeoMutt will restrict possible characters in mailcap % expandos to a well-defined set of safe characters. This is the safe setting, but we are not sure it doesn\\'t break some more advanced MIME stuff.\n**DON\\'T CHANGE THIS SETTING UNLESS YOU ARE REALLY SURE WHAT YOU ARE** DOING!"
        },
        "maildir_check_cur": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, NeoMutt will poll both the new and cur directories of a maildir folder for new messages. This might be useful if other programs interacting with the folder (e.g. dovecot) are moving new messages to the cur directory. Note that setting this option may slow down polling for new messages in large folders, since NeoMutt has to scan all cur messages."
        },
        "maildir_header_cache_verify": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nCheck for Maildir unaware programs other than NeoMutt having modified maildir files when the header cache is in use. This incurs one `stat(2)` per message every time the folder is opened (which can be very slow for NFS folders)."
        },
        "maildir_trash": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, messages marked as deleted will be saved with the maildir trashed flag instead of unlinked. **Note:** this only applies to maildir-style mailboxes. Setting it will have no effect on other mailbox types."
        },
        "mark_macro_prefix": {
          "type": "string",
          "default": "'",
          "description": "Type: string\nDefault: \"'\"\n\nPrefix for macros created using mark-message. A new macro automatically generated with *\\<mark-message\\>a* will be composed from this prefix and the letter *a*."
        },
        "mark_old": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nControls whether or not NeoMutt marks *new* **unread** messages as *old* if you exit a mailbox without reading them. With this option *set*, the next time you start NeoMutt, the messages will show up with an \\\"O\\\" next to them in the index menu, indicating that they are old."
        },
        "markers": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nControls the display of wrapped lines in the internal pager. If set, a \\\"+\\\" marker is displayed at the beginning of wrapped lines.\nAlso see the \\$smart_wrap variable."
        },
        "mask": {
          "type": "string",
          "format": "regex",
          "default": "!^\\.[^.]",
          "description": "Type: regular expression\nDefault: \"!^\\.[^.]\"\n\nA regular expression used in the file browser, optionally preceded by the *not* operator \\\"!\\\". Only files whose names match this mask will be shown. The match is always case-sensitive."
        },
        "mbox": {
          "type": "string",
          "default": "~/mbox",
          "description": "Type: mailbox\nDefault: \"~/mbox\"\n\nThis specifies the folder into which read mail in your \\$spool_file folder will be appended.\nAlso see the \\$move variable."
        },
        "mbox_type": {
          "type": "string",
          "enum": [
            "mbox",
            "MMDF",
            "MH",
            "Maildir"
          ],
          "default": "mbox",
          "description": "Type: enumeration\nDefault: mbox\n\nThe default mailbox type used when creating new folders. May be any of \\\"mbox\\\", \\\"MMDF\\\", \\\"MH\\\" or \\\"Maildir\\\".\nThis can also be set using the `-m` command-line option."
        },
        "me_too": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *unset*, NeoMutt will remove your address (see the \\\"alternates\\\" command) from the list of recipients when replying to a message."
        },
        "menu_context": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nThis variable controls the number of lines of context that are given when scrolling through menus. (Similar to \\$pager_context.)"
        },
        "menu_move_off": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *unset*, the bottom entry of menus will never scroll up past the bottom of the screen, unless there are less entries than lines. When *set*, the bottom entry may move off the bottom."
        },
        "menu_scroll": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, menus will be scrolled up or down one line when you attempt to move across a screen boundary. If *unset*, the screen is cleared and the next or previous page of the menu is displayed (useful for slow links to avoid many redraws)."
        },
        "message_cache_clean": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, NeoMutt will clean out obsolete entries from the message cache when the mailbox is synchronized. You probably only want to set it every once in a while, since it can be a little slow (especially for large folders)."
        },
        "message_cache_dir": {
          "type": "string",
          "default": "",
          "description": "Type: path\nDefault: \"\"\n\nSet this to a directory and NeoMutt will cache copies of messages from your IMAP and POP servers here. You are free to remove entries at any time.\nWhen setting this variable to a directory, NeoMutt needs to fetch every remote message only once and can perform regular expression searches as fast as for local folders.\nAlso see the \\$message_cache_clean variable."
        },
        "message_format": {
          "type": "string",
          "default": "%s",
          "description": "Type: string\nDefault: \"%s\"\n\nThis is the string displayed in the \\\"attachment\\\" menu for attachments of type `message/rfc822`. For a full listing of defined `printf(3)`-like sequences see the section on \\$index_format."
        },
        "meta_key": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, forces NeoMutt to interpret keystrokes with the high bit (bit 8) set as if the user had pressed the Esc key and whatever key remains after having the high bit removed. For example, if the key pressed has an ASCII value of `0xf8`, then this is treated as if the user had pressed Esc then \\\"x\\\". This is because the result of removing the high bit from `0xf8` is `0x78`, which is the ASCII character \\\"x\\\"."
        },
        "mh_purge": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *unset*, NeoMutt will mimic mh\\'s behavior and rename deleted messages to *,\\<old file name\\>* in mh folders instead of really deleting them. This leaves the message on disk but makes programs reading the folder ignore it. If the variable is *set*, the message files will simply be deleted.\nThis option is similar to \\$maildir_trash for Maildir folders."
        },
        "mh_seq_flagged": {
          "type": "string",
          "default": "flagged",
          "description": "Type: string\nDefault: \"flagged\"\n\nThe name of the MH sequence used for flagged messages."
        },
        "mh_seq_replied": {
          "type": "string",
          "default": "replied",
          "description": "Type: string\nDefault: \"replied\"\n\nThe name of the MH sequence used to tag replied messages."
        },
        "mh_seq_unseen": {
          "type": "string",
          "default": "unseen",
          "description": "Type: string\nDefault: \"unseen\"\n\nThe name of the MH sequence used for unseen messages."
        },
        "mime_forward": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "no",
          "description": "Type: quadoption\nDefault: no\n\nWhen *set*, the message you are forwarding will be attached as a separate `message/rfc822` MIME part instead of included in the main body of the message. This is useful for forwarding MIME messages so the receiver can properly view the message as it was delivered to you. If you like to switch between MIME and not MIME from mail to mail, set this variable to \\\"ask-no\\\" or \\\"ask-yes\\\".\nAlso see \\$forward_decode and \\$mime_forward_decode."
        },
        "mime_forward_decode": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nControls the decoding of complex MIME messages into `text/plain` when forwarding a message while \\$mime_forward is *set*. Otherwise \\$forward_decode is used instead."
        },
        "mime_forward_rest": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "yes",
          "description": "Type: quadoption\nDefault: yes\n\nWhen forwarding multiple attachments of a MIME message from the attachment menu, attachments which can\\'t be decoded in a reasonable manner will be attached to the newly composed message if this option is *set*."
        },
        "mime_type_query_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis specifies a command to run, to determine the mime type of a new attachment when composing a message. Unless \\$mime_type_query_first is set, this will only be run if the attachment\\'s extension is not found in the mime.types file.\nThe string may contain a \\\"%s\\\", which will be substituted with the attachment filename. NeoMutt will add quotes around the string substituted for \\\"%s\\\" automatically according to shell quoting rules, so you should avoid adding your own. If no \\\"%s\\\" is found in the string, NeoMutt will append the attachment filename to the end of the string.\nThe command should output a single line containing the attachment\\'s mime type.\nSuggested values are \\\"xdg-mime query filetype\\\" or \\\"file -bi\\\"."
        },
        "mime_type_query_first": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, the \\$mime_type_query_command will be run before the mime.types lookup."
        },
        "move": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "no",
          "description": "Type: quadoption\nDefault: no\n\nIf this variable is *set*, then NeoMutt will move read messages from your spool mailbox to your \\$mbox mailbox or to the \\\"mbox\\\" specified by a mbox-hook command.\nSee also \\$keep_flagged."
        },
        "narrow_tree": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis variable, when *set*, makes the thread tree narrower, allowing deeper threads to fit on the screen."
        },
        "net_inc": {
          "type": "number",
          "default": 10,
          "description": "Type: number\nDefault: 10\n\nOperations that expect to transfer a large amount of data over the network will update their progress every \\$net_inc kilobytes. If set to 0, no progress messages will be displayed.\nSee also \\$read_inc, \\$write_inc and \\$net_inc."
        },
        "new_mail_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nIf *set*, NeoMutt will call this command after a new message is received. See the \\$status_format documentation for the values that can be formatted into this command."
        },
        "news_cache_dir": {
          "type": "string",
          "default": "~/.neomutt",
          "description": "Type: path\nDefault: \"~/.neomutt\"\n\nThis variable pointing to directory where NeoMutt will save cached news articles and headers in. If *unset*, articles and headers will not be saved at all and will be reloaded from the server each time."
        },
        "news_server": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThis variable specifies domain name or address of NNTP server.\nYou can also specify username and an alternative port for each news server, e.g. `[[s]news://][username[:password]@]server[:port]`\nThis option can also be set using the command line option \\\"-g\\\", the environment variable `$NNTPSERVER`, or putting the server name in the file \\\"/etc/nntpserver\\\"."
        },
        "newsgroups_charset": {
          "type": "string",
          "default": "utf-8",
          "description": "Type: string\nDefault: \"utf-8\"\n\nCharacter set of newsgroups descriptions."
        },
        "newsrc": {
          "type": "string",
          "default": "~/.newsrc",
          "description": "Type: path\nDefault: \"~/.newsrc\"\n\nThe file, containing info about subscribed newsgroups - names and indexes of read articles. The following printf-style sequence is understood:\n**Expando**\n:   **Description** **Example**\n%a\n:   Account url `news:news.gmane.org`\n%p\n:   Port `119`\n%P\n:   Port if specified `10119`\n%s\n:   News server name `news.gmane.org`\n%S\n:   Url schema `news`\n%u\n:   Username `username`"
        },
        "nm_config_file": {
          "type": "string",
          "default": "auto",
          "description": "Type: path\nDefault: \"auto\"\n\nConfiguration file for notmuch. Use \\'auto\\' to detect configuration."
        },
        "nm_config_profile": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nConfiguration profile for notmuch."
        },
        "nm_db_limit": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nThis variable specifies the default limit used in notmuch queries."
        },
        "nm_default_url": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThis variable specifies the default Notmuch database in format notmuch://\\<absolute path\\>."
        },
        "nm_exclude_tags": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThe messages tagged with these tags are excluded and not loaded from notmuch DB to NeoMutt unless specified explicitly."
        },
        "nm_flagged_tag": {
          "type": "string",
          "default": "flagged",
          "description": "Type: string\nDefault: \"flagged\"\n\nThis variable specifies notmuch tag which is used for flagged messages. The variable is used to count flagged messages in DB and set the flagged flag when modifying tags. All other NeoMutt commands use standard (e.g. maildir) flags."
        },
        "nm_open_timeout": {
          "type": "number",
          "default": 5,
          "description": "Type: number\nDefault: 5\n\nThis variable specifies the timeout for database open in seconds."
        },
        "nm_query_type": {
          "type": "string",
          "default": "messages",
          "description": "Type: string\nDefault: \"messages\"\n\nThis variable specifies the default query type (threads or messages) used in notmuch queries."
        },
        "nm_query_window_current_position": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nThis variable contains the position of the current search for window based vfolder."
        },
        "nm_query_window_current_search": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThis variable contains the currently setup notmuch search for window based vfolder."
        },
        "nm_query_window_duration": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nThis variable sets the time duration of a windowed notmuch query. Accepted values all non negative integers. A value of 0 disables the feature."
        },
        "nm_query_window_enable": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis variable enables windowed notmuch queries even if window duration is 0."
        },
        "nm_query_window_or_terms": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThis variable contains additional notmuch search terms for messages to be shown regardless of date.\nExample:\nUsing \\\"notmuch://?query=tag:inbox\\\" as the mailbox and \\\"tag:flagged and tag:unread\\\" as the or terms, NeoMutt will produce a query window such as:\nnotmuch://?query=tag:inbox and (date:\\... or (tag:flagged and tag:unread))"
        },
        "nm_query_window_timebase": {
          "type": "string",
          "default": "week",
          "description": "Type: string\nDefault: \"week\"\n\nThis variable sets the time base of a windowed notmuch query. Accepted values are \\'minute\\', \\'hour\\', \\'day\\', \\'week\\', \\'month\\', \\'year\\'"
        },
        "nm_record": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis variable specifies whether, when writing a just-sent message to the \\$record, the message should also be added to the notmuch DB. Replies inherit the notmuch tags from the original message. See \\$nm_record_tags for how to modify the set of notmuch tags assigned to sent messages written to the record."
        },
        "nm_record_tags": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThis variable specifies the notmuch tag modifications (addition, removal, toggling) applied to messages added to the Neomutt record when \\$nm_record is true. See the description of the `<modify-labels>` function for the syntax."
        },
        "nm_replied_tag": {
          "type": "string",
          "default": "replied",
          "description": "Type: string\nDefault: \"replied\"\n\nThis variable specifies notmuch tag which is used for replied messages. The variable is used to set the replied flag when modifying tags. All other NeoMutt commands use standard (e.g. maildir) flags."
        },
        "nm_unread_tag": {
          "type": "string",
          "default": "unread",
          "description": "Type: string\nDefault: \"unread\"\n\nThis variable specifies notmuch tag which is used for unread messages. The variable is used to count unread messages in DB and set the unread flag when modifiying tags. All other NeoMutt commands use standard (e.g. maildir) flags."
        },
        "nntp_authenticators": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThis is a colon-delimited list of authentication methods NeoMutt may attempt to use to log in to a news server, in the order NeoMutt should try them. Authentication methods are either \\\"user\\\" or any SASL mechanism, e.g. \\\"digest-md5\\\", \\\"gssapi\\\" or \\\"cram-md5\\\". This option is case-insensitive. If it\\'s *unset* (the default) NeoMutt will try all available methods, in order from most-secure to least-secure.\nExample:\nset nntp_authenticators=\"digest-md5:user\" \n**Note:** NeoMutt will only fall back to other authentication methods if the previous methods are unavailable. If a method is available but authentication fails, NeoMutt will not connect to the IMAP server."
        },
        "nntp_context": {
          "type": "number (long)",
          "default": "1000",
          "description": "Type: number (long)\nDefault: 1000\n\nThis variable defines number of articles which will be in index when newsgroup entered. If active newsgroup have more articles than this number, oldest articles will be ignored. Also controls how many articles headers will be saved in cache when you quit newsgroup."
        },
        "nntp_listgroup": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nThis variable controls whether or not existence of each article is checked when newsgroup is entered."
        },
        "nntp_load_description": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nThis variable controls whether or not descriptions for each newsgroup must be loaded when newsgroup is added to list (first time list loading or new newsgroup adding)."
        },
        "nntp_pass": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nYour password for NNTP account."
        },
        "nntp_poll": {
          "type": "number",
          "default": 60,
          "description": "Type: number\nDefault: 60\n\nThe time in seconds until any operations on newsgroup except post new article will cause recheck for new news. If set to 0, NeoMutt will recheck newsgroup on each operation in index (stepping, read article, etc.)."
        },
        "nntp_user": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nYour login name on the NNTP server. If *unset* and NNTP server requires authentication, NeoMutt will prompt you for your account name when you connect to news server."
        },
        "pager": {
          "type": "string",
          "default": "builtin",
          "description": "Type: command\nDefault: \"builtin\"\n\nThis variable specifies which pager you would like to use to view messages. The value \\\"builtin\\\" means to use the built-in pager, otherwise this variable should specify the pathname of the external pager you would like to use.\nUsing an external pager may have some disadvantages: Additional keystrokes are necessary because you can\\'t call NeoMutt functions directly from the pager, and screen resizes cause lines longer than the screen width to be badly formatted in the help menu."
        },
        "pager_context": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nThis variable controls the number of lines of context that are given when displaying the next or previous page in the internal pager. By default, NeoMutt will display the line after the last one on the screen at the top of the next page (0 lines of context).\nThis variable also specifies the amount of context given for search results. If positive, this many lines will be given before a match, if 0, the match will be top-aligned."
        },
        "pager_format": {
          "type": "string",
          "default": "-%Z- %C/%m",
          "description": "Type: string\nDefault: \"-%Z- %C/%m: %-20.20n   %s%*  -- (%P)\"\n\nThis variable controls the format of the one-line message \\\"status\\\" displayed before each message in either the internal or an external pager. The valid sequences are listed in the \\$index_format section."
        },
        "pager_index_lines": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nDetermines the number of lines of a mini-index which is shown when in the pager. The current message, unless near the top or bottom of the folder, will be roughly one third of the way down this mini-index, giving the reader the context of a few messages before and after the message. This is useful, for example, to determine how many messages remain to be read in the current thread. A value of 0 results in no index being shown."
        },
        "pager_read_delay": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nDetermines the number of seconds that must elapse after first opening a new message in the pager before that message will be marked as read. A value of 0 results in the message being marked read unconditionally; for other values, navigating to another message or exiting the pager before the timeout will leave the message marked unread. This setting is ignored if \\$pager is not **builtin**."
        },
        "pager_skip_quoted_context": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nDetermines the number of lines of context to show before the unquoted text when using the `<skip-quoted>` function. When set to a positive number at most that many lines of the previous quote are displayed. If the previous quote is shorter the whole quote is displayed.\nThe (now deprecated) *skip_quoted_offset* is an alias for this variable, and should no longer be used."
        },
        "pager_stop": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, the internal-pager will **not** move to the next message when you are at the end of a message and invoke the `<next-page>` function."
        },
        "pattern_format": {
          "type": "string",
          "default": "%2n %-15e  %d",
          "description": "Type: string\nDefault: \"%2n %-15e  %d\"\n\nThis variable describes the format of the \\\"pattern completion\\\" menu. The following `printf(3)`-style sequences are understood:\n%d\n:   pattern description\n%e\n:   pattern expression\n%n\n:   index number"
        },
        "pgp_auto_decode": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, NeoMutt will automatically attempt to decrypt traditional PGP messages whenever the user performs an operation which ordinarily would result in the contents of the message being operated on. For example, if the user displays a pgp-traditional message which has not been manually checked with the `<check-traditional-pgp>` function, NeoMutt will automatically check the message for traditional pgp."
        },
        "pgp_auto_inline": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis option controls whether NeoMutt generates old-style inline (traditional) PGP encrypted or signed messages under certain circumstances. This can be overridden by use of the pgp menu, when inline is not required. The GPGME backend does not support this option.\nNote that NeoMutt might automatically use PGP/MIME for messages which consist of more than a single MIME part. NeoMutt can be configured to ask before sending PGP/MIME messages when inline (traditional) would not work.\nAlso see the \\$pgp_mime_auto variable.\nAlso note that using the old-style PGP message format is **strongly** **deprecated**. (PGP only)"
        },
        "pgp_check_exit": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, NeoMutt will check the exit code of the PGP subprocess when signing or encrypting. A non-zero exit code means that the subprocess failed. (PGP only)"
        },
        "pgp_check_gpg_decrypt_status_fd": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, NeoMutt will check the status file descriptor output of \\$pgp_decrypt_command and \\$pgp_decode_command for GnuPG status codes indicating successful decryption. This will check for the presence of DECRYPTION_OKAY, absence of DECRYPTION_FAILED, and that all PLAINTEXT occurs between the BEGIN_DECRYPTION and END_DECRYPTION status codes.\nIf *unset*, NeoMutt will instead match the status fd output against \\$pgp_decryption_okay. (PGP only)"
        },
        "pgp_clear_sign_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis format is used to create an old-style \\\"clearsigned\\\" PGP message. Note that the use of this format is **strongly** **deprecated**.\nThis is a format string, see the \\$pgp_decode_command command for possible `printf(3)`-like sequences. Note that in this case, %r expands to the search string, which is a list of one or more quoted values such as email address, name, or keyid. (PGP only)"
        },
        "pgp_decode_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis format strings specifies a command which is used to decode application/pgp attachments.\nThe PGP command formats have their own set of `printf(3)`-like sequences:\n%a\n:   The value of \\$pgp_sign_as if set, otherwise the value of \\$pgp_default_key.\n%f\n:   Expands to the name of a file containing a message.\n%p\n:   Expands to PGPPASSFD=0 when a pass phrase is needed, to an empty string otherwise. Note: This may be used with a %? construct.\n%r\n:   One or more key IDs (or fingerprints if available).\n%s\n:   Expands to the name of a file containing the signature part of a `multipart/signed` attachment when verifying it.\n(PGP only)"
        },
        "pgp_decrypt_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to decrypt a PGP encrypted message.\nThis is a format string, see the \\$pgp_decode_command command for possible `printf(3)`-like sequences. (PGP only)\nNote: When decrypting messages using `gpg`, a pinentry program needs to be invoked unless the password is cached within `gpg-agent`. Currently, the `pinentry-tty` program (usually distributed with `gpg`) isn\\'t suitable for being invoked by NeoMutt. You are encouraged to use a different pinentry-program when running NeoMutt in order to avoid problems.\nSee also: https://github.com/neomutt/neomutt/issues/1014"
        },
        "pgp_decryption_okay": {
          "type": "string",
          "format": "regex",
          "default": "",
          "description": "Type: regular expression\nDefault: \"\"\n\nIf you assign text to this variable, then an encrypted PGP message is only considered successfully decrypted if the output from \\$pgp_decrypt_command contains the text. This is used to protect against a spoofed encrypted message, with multipart/encrypted headers but containing a block that is not actually encrypted. (e.g. simply signed and ascii armored text).\nNote that if \\$pgp_check_gpg_decrypt_status_fd is set, this variable is ignored. (PGP only)"
        },
        "pgp_default_key": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThis is the default key-pair to use for PGP operations. It will be used for encryption (see \\$postpone_encrypt and \\$pgp_self_encrypt).\nIt will also be used for signing unless \\$pgp_sign_as is set.\nThe (now deprecated) *pgp_self_encrypt_as* is an alias for this variable, and should no longer be used. (PGP only)"
        },
        "pgp_encrypt_only_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to encrypt a body part without signing it.\nThis is a format string, see the \\$pgp_decode_command command for possible `printf(3)`-like sequences. Note that in this case, %r expands to the search string, which is a list of one or more quoted values such as email address, name, or keyid. (PGP only)"
        },
        "pgp_encrypt_sign_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to both sign and encrypt a body part.\nThis is a format string, see the \\$pgp_decode_command command for possible `printf(3)`-like sequences. (PGP only)"
        },
        "pgp_entry_format": {
          "type": "string",
          "default": "%4n %t%f %4l/0x%k %-4a %2c %u",
          "description": "Type: string\nDefault: \"%4n %t%f %4l/0x%k %-4a %2c %u\"\n\nThis variable allows you to customize the PGP key selection menu to your personal taste. If \\$crypt_use_gpgme is *set*, then it applies to S/MIME key selection menu also. This string is similar to \\$index_format, but has its own set of `printf(3)`-like sequences:\n%a\n:   Algorithm\n%c\n:   Capabilities\n%f\n:   Flags\n%i\n:   Key fingerprint (or long key id if non-existent)\n%k\n:   Key id\n%l\n:   Key length\n%n\n:   Number\n%p\n:   Protocol\n%t\n:   Trust/validity of the key-uid association\n%u\n:   User id\n%\\[\\<s\\>\\]\n:   Date of the key where \\<s\\> is an `strftime(3)` expression\nSee the section \\\"Sending Cryptographically Signed/Encrypted Messages\\\" of the user manual for the meaning of the letters some of these sequences expand to.\n(Crypto only) or (PGP only when GPGME disabled)"
        },
        "pgp_export_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to export a public key from the user\\'s key ring.\nThis is a format string, see the \\$pgp_decode_command command for possible `printf(3)`-like sequences. (PGP only)"
        },
        "pgp_get_keys_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is invoked whenever NeoMutt needs to fetch the public key associated with an email address. Of the sequences supported by \\$pgp_decode_command, %r is the only `printf(3)`-like sequence used with this format. Note that in this case, %r expands to the email address, not the public key ID (the key ID is unknown, which is why NeoMutt is invoking this command). (PGP only)"
        },
        "pgp_good_sign": {
          "type": "string",
          "format": "regex",
          "default": "",
          "description": "Type: regular expression\nDefault: \"\"\n\nIf you assign a text to this variable, then a PGP signature is only considered verified if the output from \\$pgp_verify_command contains the text. Use this variable if the exit code from the command is 0 even for bad signatures. (PGP only)"
        },
        "pgp_ignore_subkeys": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nSetting this variable will cause NeoMutt to ignore OpenPGP subkeys. Instead, the principal key will inherit the subkeys\\' capabilities. *Unset* this if you want to play interesting key selection games. (PGP only)"
        },
        "pgp_import_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to import a key from a message into the user\\'s public key ring.\nThis is a format string, see the \\$pgp_decode_command command for possible `printf(3)`-like sequences. (PGP only)"
        },
        "pgp_list_pubring_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to list the public key ring\\'s contents. The output format must be analogous to the one used by\ngpg --list-keys --with-colons --with-fingerprint \nNote: gpg\\'s `fixed-list-mode` option should not be used. It produces a different date format which may result in NeoMutt showing incorrect key generation dates.\nThis is a format string, see the \\$pgp_decode_command command for possible `printf(3)`-like sequences. (PGP only)"
        },
        "pgp_list_secring_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to list the secret key ring\\'s contents. The output format must be analogous to the one used by:\ngpg --list-keys --with-colons --with-fingerprint \nNote: gpg\\'s `fixed-list-mode` option should not be used. It produces a different date format which may result in NeoMutt showing incorrect key generation dates.\nThis is a format string, see the \\$pgp_decode_command command for possible `printf(3)`-like sequences. (PGP only)"
        },
        "pgp_long_ids": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, use 64 bit PGP key IDs, if *unset* use the normal 32 bit key IDs. NOTE: Internally, NeoMutt has transitioned to using fingerprints (or long key IDs as a fallback). This option now only controls the display of key IDs in the key selection menu and a few other places. (PGP only)"
        },
        "pgp_mime_auto": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-yes",
          "description": "Type: quadoption\nDefault: ask-yes\n\nThis option controls whether NeoMutt will prompt you for automatically sending a (signed/encrypted) message using PGP/MIME when inline (traditional) fails (for any reason).\nAlso note that using the old-style PGP message format is **strongly** **deprecated**. (PGP only)"
        },
        "pgp_reply_inline": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nSetting this variable will cause NeoMutt to always attempt to create an inline (traditional) message when replying to a message which is PGP encrypted/signed inline. This can be overridden by use of the pgp menu, when inline is not required. This option does not automatically detect if the (replied-to) message is inline; instead it relies on NeoMutt internals for previously checked/flagged messages.\nNote that NeoMutt might automatically use PGP/MIME for messages which consist of more than a single MIME part. NeoMutt can be configured to ask before sending PGP/MIME messages when inline (traditional) would not work.\nAlso see the \\$pgp_mime_auto variable.\nAlso note that using the old-style PGP message format is **strongly** **deprecated**. (PGP only)"
        },
        "pgp_retainable_sigs": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, signed and encrypted messages will consist of nested `multipart/signed` and `multipart/encrypted` body parts.\nThis is useful for applications like encrypted and signed mailing lists, where the outer layer (`multipart/encrypted`) can be easily removed, while the inner `multipart/signed` part is retained. (PGP only)"
        },
        "pgp_self_encrypt": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, PGP encrypted messages will also be encrypted using the key in \\$pgp_default_key. (PGP only)"
        },
        "pgp_show_unusable": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, NeoMutt will display non-usable keys on the PGP key selection menu. This includes keys which have been revoked, have expired, or have been marked as \\\"disabled\\\" by the user. (PGP only)"
        },
        "pgp_sign_as": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nIf you have a different key pair to use for signing, you should set this to the signing key. Most people will only need to set \\$pgp_default_key. It is recommended that you use the keyid form to specify your key (e.g. `0x00112233`). (PGP only)"
        },
        "pgp_sign_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to create the detached PGP signature for a `multipart/signed` PGP/MIME body part.\nThis is a format string, see the \\$pgp_decode_command command for possible `printf(3)`-like sequences. (PGP only)"
        },
        "pgp_sort_keys": {
          "type": "string",
          "default": "address",
          "description": "Type: sort order\nDefault: address\n\nSpecifies how the entries in the pgp menu are sorted. The following are legal values:\naddress\n:   sort alphabetically by user id\nkeyid\n:   sort alphabetically by key id\ndate\n:   sort by key creation date\ntrust\n:   sort by the trust of the key\nIf you prefer reverse order of the above values, prefix it with \\\"reverse-\\\". (PGP only)"
        },
        "pgp_strict_enc": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, NeoMutt will automatically encode PGP/MIME signed messages as quoted-printable. Please note that unsetting this variable may lead to problems with non-verifyable PGP signatures, so only change this if you know what you are doing. (PGP only)"
        },
        "pgp_timeout": {
          "type": "number (long)",
          "default": "300",
          "description": "Type: number (long)\nDefault: 300\n\nThe number of seconds after which a cached passphrase will expire if not used. (PGP only)"
        },
        "pgp_use_gpg_agent": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, NeoMutt expects a `gpg-agent(1)` process will handle private key passphrase prompts. If *unset*, NeoMutt will prompt for the passphrase and pass it via stdin to the pgp command.\nNote that as of version 2.1, GnuPG automatically spawns an agent and requires the agent be used for passphrase management. Since that version is increasingly prevalent, this variable now defaults *set*.\nNeoMutt works with a GUI or curses pinentry program. A TTY pinentry should not be used.\nIf you are using an older version of GnuPG without an agent running, or another encryption program without an agent, you will need to *unset* this variable. (PGP only)"
        },
        "pgp_verify_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to verify PGP signatures.\nThis is a format string, see the \\$pgp_decode_command command for possible `printf(3)`-like sequences. (PGP only)"
        },
        "pgp_verify_key_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to verify key information from the key selection menu.\nThis is a format string, see the \\$pgp_decode_command command for possible `printf(3)`-like sequences. (PGP only)"
        },
        "pipe_decode": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nUsed in connection with the `<pipe-message>` function. When *unset*, NeoMutt will pipe the messages without any preprocessing. When *set*, NeoMutt will attempt to decode the messages first.\nAlso see \\$pipe_decode_weed, which controls whether headers will be weeded when this is *set*."
        },
        "pipe_decode_weed": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nFor `<pipe-message>`, when \\$pipe_decode is set, this further controls whether NeoMutt will weed headers."
        },
        "pipe_sep": {
          "type": "string",
          "default": "\\n",
          "description": "Type: string\nDefault: \"\\n\"\n\nThe separator to add between messages when piping a list of tagged messages to an external Unix command."
        },
        "pipe_split": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nUsed in connection with the `<pipe-message>` function following `<tag-prefix>`. If this variable is *unset*, when piping a list of tagged messages NeoMutt will concatenate the messages and will pipe them all concatenated. When *set*, NeoMutt will pipe the messages one by one. In both cases the messages are piped in the current sorted order, and the \\$pipe_sep separator is added after each message."
        },
        "pop_auth_try_all": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, NeoMutt will try all available authentication methods. When *unset*, NeoMutt will only fall back to other authentication methods if the previous methods are unavailable. If a method is available but authentication fails, NeoMutt will not connect to the POP server."
        },
        "pop_authenticators": {
          "type": "string",
          "default": "",
          "description": "Type: string list\nDefault: \"\"\n\nThis is a colon-separated list of authentication methods NeoMutt may attempt to use to log in to an POP server, in the order NeoMutt should try them. Authentication methods are either \\\"user\\\", \\\"apop\\\" or any SASL mechanism, e.g. \\\"digest-md5\\\", \\\"gssapi\\\" or \\\"cram-md5\\\". This option is case-insensitive. If this option is *unset* (the default) NeoMutt will try all available methods, in order from most-secure to least-secure.\nExample:\nset pop_authenticators=\"digest-md5:apop:user\" "
        },
        "pop_check_interval": {
          "type": "number",
          "default": 60,
          "description": "Type: number\nDefault: 60\n\nThis variable configures how often (in seconds) NeoMutt should look for new mail in the currently selected mailbox if it is a POP mailbox."
        },
        "pop_delete": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-no",
          "description": "Type: quadoption\nDefault: ask-no\n\nIf *set*, NeoMutt will delete successfully downloaded messages from the POP server when using the `<fetch-mail>` function. When *unset*, NeoMutt will download messages but also leave them on the POP server."
        },
        "pop_host": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThe name of your POP server for the `<fetch-mail>` function. You can also specify an alternative port, username and password, i.e.:\n[pop[s]://][username[:password]@]popserver[:port] \nwhere \\\"\\[\\...\\]\\\" denotes an optional part."
        },
        "pop_last": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf this variable is *set*, NeoMutt will try to use the \\\"`LAST`\\\" POP command for retrieving only unread messages from the POP server when using the `<fetch-mail>` function."
        },
        "pop_oauth_refresh_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThe command to run to generate an OAUTH refresh token for authorizing your connection to your POP server. This command will be run on every connection attempt that uses the OAUTHBEARER authentication mechanism. See \\\"oauth\\\" for details."
        },
        "pop_pass": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nSpecifies the password for your POP account. If *unset*, NeoMutt will prompt you for your password when you open a POP mailbox.\n**Warning**: you should only use this option when you are on a fairly secure machine, because the superuser can read your neomuttrc even if you are the only one who can read the file."
        },
        "pop_reconnect": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-yes",
          "description": "Type: quadoption\nDefault: ask-yes\n\nControls whether or not NeoMutt will try to reconnect to the POP server if the connection is lost."
        },
        "pop_user": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nYour login name on the POP server.\nThis variable defaults to your user name on the local machine."
        },
        "post_moderated": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-yes",
          "description": "Type: quadoption\nDefault: ask-yes\n\nIf set to *yes*, NeoMutt will post article to newsgroup that have not permissions to posting (e.g. moderated). **Note:** if news server does not support posting to that newsgroup or totally read-only, that posting will not have an effect."
        },
        "postpone": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-yes",
          "description": "Type: quadoption\nDefault: ask-yes\n\nControls whether or not messages are saved in the \\$postponed mailbox when you elect not to send immediately. If set to *ask-yes* or *ask-no*, you will be prompted with \\\"Save (postpone) draft message?\\\" when quitting from the \\\"compose\\\" screen.\nAlso see the \\$recall variable."
        },
        "postpone_encrypt": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, postponed messages that are marked for encryption will be self-encrypted. NeoMutt will first try to encrypt using the value specified in \\$pgp_default_key or \\$smime_default_key. If those are not set, it will try the deprecated \\$postpone_encrypt_as. (Crypto only)"
        },
        "postpone_encrypt_as": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThis is a deprecated fall-back variable for \\$postpone_encrypt. Please use \\$pgp_default_key or \\$smime_default_key. (Crypto only)"
        },
        "postponed": {
          "type": "string",
          "default": "~/postponed",
          "description": "Type: mailbox\nDefault: \"~/postponed\"\n\nNeoMutt allows you to indefinitely \\\"postpone sending a message\\\" which you are editing. When you choose to postpone a message, NeoMutt saves it in the mailbox specified by this variable.\nAlso see the \\$postpone variable."
        },
        "preconnect": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nIf *set*, a shell command to be executed if NeoMutt fails to establish a connection to the server. This is useful for setting up secure connections, e.g. with `ssh(1)`. If the command returns a nonzero status, NeoMutt gives up opening the server. Example:\nset preconnect=\"ssh -f -q -L 1234:mailhost.net:143 mailhost.net \\ sleep 20 < /dev/null > /dev/null\" \nMailbox \\\"foo\\\" on \\\"mailhost.net\\\" can now be reached as \\\"{localhost:1234}foo\\\".\nNote: For this example to work, you must be able to log in to the remote machine without having to enter a password."
        },
        "preferred_languages": {
          "type": "string",
          "default": "",
          "description": "Type: string list\nDefault: \"\"\n\nThis variable specifies a list of comma-separated languages. RFC8255 : user preferred languages to be searched in parts and display. Example:\nset preferred_languages=\"en,fr,de\" "
        },
        "print": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-no",
          "description": "Type: quadoption\nDefault: ask-no\n\nControls whether or not NeoMutt really prints messages. This is set to \\\"ask-no\\\" by default, because some people accidentally hit \\\"p\\\" often."
        },
        "print_command": {
          "type": "string",
          "default": "lpr",
          "description": "Type: command\nDefault: \"lpr\"\n\nThis specifies the command pipe that should be used to print messages."
        },
        "print_decode": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nUsed in connection with the `<print-message>` function. If this option is *set*, the message is decoded before it is passed to the external command specified by \\$print_command. If this option is *unset*, no processing will be applied to the message when printing it. The latter setting may be useful if you are using some advanced printer filter which is able to properly format e-mail messages for printing.\nAlso see \\$print_decode_weed, which controls whether headers will be weeded when this is *set*."
        },
        "print_decode_weed": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nFor `<print-message>`, when \\$print_decode is set, this further controls whether NeoMutt will weed headers."
        },
        "print_split": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nUsed in connection with the `<print-message>` function. If this option is *set*, the command specified by \\$print_command is executed once for each message which is to be printed. If this option is *unset*, the command specified by \\$print_command is executed only once, and all the messages are concatenated, with a form feed as the message separator.\nThose who use the `enscript`(1) program\\'s mail-printing mode will most likely want to *set* this option."
        },
        "prompt_after": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf you use an *external* \\$pager, setting this variable will cause NeoMutt to prompt you for a command when the pager exits rather than returning to the index menu. If *unset*, NeoMutt will return to the index menu when the external pager exits."
        },
        "query_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis specifies the command NeoMutt will use to make external address queries. The string may contain a \\\"%s\\\", which will be substituted with the query string the user types. NeoMutt will add quotes around the string substituted for \\\"%s\\\" automatically according to shell quoting rules, so you should avoid adding your own. If no \\\"%s\\\" is found in the string, NeoMutt will append the user\\'s query to the end of the string. See \\\"query\\\" (https://neomutt.org/guide/advancedusage.html#query) for more information."
        },
        "query_format": {
          "type": "string",
          "default": "%3c %t %-25.25n %-25.25a | %e",
          "description": "Type: string\nDefault: \"%3c %t %-25.25n %-25.25a | %e\"\n\nThis variable describes the format of the \\\"query\\\" menu. The following `printf(3)`-style sequences are understood:\n%a\n:    Destination address\n%c\n:    Current entry number\n%e\n:   \\* Extra information\n%n\n:    Destination name\n%t\n:    \\\"\\*\\\" if current entry is tagged, a space otherwise\n%\\>X\n:    Right justify the rest of the string and pad with \\\"X\\\"\n%\\|X\n:    Pad to the end of the line with \\\"X\\\"\n%\\*X\n:    Soft-fill with character \\\"X\\\" as pad\nFor an explanation of \\\"soft-fill\\\", see the \\$index_format documentation.\n\\* = can be optionally printed if nonzero, see the \\$status_format documentation."
        },
        "quit": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "yes",
          "description": "Type: quadoption\nDefault: yes\n\nThis variable controls whether \\\"quit\\\" and \\\"exit\\\" actually quit from NeoMutt. If this option is *set*, they do quit, if it is *unset*, they have no effect, and if it is set to *ask-yes* or *ask-no*, you are prompted for confirmation when you try to quit.\nIn order to quit from NeoMutt if this variable is *unset*, you must send the signal SIGINT to NeoMutt. This can usually be achieved by pressing CTRL-C in the terminal."
        },
        "quote_regex": {
          "type": "string",
          "format": "regex",
          "default": "^([ \\t]*[|>",
          "description": "Type: regular expression\nDefault: \"^([ \\t]*[|>:}#])+\"\n\nA regular expression used in the internal pager to determine quoted sections of text in the body of a message. Quoted text may be filtered out using the `<toggle-quoted>` command, or colored according to the \\\"color quoted\\\" family of directives.\nHigher levels of quoting may be colored differently (\\\"color quoted1\\\", \\\"color quoted2\\\", etc.). The quoting level is determined by removing the last character from the matched text and recursively reapplying the regular expression until it fails to produce a match.\nMatch detection may be overridden by the \\$smileys regular expression."
        },
        "read_inc": {
          "type": "number",
          "default": 10,
          "description": "Type: number\nDefault: 10\n\nIf set to a value greater than 0, NeoMutt will display which message it is currently on when reading a mailbox or when performing search actions such as search and limit. The message is printed after this many messages have been read or searched (e.g., if set to 25, NeoMutt will print a message when it is at message 25, and then again when it gets to message 50). This variable is meant to indicate progress when reading or searching large mailboxes which may take some time. When set to 0, only a single message will appear before the reading the mailbox.\nAlso see the \\$write_inc, \\$net_inc and \\$time_inc variables and the \\\"tuning\\\" section of the manual for performance considerations."
        },
        "read_only": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, all folders are opened in read-only mode."
        },
        "real_name": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThis variable specifies what \\\"real\\\" or \\\"personal\\\" name should be used when sending messages.\nIf not specified, then the user\\'s \\\"real name\\\" will be read from `/etc/passwd`. This option will not be used, if \\\"\\$from\\\" is set."
        },
        "recall": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-yes",
          "description": "Type: quadoption\nDefault: ask-yes\n\nControls whether or not NeoMutt recalls postponed messages when composing a new message.\nSetting this variable to *yes* is not generally useful, and thus not recommended. Note that the `<recall-message>` function can be used to manually recall postponed messages.\nAlso see \\$postponed variable."
        },
        "record": {
          "type": "string",
          "default": "~/sent",
          "description": "Type: mailbox\nDefault: \"~/sent\"\n\nThis specifies the file into which your outgoing messages should be appended. (This is meant as the primary method for saving a copy of your messages, but another way to do this is using the \\\"my_hdr\\\" command to create a \\\"Bcc:\\\" field with your email address in it.)\nThe value of *\\$record* is overridden by the \\$force_name and \\$save_name variables, and the \\\"fcc-hook\\\" command. Also see \\$copy and \\$write_bcc."
        },
        "reflow_space_quotes": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nThis option controls how quotes from format=flowed messages are displayed in the pager and when replying (with \\$text_flowed *unset*). When set, this option adds spaces after each level of quote marks, turning \\\"\\>\\>\\>foo\\\" into \\\"\\> \\> \\> foo\\\".\n**Note:** If \\$reflow_text is *unset*, this option has no effect. Also, this option does not affect replies when \\$text_flowed is *set*."
        },
        "reflow_text": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will reformat paragraphs in text/plain parts marked format=flowed. If *unset*, NeoMutt will display paragraphs unaltered from how they appear in the message body. See RFC3676 for details on the *format=flowed* format.\nAlso see \\$reflow_wrap, and \\$wrap."
        },
        "reflow_wrap": {
          "type": "number",
          "default": 78,
          "description": "Type: number\nDefault: 78\n\nThis variable controls the maximum paragraph width when reformatting text/plain parts when \\$reflow_text is *set*. When the value is 0, paragraphs will be wrapped at the terminal\\'s right margin. A positive value sets the paragraph width relative to the left margin. A negative value set the paragraph width relative to the right margin.\nBe aware that the reformatted lines of a paragraph are still subject to \\$wrap. This means if \\$reflow_wrap is 40 and \\$wrap is 30, then the paragraph gets reformatted to 40 characters a line (due to \\$reflow_wrap) and afterwards each 40-character-line is split at 30 characters (due to \\$wrap), resulting in alternating line lengths of 30 and 10 characters.\nAlso see \\$wrap."
        },
        "reply_regex": {
          "type": "string",
          "format": "regex",
          "default": "^((re|aw|sv)(\\[[0-9]+\\])*",
          "description": "Type: regular expression\nDefault: \"^((re|aw|sv)(\\[[0-9]+\\])*:[ \\t]*)*\"\n\nA regular expression used to recognize reply messages when threading and replying. The default value corresponds to the English \\\"Re:\\\", the German \\\"Aw:\\\" and the Swedish \\\"Sv:\\\"."
        },
        "reply_self": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *unset* and you are replying to a message sent by you, NeoMutt will assume that you want to reply to the recipients of that message rather than to yourself.\nAlso see the \\\"alternates\\\" command."
        },
        "reply_to": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "ask-yes",
          "description": "Type: quadoption\nDefault: ask-yes\n\nIf *set*, when replying to a message, NeoMutt will use the address listed in the Reply-to: header as the recipient of the reply. If *unset*, it will use the address in the From: header field instead. This option is useful for reading a mailing list that sets the Reply-To: header field to the list address and you want to send a private message to the author of a message."
        },
        "reply_with_xorig": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis variable provides a toggle. When active, the From: header will be extracted from the current mail\\'s \\'X-Original-To:\\' header. This setting does not have precedence over \\\"reverse_real_name\\\".\nAssuming \\'fast_reply\\' is disabled, this option will prompt the user with a prefilled From: header."
        },
        "resolve": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, the cursor in a list will be automatically advanced to the next (possibly undeleted) message/attachment/entry whenever a command that modifies the current message/attachment/entry is executed.\nExamples of such commands are tagging a message, deleting an entry, or saving an attachment."
        },
        "resume_draft_files": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, draft files (specified by `-H` on the command line) are processed similarly to when resuming a postponed message. Recipients are not prompted for; send-hooks are not evaluated; no alias expansion takes place; user-defined headers and signatures are not added to the message."
        },
        "resume_edited_draft_files": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, draft files previously edited (via `-E -H` on the command line) will have \\$resume_draft_files automatically set when they are used as a draft file again.\nThe first time a draft file is saved, NeoMutt will add a header, X-Mutt-Resume-Draft to the saved file. The next time the draft file is read in, if NeoMutt sees the header, it will set \\$resume_draft_files.\nThis option is designed to prevent multiple signatures, user-defined headers, and other processing effects from being made multiple times to the draft file."
        },
        "reverse_alias": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis variable controls whether or not NeoMutt will display the \\\"personal\\\" name from your aliases in the index menu if it finds an alias that matches the message\\'s sender. For example, if you have the following alias:\nalias juser abd30425@somewhere.net (Joe User) \nand then you receive mail which contains the following header:\nFrom: abd30425@somewhere.net \nIt would be displayed in the index menu as \\\"Joe User\\\" instead of \\\"abd30425@somewhere.net.\\\" This is useful when the person\\'s e-mail address is not human friendly."
        },
        "reverse_name": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIt may sometimes arrive that you receive mail to a certain machine, move the messages to another machine, and reply to some the messages from there. If this variable is *set*, the default *From:* line of the reply messages is built using the address where you received the messages you are replying to **if** that address matches your \\\"alternates\\\". If the variable is *unset*, or the address that would be used doesn\\'t match your \\\"alternates\\\", the *From:* line will use your address on the current machine.\nAlso see the \\\"alternates\\\" command and \\$reverse_real_name."
        },
        "reverse_real_name": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nThis variable fine-tunes the behavior of the \\$reverse_name feature.\nWhen it is *unset*, NeoMutt will remove the real name part of a matching address. This allows the use of the email address without having to also use what the sender put in the real name field.\nWhen it is *set*, NeoMutt will use the matching address as-is.\nIn either case, a missing real name will be filled in afterwards using the value of \\$real_name."
        },
        "rfc2047_parameters": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen this variable is *set*, NeoMutt will decode RFC2047-encoded MIME parameters. You want to set this variable when NeoMutt suggests you to save attachments to files named like:\n=?iso-8859-1?Q?file=5F=E4=5F991116=2Ezip?= =?utf-8?Q?z=C4=99ta.png?= \nWhen this variable is *set* interactively, the change won\\'t be active until you change folders.\nNote that this use of RFC2047\\'s encoding is explicitly prohibited by the standard, but nevertheless encountered in the wild and produced by, e.g., Outlook.\nAlso note that setting this parameter will *not* have the effect that NeoMutt *generates* this kind of encoding. Instead, NeoMutt will unconditionally use the encoding specified in RFC2231."
        },
        "save_address": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, NeoMutt will take the sender\\'s full address when choosing a default folder for saving a mail. If \\$save_name or \\$force_name is *set* too, the selection of the Fcc folder will be changed as well."
        },
        "save_empty": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *unset*, mailboxes which contain no saved messages will be removed when closed (the exception is \\$spool_file which is never removed). If *set*, mailboxes are never removed.\n**Note:** This only applies to mbox and MMDF folders, NeoMutt does not delete MH and Maildir directories."
        },
        "save_history": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nThis variable controls the size of the history (per category) saved in the \\$history_file file.\nSetting this to a value greater than \\$history is possible. However, there will never be more than \\$history entries to select from even if more are recorded in the history file."
        },
        "save_name": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis variable controls how copies of outgoing messages are saved. When *set*, a check is made to see if a mailbox specified by the recipient address exists (this is done by searching for a mailbox in the \\$folder directory with the *username* part of the recipient address). If the mailbox exists, the outgoing message will be saved to that mailbox, otherwise the message is saved to the \\$record mailbox.\nAlso see the \\$force_name variable."
        },
        "save_unsubscribed": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, info about unsubscribed newsgroups will be saved into \\\"newsrc\\\" file and into cache."
        },
        "score": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen this variable is *unset*, scoring is turned off. This can be useful to selectively disable scoring for certain folders when the \\$score_threshold_delete variable and related are used."
        },
        "score_threshold_delete": {
          "type": "number",
          "default": -1,
          "description": "Type: number\nDefault: -1\n\nMessages which have been assigned a score equal to or lower than the value of this variable are automatically marked for deletion by NeoMutt. Since NeoMutt scores are always greater than or equal to zero, the default setting of this variable will never mark a message for deletion."
        },
        "score_threshold_flag": {
          "type": "number",
          "default": 9999,
          "description": "Type: number\nDefault: 9999\n\nMessages which have been assigned a score greater than or equal to this variable\\'s value are automatically marked \\\"flagged\\\"."
        },
        "score_threshold_read": {
          "type": "number",
          "default": -1,
          "description": "Type: number\nDefault: -1\n\nMessages which have been assigned a score equal to or lower than the value of this variable are automatically marked as read by NeoMutt. Since NeoMutt scores are always greater than or equal to zero, the default setting of this variable will never mark a message read."
        },
        "search_context": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nFor the pager, this variable specifies the number of lines shown before search results. By default, search results will be top-aligned."
        },
        "send_charset": {
          "type": "string",
          "default": "us-ascii",
          "description": "Type: string list\nDefault: \"us-ascii:iso-8859-1:utf-8\"\n\nA colon-delimited list of character sets for outgoing messages. NeoMutt will use the first character set into which the text can be converted exactly. If your \\$charset is not \\\"iso-8859-1\\\" and recipients may not understand \\\"UTF-8\\\", it is advisable to include in the list an appropriate widely used standard character set (such as \\\"iso-8859-2\\\", \\\"koi8-r\\\" or \\\"iso-2022-jp\\\") either instead of or after \\\"iso-8859-1\\\".\nIn case the text can\\'t be converted into one of these exactly, NeoMutt uses \\$charset as a fallback."
        },
        "sendmail": {
          "type": "string",
          "default": "sendmail -oem -oi",
          "description": "Type: command\nDefault: \"sendmail -oem -oi\"\n\nSpecifies the program and arguments used to deliver mail sent by NeoMutt. NeoMutt expects that the specified program interprets additional arguments as recipient addresses. NeoMutt appends all recipients after adding a `--` delimiter (if not already present). Additional flags, such as for \\$use_8bit_mime, \\$use_envelope_from, \\$dsn_notify, or \\$dsn_return will be added before the delimiter.\n**See also:** \\$write_bcc."
        },
        "sendmail_wait": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nSpecifies the number of seconds to wait for the \\$sendmail process to finish before giving up and putting delivery in the background.\nNeoMutt interprets the value of this variable as follows:\n\\>0\n:   number of seconds to wait for sendmail to finish before continuing\n0\n:   wait forever for sendmail to finish\n\\<0\n:   always put sendmail in the background without waiting\nNote that if you specify a value other than 0, the output of the child process will be put in a temporary file. If there is some error, you will be informed as to where to find the output."
        },
        "shell": {
          "type": "string",
          "default": "/bin/sh",
          "description": "Type: command\nDefault: \"/bin/sh\"\n\nCommand to use when spawning a subshell. If not specified, then the user\\'s login shell from `/etc/passwd` is used."
        },
        "show_multipart_alternative": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nWhen *set* to `info`, the multipart/alternative information is shown. When *set* to `inline`, all of the alternatives are displayed. When not set, the default behavior is to show only the chosen alternative."
        },
        "show_new_news": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, news server will be asked for new newsgroups on entering the browser. Otherwise, it will be done only once for a news server. Also controls whether or not number of new articles of subscribed newsgroups will be then checked."
        },
        "show_only_unread": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, only subscribed newsgroups that contain unread articles will be displayed in browser."
        },
        "sidebar_component_depth": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nBy default the sidebar will show the mailbox\\'s path, relative to the \\$folder variable. This specifies the number of parent directories to hide from display in the sidebar. For example: If a maildir is normally displayed in the sidebar as dir1/dir2/dir3/maildir, setting `sidebar_component_depth=2` will display it as dir3/maildir, having truncated the 2 highest directories.\n**See also:** \\$sidebar_short_path"
        },
        "sidebar_delim_chars": {
          "type": "string",
          "default": "/.",
          "description": "Type: string\nDefault: \"/.\"\n\nThis contains the list of characters which you would like to treat as folder separators for displaying paths in the sidebar.\nLocal mail is often arranged in directories: \\'dir1/dir2/mailbox\\'.\nset sidebar_delim_chars='/' \nIMAP mailboxes are often named: \\'folder1.folder2.mailbox\\'.\nset sidebar_delim_chars='.' \n**See also:** \\$sidebar_short_path, \\$sidebar_folder_indent, \\$sidebar_indent_string."
        },
        "sidebar_divider_char": {
          "type": "string",
          "default": "|",
          "description": "Type: string\nDefault: \"|\"\n\nThe default is a Unicode vertical line.\nThis specifies the characters to be drawn between the sidebar (when visible) and the other NeoMutt panels. ASCII and Unicode line-drawing characters are supported.\nThe divider char can be set to an empty string for some extra space. If empty, setting the sidebar_background color may help distinguish the sidebar from other panels."
        },
        "sidebar_folder_indent": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nSet this to indent mailboxes in the sidebar.\n**See also:** \\$sidebar_short_path, \\$sidebar_indent_string, \\$sidebar_delim_chars."
        },
        "sidebar_format": {
          "type": "string",
          "default": "%D%*  %n",
          "description": "Type: string\nDefault: \"%D%*  %n\"\n\nThis variable allows you to customize the sidebar display. This string is similar to \\$index_format, but has its own set of `printf(3)`-like sequences:\n%B\n:    Name of the mailbox\n%d\n:   \\* @ Number of deleted messages in the mailbox\n%D\n:    Descriptive name of the mailbox\n%F\n:   \\* Number of flagged messages in the mailbox\n%L\n:   \\* @ Number of messages after limiting\n%n\n:    \\\"N\\\" if mailbox has new mail, \\\" \\\" (space) otherwise\n%N\n:   \\* Number of unread messages in the mailbox (seen or unseen)\n%o\n:   \\* Number of old messages in the mailbox (unread, seen)\n%r\n:   \\* Number of read messages in the mailbox (read, seen)\n%S\n:   \\* Size of mailbox (total number of messages)\n%t\n:   \\* @ Number of tagged messages in the mailbox\n%Z\n:   \\* Number of new messages in the mailbox (unread, unseen)\n%!\n:    \\\"!\\\" : one flagged message; \\\"!!\\\" : two flagged messages; \\\"n!\\\" : n flagged messages (for n \\> 2). Otherwise prints nothing.\n%\\>X\n:   Right justify the rest of the string and pad with \\\"X\\\"\n%\\|X\n:   Pad to the end of the line with \\\"X\\\"\n%\\*X\n:   Soft-fill with character \\\"X\\\" as pad\n\\* = Can be optionally printed if nonzero\n@ = Only applicable to the current folder\nIn order to use %S, %N, %F, and %!, \\$mail_check_stats must be *set*. When thus set, a suggested value for this option is \\\"%B%?F? \\[%F\\]?%\\* %?N?%N/?%S\\\"."
        },
        "sidebar_indent_string": {
          "type": "string",
          "default": "  ",
          "description": "Type: string\nDefault: \"  \"\n\nThis specifies the string that is used to indent mailboxes in the sidebar. It defaults to two spaces.\n**See also:** \\$sidebar_short_path, \\$sidebar_folder_indent, \\$sidebar_delim_chars."
        },
        "sidebar_new_mail_only": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen set, the sidebar will only display mailboxes containing new, or flagged, mail.\n**See also:** sidebar_pin, \\$sidebar_non_empty_mailbox_only."
        },
        "sidebar_next_new_wrap": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen set, the `<sidebar-next-new>` command will not stop and the end of the list of mailboxes, but wrap around to the beginning. The `<sidebar-prev-new>` command is similarly affected, wrapping around to the end of the list."
        },
        "sidebar_non_empty_mailbox_only": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen set, the sidebar will only display mailboxes that contain one or more mails.\n**See also:** \\$sidebar_new_mail_only, sidebar_pin."
        },
        "sidebar_on_right": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen set, the sidebar will appear on the right-hand side of the screen."
        },
        "sidebar_short_path": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nBy default the sidebar will show the mailbox\\'s path, relative to the \\$folder variable. Setting `sidebar_shortpath=yes` will shorten the names relative to the previous name. Here\\'s an example:"
        },
        "sidebar_sort_method": {
          "type": "string",
          "default": "order",
          "description": "Type: sort order\nDefault: order\n\nSpecifies how to sort mailbox entries in the sidebar. By default, the entries are **unsorted**. Valid values:\n\u2010 **path** (alphabetically)\n\u2010 **count** (all message count)\n\u2010 **flagged** (flagged message count)\n\u2010 **unread** (unread message count)\n\u2010 **unsorted**\nYou may optionally use the \\\"reverse-\\\" prefix to specify reverse sorting order (example: \\\"`set sidebar_sort_method=reverse-path`\\\").\nThe **alpha** and **name** values are synonyms for **path**. The **new** value is a synonym for **unread**."
        },
        "sidebar_visible": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis specifies whether or not to show sidebar. The sidebar shows a list of all your mailboxes.\n**See also:** \\$sidebar_format, \\$sidebar_width"
        },
        "sidebar_width": {
          "type": "number",
          "default": 30,
          "description": "Type: number\nDefault: 30\n\nThis controls the width of the sidebar. It is measured in screen columns. For example: sidebar_width=20 could display 20 ASCII characters, or 10 Chinese characters."
        },
        "sig_dashes": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, a line containing \\\"\\-- \\\" (note the trailing space) will be inserted before your \\$signature. It is **strongly** recommended that you not *unset* this variable unless your signature contains just your name. The reason for this is because many software packages use \\\"\\-- \\\\n\\\" to detect your signature. For example, NeoMutt has the ability to highlight the signature in a different color in the built-in pager."
        },
        "sig_on_top": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, the signature will be included before any quoted or forwarded text. It is **strongly** recommended that you do not set this variable unless you really know what you are doing, and are prepared to take some heat from netiquette guardians."
        },
        "signature": {
          "type": "string",
          "default": "~/.signature",
          "description": "Type: path\nDefault: \"~/.signature\"\n\nSpecifies the filename of your signature, which is appended to all outgoing messages. If the filename ends with a pipe (\\\"\\|\\\"), it is assumed that filename is a shell command and input should be read from its standard output."
        },
        "simple_search": {
          "type": "string",
          "default": "~f %s | ~s %s",
          "description": "Type: string\nDefault: \"~f %s | ~s %s\"\n\nSpecifies how NeoMutt should expand a simple search into a real search pattern. A simple search is one that does not contain any of the \\\"\\~\\\" pattern operators. See \\\"patterns\\\" for more information on search patterns.\nsimple_search applies to several functions, e.g. `<delete-pattern>`, `<limit>`, searching in the index, and all of the index colors.\nFor example, if you simply type \\\"joe\\\" at a search or limit prompt, NeoMutt will automatically expand it to the value specified by this variable by replacing \\\"%s\\\" with the supplied string. For the default value, \\\"joe\\\" would be expanded to: \\\"\\~f joe \\| \\~s joe\\\"."
        },
        "size_show_bytes": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, message sizes will display bytes for values less than 1 kilobyte. See formatstrings-size."
        },
        "size_show_fractions": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, message sizes will be displayed with a single decimal value for sizes from 0 to 10 kilobytes and 1 to 10 megabytes. See formatstrings-size."
        },
        "size_show_mb": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set*, message sizes will display megabytes for values greater than or equal to 1 megabyte. See formatstrings-size."
        },
        "size_units_on_left": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, message sizes units will be displayed to the left of the number. See formatstrings-size."
        },
        "sleep_time": {
          "type": "number",
          "default": 1,
          "description": "Type: number\nDefault: 1\n\nSpecifies time, in seconds, to pause while displaying certain informational messages, while moving from folder to folder and after expunging messages from the current folder. The default is to pause one second, so a value of zero for this option suppresses the pause."
        },
        "smart_wrap": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nControls the display of lines longer than the screen width in the internal pager. If *set*, long lines are wrapped at a word boundary. If *unset*, lines are simply wrapped at the screen edge. Also see the \\$markers variable."
        },
        "smileys": {
          "type": "string",
          "format": "regex",
          "default": "(>From )|(",
          "description": "Type: regular expression\nDefault: \"(>From )|(:[-^]?[][)(><}{|/DP])\"\n\nThe *pager* uses this variable to catch some common false positives of \\$quote_regex, most notably smileys and not consider a line quoted text if it also matches \\$smileys. This mostly happens at the beginning of a line."
        },
        "smime_ask_cert_label": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nThis flag controls whether you want to be asked to enter a label for a certificate about to be added to the database or not. It is *set* by default. (S/MIME only)"
        },
        "smime_ca_location": {
          "type": "string",
          "default": "",
          "description": "Type: path\nDefault: \"\"\n\nThis variable contains the name of either a directory, or a file which contains trusted certificates for use with OpenSSL. (S/MIME only)"
        },
        "smime_certificates": {
          "type": "string",
          "default": "",
          "description": "Type: path\nDefault: \"\"\n\nSince for S/MIME there is no pubring/secring as with PGP, NeoMutt has to handle storage and retrieval of keys by itself. This is very basic right now, and keys and certificates are stored in two different directories, both named as the hash-value retrieved from OpenSSL. There is an index file which contains mailbox-address keyid pairs, and which can be manually edited. This option points to the location of the certificates. (S/MIME only)"
        },
        "smime_decrypt_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis format string specifies a command which is used to decrypt `application/pkcs7-mime` attachments.\nThe OpenSSL command formats have their own set of `printf(3)`-like sequences similar to PGP\\'s:\n%f\n:   Expands to the name of a file containing a message.\n%s\n:   Expands to the name of a file containing the signature part of a `multipart/signed` attachment when verifying it.\n%k\n:   The key-pair specified with \\$smime_default_key\n%i\n:   Intermediate certificates\n%c\n:   One or more certificate IDs.\n%a\n:   The algorithm used for encryption.\n%d\n:   The message digest algorithm specified with \\$smime_sign_digest_alg.\n%C\n:   CA location: Depending on whether \\$smime_ca_location points to a directory or file, this expands to \\\"-CApath \\$smime_ca_location\\\" or \\\"-CAfile \\$smime_ca_location\\\".\nFor examples on how to configure these formats, see the `smime.rc` in the `samples/` subdirectory which has been installed on your system alongside the documentation. (S/MIME only)"
        },
        "smime_decrypt_use_default_key": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set* (default) this tells NeoMutt to use the default key for decryption. Otherwise, if managing multiple certificate-key-pairs, NeoMutt will try to use the mailbox-address to determine the key to use. It will ask you to supply a key, if it can\\'t find one. (S/MIME only)"
        },
        "smime_default_key": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThis is the default key-pair to use for S/MIME operations, and must be set to the keyid (the hash-value that OpenSSL generates) to work properly.\nIt will be used for encryption (see \\$postpone_encrypt and \\$smime_self_encrypt).\nIt will be used for decryption unless \\$smime_decrypt_use_default_key is *unset*.\nIt will also be used for signing unless \\$smime_sign_as is set.\nThe (now deprecated) *smime_self_encrypt_as* is an alias for this variable, and should no longer be used. (S/MIME only)"
        },
        "smime_encrypt_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to create encrypted S/MIME messages.\nThis is a format string, see the \\$smime_decrypt_command command for possible `printf(3)`-like sequences. (S/MIME only)\nEncrypt the message to \\$smime_default_key too. (S/MIME only)"
        },
        "smime_encrypt_with": {
          "type": "string",
          "default": "aes256",
          "description": "Type: string\nDefault: \"aes256\"\n\nThis sets the algorithm that should be used for encryption. Valid choices are \\\"aes128\\\", \\\"aes192\\\", \\\"aes256\\\", \\\"des\\\", \\\"des3\\\", \\\"rc2-40\\\", \\\"rc2-64\\\", \\\"rc2-128\\\". (S/MIME only)"
        },
        "smime_get_cert_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to extract X509 certificates from a PKCS7 structure.\nThis is a format string, see the \\$smime_decrypt_command command for possible `printf(3)`-like sequences. (S/MIME only)"
        },
        "smime_get_cert_email_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to extract the mail address(es) used for storing X509 certificates, and for verification purposes (to check whether the certificate was issued for the sender\\'s mailbox).\nThis is a format string, see the \\$smime_decrypt_command command for possible `printf(3)`-like sequences. (S/MIME only)"
        },
        "smime_get_signer_cert_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to extract only the signers X509 certificate from a S/MIME signature, so that the certificate\\'s owner may get compared to the email\\'s \\\"From:\\\" field.\nThis is a format string, see the \\$smime_decrypt_command command for possible `printf(3)`-like sequences. (S/MIME only)"
        },
        "smime_import_cert_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to import a certificate via smime_keys.\nThis is a format string, see the \\$smime_decrypt_command command for possible `printf(3)`-like sequences. NOTE: %c and %k will default to \\$smime_sign_as if set, otherwise \\$smime_default_key. (S/MIME only)"
        },
        "smime_is_default": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThe default behavior of NeoMutt is to use PGP on all auto-sign/encryption operations. To override and to use OpenSSL instead this must be *set*. However, this has no effect while replying, since NeoMutt will automatically select the same application that was used to sign/encrypt the original message. (Note that this variable can be overridden by unsetting \\$crypt_auto_smime.) (S/MIME only)"
        },
        "smime_keys": {
          "type": "string",
          "default": "",
          "description": "Type: path\nDefault: \"\"\n\nSince for S/MIME there is no pubring/secring as with PGP, NeoMutt has to handle storage and retrieval of keys/certs by itself. This is very basic right now, and stores keys and certificates in two different directories, both named as the hash-value retrieved from OpenSSL. There is an index file which contains mailbox-address keyid pair, and which can be manually edited. This option points to the location of the private keys. (S/MIME only)"
        },
        "smime_pk7out_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to extract PKCS7 structures of S/MIME signatures, in order to extract the public X509 certificate(s).\nThis is a format string, see the \\$smime_decrypt_command command for possible `printf(3)`-like sequences. (S/MIME only)"
        },
        "smime_self_encrypt": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, S/MIME encrypted messages will also be encrypted using the certificate in \\$smime_default_key. (S/MIME only)"
        },
        "smime_sign_as": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nIf you have a separate key to use for signing, you should set this to the signing key. Most people will only need to set \\$smime_default_key. (S/MIME only)"
        },
        "smime_sign_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to created S/MIME signatures of type `multipart/signed`, which can be read by all mail clients.\nThis is a format string, see the \\$smime_decrypt_command command for possible `printf(3)`-like sequences. (S/MIME only)"
        },
        "smime_sign_digest_alg": {
          "type": "string",
          "default": "sha256",
          "description": "Type: string\nDefault: \"sha256\"\n\nThis sets the algorithm that should be used for the signature message digest. Valid choices are \\\"md5\\\", \\\"sha1\\\", \\\"sha224\\\", \\\"sha256\\\", \\\"sha384\\\", \\\"sha512\\\". (S/MIME only)"
        },
        "smime_timeout": {
          "type": "number",
          "default": 300,
          "description": "Type: number\nDefault: 300\n\nThe number of seconds after which a cached passphrase will expire if not used. (S/MIME only)"
        },
        "smime_verify_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to verify S/MIME signatures of type `multipart/signed`.\nThis is a format string, see the \\$smime_decrypt_command command for possible `printf(3)`-like sequences. (S/MIME only)"
        },
        "smime_verify_opaque_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThis command is used to verify S/MIME signatures of type `application/pkcs7-mime`.\nThis is a format string, see the \\$smime_decrypt_command command for possible `printf(3)`-like sequences. (S/MIME only)"
        },
        "smtp_authenticators": {
          "type": "string",
          "default": "",
          "description": "Type: string list\nDefault: \"\"\n\nThis is a colon-separated list of authentication methods NeoMutt may attempt to use to log in to an SMTP server, in the order NeoMutt should try them. Authentication methods are any SASL mechanism, e.g. \\\"plain\\\", \\\"digest-md5\\\", \\\"gssapi\\\" or \\\"cram-md5\\\". This option is case-insensitive. If it is \\\"unset\\\" (the default) NeoMutt will try all available methods, in order from most-secure to least-secure. Support for the \\\"plain\\\" mechanism is bundled; other mechanisms are provided by an external SASL library (look for \\'+sasl\\' in the output of neomutt -v).\nExample:\nset smtp_authenticators=\"digest-md5:cram-md5\" "
        },
        "smtp_oauth_refresh_command": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nThe command to run to generate an OAUTH refresh token for authorizing your connection to your SMTP server. This command will be run on every connection attempt that uses the OAUTHBEARER or XOAUTH2 authentication mechanisms. See \\\"oauth\\\" for details."
        },
        "smtp_pass": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nSpecifies the password for your SMTP account. If *unset*, NeoMutt will prompt you for your password when you first send mail via SMTP. See \\$smtp_url to configure NeoMutt to send mail via SMTP.\n**Warning**: you should only use this option when you are on a fairly secure machine, because the superuser can read your neomuttrc even if you are the only one who can read the file."
        },
        "smtp_url": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nDefines the SMTP smarthost where sent messages should relayed for delivery. This should take the form of an SMTP URL, e.g.:\nsmtp[s]://[user[:pass]@]host[:port] \nwhere \\\"\\[\\...\\]\\\" denotes an optional part. Setting this variable overrides the value of the \\$sendmail variable.\nAlso see \\$write_bcc."
        },
        "smtp_user": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nThe username for the SMTP server.\nThis variable defaults to your user name on the local machine."
        },
        "socket_timeout": {
          "type": "number",
          "default": 30,
          "description": "Type: number\nDefault: 30\n\nCauses NeoMutt to timeout any socket connect/read/write operation (for IMAP, POP or SMTP) after this many seconds. A negative value causes NeoMutt to wait indefinitely."
        },
        "sort": {
          "type": "string",
          "default": "date",
          "description": "Type: sort order\nDefault: date\n\nSpecifies how to sort messages in the \\\"index\\\" menu. Valid values are:\n\u2010 date\n\u2010 date-received\n\u2010 from\n\u2010 score\n\u2010 size\n\u2010 spam\n\u2010 subject\n\u2010 threads\n\u2010 to\n\u2010 unsorted\nYou may optionally use the \\\"reverse-\\\" prefix to specify reverse sorting order, or the \\\"last-\\\" prefix to sort threads based on the corresponding attribute of the last descendant rather than the thread root. If both prefixes are in use, \\\"reverse-\\\" must come before \\\"last-\\\". The \\\"last-\\\" prefix has no effect on a flat view.\nAny ties in the primary sort are broken by \\$sort_aux. When \\$use_threads is \\\"threads\\\" or \\\"reverse\\\", \\$sort controls the sorting between threads, and \\$sort_aux controls the sorting within a thread.\nThe \\\"date-sent\\\" value is a synonym for \\\"date\\\". The \\\"mailbox-order\\\" value is a synonym for \\\"unsorted\\\".\nThe values of \\\"threads\\\" and \\\"reverse-threads\\\" are legacy options, which cause the value of `$sort_aux` to also control sorting between threads, and they may not be used with the \\\"last-\\\" prefix. The preferred way to enable a threaded view is via `$use_threads`. This variable can also be set via the `<sort-mailbox>` and `<sort-reverse>` functions.\nNote: When \\$use_threads is \\\"threads\\\", the last thread sorts to the bottom; when it is \\\"reversed\\\", the last thread sorts to the top. The use of \\\"reverse-\\\" in \\$sort swaps which end the last thread will sort to.\nSee the \\\"Use Threads Feature\\\" section for further explanation and examples, https://neomutt.org/feature/use-threads"
        },
        "sort_alias": {
          "type": "string",
          "default": "alias",
          "description": "Type: sort order\nDefault: alias\n\nSpecifies how the entries in the \\\"alias\\\" menu are sorted. The following are legal values:\n\u2010 address (sort alphabetically by email address)\n\u2010 alias (sort alphabetically by alias name)\n\u2010 unsorted (leave in order specified in .neomuttrc)\nNote: This also affects the entries of the address query menu, thus potentially overruling the order of entries as generated by \\$query_command."
        },
        "sort_aux": {
          "type": "string",
          "default": "date",
          "description": "Type: sort order\nDefault: date\n\nThis provides a secondary sort for messages in the \\\"index\\\" menu, used when the \\$sort value is equal for two messages.\nWhen sorting by threads, this variable controls how subthreads are sorted within a single thread (for the order between threads, see \\$sort). This can be set to any value that \\$sort can, including with the use of \\\"reverse-\\\" and \\\"last-\\\" prefixes, except for variations using \\\"threads\\\" (in that case, NeoMutt will just use \\\"date\\\"). For instance,\nset sort_aux=last-date-received \nwould mean that if a new message is received in a thread, that subthread becomes the last one displayed (or the first, if you have \\\"`set use_threads=reverse`\\\".) When using \\$use_threads, it is more common to use \\\"last-\\\" with \\$sort and not with \\$sort_aux.\nSee the \\\"Use Threads Feature\\\" section for further explanation and examples, https://neomutt.org/feature/use-threads"
        },
        "sort_browser": {
          "type": "string",
          "default": "alpha",
          "description": "Type: sort order\nDefault: alpha\n\nSpecifies how to sort entries in the file browser. By default, the entries are sorted alphabetically. Valid values:\n\u2010 alpha (alphabetically)\n\u2010 count (all message count)\n\u2010 date\n\u2010 desc (description)\n\u2010 new (new message count)\n\u2010 size\n\u2010 unsorted\nYou may optionally use the \\\"reverse-\\\" prefix to specify reverse sorting order (example: \\\"`set sort_browser=reverse-date`\\\").\nThe \\\"unread\\\" value is a synonym for \\\"new\\\"."
        },
        "sort_re": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nThis variable is only useful when sorting by threads with \\$strict_threads *unset*. In that case, it changes the heuristic mutt uses to thread messages by subject. With \\$sort_re *set*, mutt will only attach a message as the child of another message by subject if the subject of the child message starts with a substring matching the setting of \\$reply_regex. With \\$sort_re *unset*, mutt will attach the message whether or not this is the case, as long as the non-\\$reply_regex parts of both messages are identical."
        },
        "spam_separator": {
          "type": "string",
          "default": ",",
          "description": "Type: string\nDefault: \",\"\n\nThis variable controls what happens when multiple spam headers are matched: if *unset*, each successive header will overwrite any previous matches value for the spam label. If *set*, each successive match will append to the previous, using this variable\\'s value as a separator."
        },
        "spool_file": {
          "type": "string",
          "default": "",
          "description": "Type: mailbox\nDefault: \"\"\n\nIf your spool mailbox is in a non-default place where NeoMutt can\\'t find it, you can specify its location with this variable. The description from \\\"named-mailboxes\\\" or \\\"virtual-mailboxes\\\" may be used for the spool_file.\nIf not specified, then the environment variables `$MAIL` and `$MAILDIR` will be checked."
        },
        "ssl_ciphers": {
          "type": "string",
          "default": "",
          "description": "Type: string\nDefault: \"\"\n\nContains a colon-separated list of ciphers to use when using SSL. For OpenSSL, see ciphers(1) for the syntax of the string.\nFor GnuTLS, this option will be used in place of \\\"NORMAL\\\" at the start of the priority string. See gnutls_priority_init(3) for the syntax and more details. (Note: GnuTLS version 2.1.7 or higher is required.)"
        },
        "ssl_client_cert": {
          "type": "string",
          "default": "",
          "description": "Type: path\nDefault: \"\"\n\nThe file containing a client certificate and its associated private key."
        },
        "ssl_force_tls": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf this variable is *set*, NeoMutt will require that all connections to remote servers be encrypted. Furthermore it will attempt to negotiate TLS even if the server does not advertise the capability, since it would otherwise have to abort the connection anyway. This option supersedes \\$ssl_starttls."
        },
        "ssl_starttls": {
          "type": "string",
          "enum": [
            "ask-yes",
            "yes",
            "ask-no",
            "no"
          ],
          "default": "yes",
          "description": "Type: quadoption\nDefault: yes\n\nIf *set* (the default), NeoMutt will attempt to use `STARTTLS` on servers advertising the capability. When *unset*, NeoMutt will not attempt to use `STARTTLS` regardless of the server\\'s capabilities.\n**Note** that `STARTTLS` is subject to many kinds of attacks, including the ability of a machine-in-the-middle to suppress the advertising of support. Setting \\$ssl_force_tls is recommended if you rely on `STARTTLS`."
        },
        "ssl_use_sslv2": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set* , NeoMutt will use SSLv2 when communicating with servers that request it. **N.B. As of 2011, SSLv2 is considered insecure, and using** is inadvisable. See https://tools.ietf.org/html/rfc6176 (OpenSSL only)"
        },
        "ssl_use_sslv3": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set* , NeoMutt will use SSLv3 when communicating with servers that request it. **N.B. As of 2015, SSLv3 is considered insecure, and using** it is inadvisable. See https://tools.ietf.org/html/rfc7525"
        },
        "ssl_use_system_certs": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf set to *yes*, NeoMutt will use CA certificates in the system-wide certificate store when checking if a server certificate is signed by a trusted CA. (OpenSSL only)"
        },
        "ssl_use_tlsv1": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set* , NeoMutt will use TLSv1.0 when communicating with servers that request it. **N.B. As of 2015, TLSv1.0 is considered insecure, and using** it is inadvisable. See https://tools.ietf.org/html/rfc7525"
        },
        "ssl_use_tlsv1_1": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set* , NeoMutt will use TLSv1.1 when communicating with servers that request it. **N.B. As of 2015, TLSv1.1 is considered insecure, and using** it is inadvisable. See https://tools.ietf.org/html/rfc7525"
        },
        "ssl_use_tlsv1_2": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set* , NeoMutt will use TLSv1.2 when communicating with servers that request it."
        },
        "ssl_use_tlsv1_3": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set* , NeoMutt will use TLSv1.3 when communicating with servers that request it."
        },
        "ssl_verify_dates": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set* (the default), NeoMutt will not automatically accept a server certificate that is either not yet valid or already expired. You should only unset this for particular known hosts, using the `<account-hook>` function."
        },
        "ssl_verify_host": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nIf *set* (the default), NeoMutt will not automatically accept a server certificate whose host name does not match the host used in your folder URL. You should only unset this for particular known hosts, using the `<account-hook>` function."
        },
        "ssl_verify_partial_chains": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis option should not be changed from the default unless you understand what you are doing.\nSetting this variable to *yes* will permit verifying partial certification chains, i. e. a certificate chain where not the root, but an intermediate certificate CA, or the host certificate, are marked trusted (in \\$certificate_file), without marking the root signing CA as trusted.\n(OpenSSL 1.0.2b and newer only)."
        },
        "status_chars": {
          "type": "string",
          "default": "-*%A",
          "description": "Type: character string\nDefault: \"-*%A\"\n\nControls the characters used by the \\\"%r\\\" indicator in \\$status_format.\n**Character**\n:   **Default** **Description**\n1\n:   \\- Mailbox is unchanged\n2\n:   \\* Mailbox has been changed and needs to be resynchronized\n3\n:   \\% Mailbox is read-only, or will not be written when exiting. (You can toggle whether to write changes to a mailbox with the `<toggle-write>` operation, bound by default to \\\"%\\\")\n4\n:   A Folder opened in attach-message mode. (Certain operations like composing a new mail, replying, forwarding, etc. are not permitted in this mode)"
        },
        "status_format": {
          "type": "string",
          "default": "-%r-NeoMutt",
          "description": "Type: string\nDefault: \"-%r-NeoMutt: %D [Msgs:%?M?%M/?%m%?n? New:%n?%?o? Old:%o?%?d? Del:%d?%?F? Flag:%F?%?t? Tag:%t?%?p? Post:%p?%?b? Inc:%b?%?l? %l?]---(%?T?%T/?%s/%S)-%>-(%P)---\"\n\nControls the format of the status line displayed in the \\\"index\\\" menu. This string is similar to \\$index_format, but has its own set of `printf(3)`-like sequences:\n%b\n:   \\* Number of mailboxes with new mail\n%d\n:   \\* Number of deleted messages\n%D\n:    Description of the mailbox\n%f\n:    The full pathname of the current mailbox\n%F\n:   \\* Number of flagged messages\n%h\n:    Local hostname\n%l\n:   \\* Size (in bytes) of the current mailbox (see formatstrings-size)\n%L\n:   \\* Size (in bytes) of the messages shown (i.e., which match the current limit) (see formatstrings-size)\n%m\n:   \\* The number of messages in the mailbox\n%M\n:   \\* The number of messages shown (i.e., which match the current limit)\n%n\n:   \\* Number of new messages in the mailbox (unread, unseen)\n%o\n:   \\* Number of old messages in the mailbox (unread, seen)\n%p\n:   \\* Number of postponed messages\n%P\n:    Percentage of the way through the index\n%r\n:    Modified/read-only/won\\'t-write/attach-message indicator, According to \\$status_chars\n%R\n:   \\* Number of read messages in the mailbox (read, seen)\n%s\n:    Current sorting mode (\\$sort)\n%S\n:    Current aux sorting method (\\$sort_aux)\n%t\n:   \\* Number of tagged messages in the mailbox\n%T\n:   \\* Current threading mode (\\$use_threads)\n%u\n:   \\* Number of unread messages in the mailbox (seen or unseen)\n%v\n:    NeoMutt version string\n%V\n:   \\* Currently active limit pattern, if any\n%\\>X\n:    Right justify the rest of the string and pad with \\\"X\\\"\n%\\|X\n:    Pad to the end of the line with \\\"X\\\"\n%\\*X\n:    Soft-fill with character \\\"X\\\" as pad\nFor an explanation of \\\"soft-fill\\\", see the \\$index_format documentation.\n\\* = can be optionally printed if nonzero\nSome of the above sequences can be used to optionally print a string if their value is nonzero. For example, you may only want to see the number of flagged messages if such messages exist, since zero is not particularly meaningful. To optionally print a string based upon one of the above sequences, the following construct is used:\n`%?<sequence_char>?<optional_string>?`\nwhere *sequence_char* is a character from the table above, and *optional_string* is the string you would like printed if *sequence_char* is nonzero. *optional_string* **may** contain other sequences as well as normal text, but you may **not** nest optional strings.\nHere is an example illustrating how to optionally print the number of new messages in a mailbox:\n`%?n?%n new messages.?`\nYou can also switch between two strings using the following construct:\n`%?<sequence_char>?<if_string>&<else_string>?`\nIf the value of *sequence_char* is non-zero, *if_string* will be expanded, otherwise *else_string* will be expanded.\nAs another example, here is how to show either \\$sort and \\$sort_aux or \\$use_threads and \\$sort, based on whether threads are enabled with \\$use_threads:\n`%?T?%s/%S&%T/%s?`\nYou can force the result of any `printf(3)`-like sequence to be lowercase by prefixing the sequence character with an underscore (\\\"\\_\\\") sign. For example, if you want to display the local hostname in lowercase, you would use: \\\"`%_h`\\\".\nIf you prefix the sequence character with a colon (\\\":\\\") character, NeoMutt will replace any dots in the expansion by underscores. This might be helpful with IMAP folders that don\\'t like dots in folder names."
        },
        "status_on_top": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nSetting this variable causes the \\\"status bar\\\" to be displayed on the first line of the screen rather than near the bottom. If \\$help is *set* too, it\\'ll be placed at the bottom."
        },
        "strict_threads": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, threading will only make use of the \\\"In-Reply-To\\\" and \\\"References:\\\" fields when you \\$sort by message threads. By default, messages with the same subject are grouped together in \\\"pseudo threads.\\\". This may not always be desirable, such as in a personal mailbox where you might have several unrelated messages with the subjects like \\\"hi\\\" which will get grouped together. See also \\$sort_re for a less drastic way of controlling this behavior."
        },
        "suspend": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *unset*, NeoMutt won\\'t stop when the user presses the terminal\\'s *susp* key, usually \\\"\\^Z\\\". This is useful if you run NeoMutt inside an xterm using a command like \\\"`xterm -e neomutt`\\\".\nOn startup NeoMutt tries to detect if it is the process session leader. If so, the default of suspend is \\\"no\\\" otherwise \\\"yes\\\". This default covers the above mentioned use case of \\\"`xterm -e neomutt`\\\"."
        },
        "text_flowed": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will generate \\\"format=flowed\\\" bodies with a content type of \\\"`text/plain; format=flowed`\\\". This format is easier to handle for some mailing software, and generally just looks like ordinary text. To actually make use of this format\\'s features, you\\'ll need support in your editor.\nThe option only controls newly composed messages. Postponed messages, resent messages, and draft messages (via -H on the command line) will use the content-type of the source message.\nNote that \\$indent_string is ignored when this option is *set*."
        },
        "thorough_search": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nAffects the `~b`, `~B`, and `~h` search operations described in section \\\"patterns\\\". If *set*, the headers and body/attachments of messages to be searched are decoded before searching. If *unset*, messages are searched as they appear in the folder.\nUsers searching attachments or for non-ASCII characters should *set* this value because decoding also includes MIME parsing/decoding and possible character set conversions. Otherwise NeoMutt will attempt to match against the raw message received (for example quoted-printable encoded or with encoded headers) which may lead to incorrect search results."
        },
        "thread_received": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf \\$strict_threads is *unset*, then messages may also be grouped by subject. Unlike threading by \\\"In-Reply-To:\\\" and \\\"References:\\\" header, grouping by subject does not imply a parent-child relation between two messages.\nTo determine the ancestry between messages grouped by subject, Neomutt uses their date: only newer messages can be descendants of older ones.\nWhen \\$thread_received is *set*, NeoMutt uses the date received rather than the date sent when comparing messages for the date.\nSee also \\$strict_threads, and \\$sort_re."
        },
        "tilde": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, the internal-pager will pad blank lines to the bottom of the screen with a tilde (\\\"\\~\\\")."
        },
        "time_inc": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nAlong with \\$read_inc, \\$write_inc, and \\$net_inc, this variable controls the frequency with which progress updates are displayed. It suppresses updates less than \\$time_inc milliseconds apart. This can improve throughput on systems with slow terminals, or when running NeoMutt on a remote system.\nAlso see the \\\"tuning\\\" section of the manual for performance considerations."
        },
        "timeout": {
          "type": "number",
          "default": 600,
          "description": "Type: number\nDefault: 600\n\nWhen NeoMutt is waiting for user input either idling in menus or in an interactive prompt, NeoMutt would block until input is present. Depending on the context, this would prevent certain operations from working, like checking for new mail or keeping an IMAP connection alive.\nThis variable controls how many seconds NeoMutt will at most wait until it aborts waiting for input, performs these operations and continues to wait for input.\nA value of zero or less will cause NeoMutt to never time out."
        },
        "tmp_dir": {
          "type": "string",
          "default": "/tmp",
          "description": "Type: path\nDefault: \"/tmp\"\n\nThis variable allows you to specify where NeoMutt will place its temporary files needed for displaying and composing messages.\nIf this variable is not set, the environment variable `$TMPDIR` is used. Failing that, then \\\"`/tmp`\\\" is used."
        },
        "to_chars": {
          "type": "string",
          "default": " +TCFLR",
          "description": "Type: character string\nDefault: \" +TCFLR\"\n\nControls the character used to indicate mail addressed to you.\n**Character**\n:   **Default** **Description**\n1\n:   \\<space\\> The mail is *not* addressed to your address.\n2\n:   \\+ You are the only recipient of the message.\n3\n:   T Your address appears in the \\\"To:\\\" header field, but you are not the only recipient of the message.\n4\n:   C Your address is specified in the \\\"Cc:\\\" header field, but you are not the only recipient.\n5\n:   F Indicates the mail that was sent by *you*.\n6\n:   L Indicates the mail was sent to a mailing-list you subscribe to.\n7\n:   R Your address appears in the \\\"Reply-To:\\\" header field but none of the above applies."
        },
        "toggle_quoted_show_levels": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nQuoted text may be filtered out using the `<toggle-quoted>` command. If set to a number greater than 0, then the `<toggle-quoted>` command will only filter out quote levels above this number."
        },
        "trash": {
          "type": "string",
          "default": "",
          "description": "Type: mailbox\nDefault: \"\"\n\nIf set, this variable specifies the path of the trash folder where the mails marked for deletion will be moved, instead of being irremediably purged.\nNOTE: When you delete a message in the trash folder, it is really deleted, so that you have a way to clean the trash."
        },
        "ts_enabled": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nControls whether NeoMutt tries to set the terminal status line and icon name. Most terminal emulators emulate the status line in the window title."
        },
        "ts_icon_format": {
          "type": "string",
          "default": "M%?n?AIL&ail?",
          "description": "Type: string\nDefault: \"M%?n?AIL&ail?\"\n\nControls the format of the icon title, as long as \\\"\\$ts_enabled\\\" is set. This string is identical in formatting to the one used by \\\"\\$status_format\\\"."
        },
        "ts_status_format": {
          "type": "string",
          "default": "NeoMutt with %?m?%m messages&no messages?%?n? [%n NEW]?",
          "description": "Type: string\nDefault: \"NeoMutt with %?m?%m messages&no messages?%?n? [%n NEW]?\"\n\nControls the format of the terminal status line (or window title), provided that \\\"\\$ts_enabled\\\" has been set. This string is identical in formatting to the one used by \\\"\\$status_format\\\"."
        },
        "tunnel": {
          "type": "string",
          "default": "",
          "description": "Type: command\nDefault: \"\"\n\nSetting this variable will cause NeoMutt to open a pipe to a command instead of a raw socket. You may be able to use this to set up preauthenticated connections to your IMAP/POP3/SMTP server. Example:\nset tunnel=\"ssh -q mailhost.net /usr/local/libexec/imapd\" \nNote: For this example to work you must be able to log in to the remote machine without having to enter a password.\nWhen set, NeoMutt uses the tunnel for all remote connections. Please see \\\"account-hook\\\" in the manual for how to use different tunnel commands per connection."
        },
        "tunnel_is_secure": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will assume the \\$tunnel connection does not need STARTTLS to be enabled. It will also allow IMAP PREAUTH server responses inside a tunnel to proceed. This is appropriate if \\$tunnel uses ssh or directly invokes the server locally.\nWhen *unset*, NeoMutt will negotiate STARTTLS according to the ssl_starttls and ssl_force_tls variables. If ssl_force_tls is set, NeoMutt will abort connecting if an IMAP server responds with PREAUTH. This setting is appropriate if \\$tunnel does not provide security and could be tampered with by attackers."
        },
        "uncollapse_jump": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will jump to the next unread message, if any, when the current thread is *un*collapsed."
        },
        "uncollapse_new": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will automatically uncollapse any collapsed thread that receives a new message. When *unset*, collapsed threads will remain collapsed. the presence of the new message will still affect index sorting, though."
        },
        "use_8bit_mime": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\n**Warning:** do not set this variable unless you are using a version of sendmail which supports the `-B8BITMIME` flag (such as sendmail 8.8.x) or you may not be able to send mail.\nWhen *set*, NeoMutt will invoke \\$sendmail with the `-B8BITMIME` flag when sending 8-bit messages to enable ESMTP negotiation."
        },
        "use_domain": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will qualify all local addresses (ones without the \\\"@host\\\" portion) with the value of \\$hostname. If *unset*, no addresses will be qualified."
        },
        "use_envelope_from": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will set the *envelope* sender of the message. If \\$envelope_from_address is *set*, it will be used as the sender address. If *unset*, NeoMutt will attempt to derive the sender from the \\\"From:\\\" header.\nNote that this information is passed to sendmail command using the `-f` command line switch. Therefore setting this option is not useful if the \\$sendmail variable already contains `-f` or if the executable pointed to by \\$sendmail doesn\\'t support the `-f` switch."
        },
        "use_from": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will generate the \\\"From:\\\" header field when sending messages. If *unset*, no \\\"From:\\\" header field will be generated unless the user explicitly sets one using the \\\"my_hdr\\\" command."
        },
        "use_ipv6": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will look for IPv6 addresses of hosts it tries to contact. If this option is *unset*, NeoMutt will restrict itself to IPv4 addresses. Normally, the default should work."
        },
        "use_threads": {
          "type": "string",
          "enum": [
            "flat",
            "threads",
            "reverse"
          ],
          "default": "unset",
          "description": "Type: enumeration\nDefault: unset\n\nThe style of threading used in the index. May be one of \\\"flat\\\" (no threading), \\\"threads\\\" (threaded, with subthreads below root message) or \\\"reverse\\\" (threaded, with subthreads above root message). For convenience, the value \\\"yes\\\" is a synonym for \\\"threads\\\", and \\\"no\\\" is a synonym for \\\"flat\\\".\nIf this variable is never set, then `$sort` controls whether threading is used, `$sort_aux` controls both the sorting of threads and subthreads, and using `<sort-mailbox>` to select threads affects only `$sort`. Once this variable is set, attempting to set `$sort` to a value using \\\"threads\\\" will warn, the value of `$sort` controls the sorting between threads while `$sort_aux` controls sorting within a thread, and `<sort-mailbox>` toggles `$use_threads`.\nExample:\nset use_threads=yes \nSee the \\\"Use Threads Feature\\\" section for further explanation and examples."
        },
        "user_agent": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nWhen *set*, NeoMutt will add a \\\"User-Agent:\\\" header to outgoing messages, indicating which version of NeoMutt was used for composing them."
        },
        "virtual_spool_file": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nThis command is now unnecessary. \\$spool_file has been extended to support mailbox descriptions as a value.\nWhen *set*, NeoMutt will use the first defined virtual mailbox (see virtual-mailboxes) as a spool file."
        },
        "wait_key": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nControls whether NeoMutt will ask you to press a key after an external command has been invoked by these functions: `<shell-escape>`, `<pipe-message>`, `<pipe-entry>`, `<print-message>`, and `<print-entry>` commands.\nIt is also used when viewing attachments with \\\"auto_view\\\", provided that the corresponding mailcap entry has a *needsterminal* flag, and the external program is interactive.\nWhen *set*, NeoMutt will always ask for a key. When *unset*, NeoMutt will wait for a key only if the external command returned a non-zero status."
        },
        "weed": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nWhen *set*, NeoMutt will weed headers when displaying, forwarding, or replying to messages.\nAlso see \\$copy_decode_weed, \\$pipe_decode_weed, \\$print_decode_weed."
        },
        "wrap": {
          "type": "number",
          "default": 0,
          "description": "Type: number\nDefault: 0\n\nWhen set to a positive value, NeoMutt will wrap text at \\$wrap characters. When set to a negative value, NeoMutt will wrap text so that there are \\$wrap characters of empty space on the right side of the terminal. Setting it to zero makes NeoMutt wrap at the terminal width.\nAlso see \\$reflow_wrap."
        },
        "wrap_headers": {
          "type": "number",
          "default": 78,
          "description": "Type: number\nDefault: 78\n\nThis option specifies the number of characters to use for wrapping an outgoing message\\'s headers. Allowed values are between 78 and 998 inclusive.\n**Note:** This option usually shouldn\\'t be changed. RFC5233 recommends a line length of 78 (the default), so **please only change** this setting when you know what you\\'re doing."
        },
        "wrap_search": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "yes",
          "description": "Type: boolean\nDefault: yes\n\nControls whether searches wrap around the end.\nWhen *set*, searches will wrap around the first (or last) item. When *unset*, incremental searches will not wrap."
        },
        "write_bcc": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nControls whether NeoMutt writes out the \\\"Bcc:\\\" header when preparing messages to be sent. Some MTAs, such as Exim and Courier, do not strip the \\\"Bcc:\\\" header; so it is advisable to leave this unset unless you have a particular need for the header to be in the sent message.\nIf NeoMutt is set to deliver directly via SMTP(see \\$smtp_url), this option does nothing: NeoMutt will never write out the \\\"Bcc:\\\" header in this case.\nNote this option only affects the sending of messages. Fcc\\'ed copies of a message will always contain the \\\"Bcc:\\\" header if one exists."
        },
        "write_inc": {
          "type": "number",
          "default": 10,
          "description": "Type: number\nDefault: 10\n\nWhen writing a mailbox, a message will be printed every \\$write_inc messages to indicate progress. If set to 0, only a single message will be displayed before writing a mailbox.\nAlso see the \\$read_inc, \\$net_inc and \\$time_inc variables and the \\\"tuning\\\" section of the manual for performance considerations."
        },
        "x_comment_to": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ],
          "default": "no",
          "description": "Type: boolean\nDefault: no\n\nIf *set*, NeoMutt will add \\\"X-Comment-To:\\\" field (that contains full name of original article author) to article that followuped to newsgroup."
        }
      },
      "patternProperties": {
        "my_\\w+": {}
      }
    },
    "unset": {
      "description": "```neomuttrc\nset { [ no | inv | & | ? ]variable } [ ... ]\nset { variable=value | variable+=increment | variable-=decrement } [ ... ]\nunset variable  [ variable ... ]\nreset variable  [ variable ... ]\ntoggle variable [ variable ... ]\nset variable ?\n```\nThese commands are used to set and manipulate configuration *variable*s.NeoMutt knows four basic types of *variable*s: boolean, number, string, string list and quadoption. Boolean *variable*s can be **set** (true), **unset** (false), or **toggle**d. Number *variable*s can be assigned a positive integer *value*. Value of number *variable*s can be incremented \\\"**+=**\\\" and decremented \\\"**-=**\\\". String list *variable*s use \\\"**+=**\\\" for appending increment to the string list and \\\"**-=**\\\" for removal decrement from the string list.String *variable*s consist of any number of printable characters and must be enclosed in quotes if they contain spaces or tabs. You may also use the escape sequences \"**\\\\n**\" and \"**\\\\t**\" for newline and tab, respectively. Content of a string *variable*s can be extended using \\\"**+=**\\\"Quadoption *variable*s are used to control whether or not to be prompted for certain actions, or to specify a default action. A *value* of **yes** will cause the action to be carried out automatically as if you had answered \"yes\" to the question. Similarly, a *value* of **no** will cause the action to be carried out as if you had answered \"no\". A *value* of **ask-yes** will cause a prompt with a default answer of \"yes\" and **ask-no** will provide a default answer of \"no\".The **toggle** command automatically prepends the \"**inv**\" prefix to all specified *variable*s. The **unset** command automatically prepends the \"**no**\" prefix to all specified *variable*s. If you use the command **set** and prefix the *variable* with \"**&**\" this has the same behavior as the **reset** command.The **reset** command resets all given *variable*s to the compile time defaults. With the **reset** command there exists the special *variable* **all**, which allows you to reset all *variable*s to their system defaults.Using the \\<**enter-command**\\> function, you can query the *value* of a *variable* by suffixing the name of the *variable* with a question mark: \\\":**set**\u00a0allow_8bit**?**\\\". The old prefix query syntax (\\\":**set**\u00a0**?**allow_8bit\\\") is also still supported."
    },
    "reset": {
      "description": "```neomuttrc\nset { [ no | inv | & | ? ]variable } [ ... ]\nset { variable=value | variable+=increment | variable-=decrement } [ ... ]\nunset variable  [ variable ... ]\nreset variable  [ variable ... ]\ntoggle variable [ variable ... ]\nset variable ?\n```\nThese commands are used to set and manipulate configuration *variable*s.NeoMutt knows four basic types of *variable*s: boolean, number, string, string list and quadoption. Boolean *variable*s can be **set** (true), **unset** (false), or **toggle**d. Number *variable*s can be assigned a positive integer *value*. Value of number *variable*s can be incremented \\\"**+=**\\\" and decremented \\\"**-=**\\\". String list *variable*s use \\\"**+=**\\\" for appending increment to the string list and \\\"**-=**\\\" for removal decrement from the string list.String *variable*s consist of any number of printable characters and must be enclosed in quotes if they contain spaces or tabs. You may also use the escape sequences \"**\\\\n**\" and \"**\\\\t**\" for newline and tab, respectively. Content of a string *variable*s can be extended using \\\"**+=**\\\"Quadoption *variable*s are used to control whether or not to be prompted for certain actions, or to specify a default action. A *value* of **yes** will cause the action to be carried out automatically as if you had answered \"yes\" to the question. Similarly, a *value* of **no** will cause the action to be carried out as if you had answered \"no\". A *value* of **ask-yes** will cause a prompt with a default answer of \"yes\" and **ask-no** will provide a default answer of \"no\".The **toggle** command automatically prepends the \"**inv**\" prefix to all specified *variable*s. The **unset** command automatically prepends the \"**no**\" prefix to all specified *variable*s. If you use the command **set** and prefix the *variable* with \"**&**\" this has the same behavior as the **reset** command.The **reset** command resets all given *variable*s to the compile time defaults. With the **reset** command there exists the special *variable* **all**, which allows you to reset all *variable*s to their system defaults.Using the \\<**enter-command**\\> function, you can query the *value* of a *variable* by suffixing the name of the *variable* with a question mark: \\\":**set**\u00a0allow_8bit**?**\\\". The old prefix query syntax (\\\":**set**\u00a0**?**allow_8bit\\\") is also still supported."
    },
    "toggle": {
      "description": "```neomuttrc\nset { [ no | inv | & | ? ]variable } [ ... ]\nset { variable=value | variable+=increment | variable-=decrement } [ ... ]\nunset variable  [ variable ... ]\nreset variable  [ variable ... ]\ntoggle variable [ variable ... ]\nset variable ?\n```\nThese commands are used to set and manipulate configuration *variable*s.NeoMutt knows four basic types of *variable*s: boolean, number, string, string list and quadoption. Boolean *variable*s can be **set** (true), **unset** (false), or **toggle**d. Number *variable*s can be assigned a positive integer *value*. Value of number *variable*s can be incremented \\\"**+=**\\\" and decremented \\\"**-=**\\\". String list *variable*s use \\\"**+=**\\\" for appending increment to the string list and \\\"**-=**\\\" for removal decrement from the string list.String *variable*s consist of any number of printable characters and must be enclosed in quotes if they contain spaces or tabs. You may also use the escape sequences \"**\\\\n**\" and \"**\\\\t**\" for newline and tab, respectively. Content of a string *variable*s can be extended using \\\"**+=**\\\"Quadoption *variable*s are used to control whether or not to be prompted for certain actions, or to specify a default action. A *value* of **yes** will cause the action to be carried out automatically as if you had answered \"yes\" to the question. Similarly, a *value* of **no** will cause the action to be carried out as if you had answered \"no\". A *value* of **ask-yes** will cause a prompt with a default answer of \"yes\" and **ask-no** will provide a default answer of \"no\".The **toggle** command automatically prepends the \"**inv**\" prefix to all specified *variable*s. The **unset** command automatically prepends the \"**no**\" prefix to all specified *variable*s. If you use the command **set** and prefix the *variable* with \"**&**\" this has the same behavior as the **reset** command.The **reset** command resets all given *variable*s to the compile time defaults. With the **reset** command there exists the special *variable* **all**, which allows you to reset all *variable*s to their system defaults.Using the \\<**enter-command**\\> function, you can query the *value* of a *variable* by suffixing the name of the *variable* with a question mark: \\\":**set**\u00a0allow_8bit**?**\\\". The old prefix query syntax (\\\":**set**\u00a0**?**allow_8bit\\\") is also still supported."
    },
    "setenv": {
      "description": "```neomuttrc\nsetenv { ?variable | variable value }\nunsetenv variable\n```\nYou can alter the environment that NeoMutt passes on to its child processes using the **setenv** and **unsetenv** operators.You can also query current environment *value*s by prefixing a \"**?**\" character."
    },
    "unsetenv": {
      "description": "```neomuttrc\nsetenv { ?variable | variable value }\nunsetenv variable\n```\nYou can alter the environment that NeoMutt passes on to its child processes using the **setenv** and **unsetenv** operators.You can also query current environment *value*s by prefixing a \"**?**\" character."
    },
    "sidebar_pin": {
      "description": "```neomuttrc\nsidebar_pin mailbox [ mailbox ...]\nsidebar_unpin { * | mailbox ... }\n```\nThe **sidebar_pin** command specifies *mailbox*es that will always be displayed in the sidebar, even if \\$sidebar_new_mail_only is set and the *mailbox* does not contain new mail.The **sidebar_unpin** command is used to remove a *mailbox* from the list of always displayed *mailbox*es. Use \"**sidebar_unpin\u00a0\\***\" to remove all *mailbox*es."
    },
    "sidebar_unpin": {
      "description": "```neomuttrc\nsidebar_pin mailbox [ mailbox ...]\nsidebar_unpin { * | mailbox ... }\n```\nThe **sidebar_pin** command specifies *mailbox*es that will always be displayed in the sidebar, even if \\$sidebar_new_mail_only is set and the *mailbox* does not contain new mail.The **sidebar_unpin** command is used to remove a *mailbox* from the list of always displayed *mailbox*es. Use \"**sidebar_unpin\u00a0\\***\" to remove all *mailbox*es."
    },
    "source": {
      "description": "```neomuttrc\nsource filename\n```\nThis command allows the inclusion of initialization commands from other files. If the *filename* begins with a tilde (\"\\~\"), it will be expanded to the path of your home directory.If the *filename* ends with a vertical bar (\"\\|\"), then *filename* is considered to be an executable program from which to read input, (e.g. \"**source**\u00a0*\\~/bin/myscript*\\|\").If the filename is relative and the command **source** is executed from the context of a configuration file, then the filename is interpreted relative to the directory of that configuration file. If the command is executed outside of a configuration file, e.g. from the prompt, then the filename is interpreted relative to the current working directory (see **cd** on how to change the current working directory at runtime).Note: A hook remembers the configuration file it was defined in and sets the context to that file when executing its commands. As a result a **source** command inside a hook is executed in the context of the configuration file the hook was defined in. Thus relative filenames are interpreted relative to the configuration file the hook is defined in.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "spam": {
      "description": "```neomuttrc\nspam regex format\nnospam { * | regex }\n```\nNeoMutt has generalized support for external spam-scoring filters. By defining your spam *regex*s with the **spam** and **nospam** commands, you can limit, search, and sort your mail based on its spam attributes, as determined by the external filter. You also can display the spam attributes in your index display using the %H selector in the \\$index_format variable. (Tip: try \\\"%?H?\\[%H\\]\u00a0?\\\" to display spam tags only when they are defined for a given message).For further information on spam-scoring filters, please consult the section \"**Spam Detection**\" in the NeoMutt manual."
    },
    "nospam": {
      "description": "```neomuttrc\nspam regex format\nnospam { * | regex }\n```\nNeoMutt has generalized support for external spam-scoring filters. By defining your spam *regex*s with the **spam** and **nospam** commands, you can limit, search, and sort your mail based on its spam attributes, as determined by the external filter. You also can display the spam attributes in your index display using the %H selector in the \\$index_format variable. (Tip: try \\\"%?H?\\[%H\\]\u00a0?\\\" to display spam tags only when they are defined for a given message).For further information on spam-scoring filters, please consult the section \"**Spam Detection**\" in the NeoMutt manual."
    },
    "subjectrx": {
      "description": "```neomuttrc\nsubjectrx regex replacement\nunsubjectrx { * | regex }\n```\nThe **subjectrx** command specifies a regular expression which, if detected in a message subject, causes the subject to be replaced with the *replacement* value. The *replacement* is subject to substitutions in the same way as for the **spam** command: %L for the text to the left of the match, %R for text to the right of the match, and %1 for the first subgroup in the match (etc). If you simply want to erase the match, set it to \"%L%R\". Any number of **subjectrx** commands may coexist.Note this well: the *replacement* value replaces the entire subject, not just the match!**unsubjectrx** removes a given **subjectrx** from the substitution list. If \"**\\***\" is used as the argument, all substitutions will be removed."
    },
    "unsubjectrx": {
      "description": "```neomuttrc\nsubjectrx regex replacement\nunsubjectrx { * | regex }\n```\nThe **subjectrx** command specifies a regular expression which, if detected in a message subject, causes the subject to be replaced with the *replacement* value. The *replacement* is subject to substitutions in the same way as for the **spam** command: %L for the text to the left of the match, %R for text to the right of the match, and %1 for the first subgroup in the match (etc). If you simply want to erase the match, set it to \"%L%R\". Any number of **subjectrx** commands may coexist.Note this well: the *replacement* value replaces the entire subject, not just the match!**unsubjectrx** removes a given **subjectrx** from the substitution list. If \"**\\***\" is used as the argument, all substitutions will be removed."
    },
    "subscribe-to": {
      "description": "```neomuttrc\nsubscribe-to imap-folder-uri\nunsubscribe-from imap-folder-uri\n```\nTell the IMAP server to subscribe to or unsubscribe from the folder *imap-folder-uri*. The argument must be an IMAP URI, e.g. \"**subscribe-to** imaps://mail.example.org/inbox\".Subscription is an IMAP protocol feature where the server manages a list of subscribed folders. This list can be queried by clients like NeoMutt.NeoMutt uses that list in various situations, see \\$imap_list_subscribed and \\$imap_check_subscribed."
    },
    "unsubscribe-from": {
      "description": "```neomuttrc\nsubscribe-to imap-folder-uri\nunsubscribe-from imap-folder-uri\n```\nTell the IMAP server to subscribe to or unsubscribe from the folder *imap-folder-uri*. The argument must be an IMAP URI, e.g. \"**subscribe-to** imaps://mail.example.org/inbox\".Subscription is an IMAP protocol feature where the server manages a list of subscribed folders. This list can be queried by clients like NeoMutt.NeoMutt uses that list in various situations, see \\$imap_list_subscribed and \\$imap_check_subscribed."
    },
    "timeout-hook": {
      "description": "```neomuttrc\ntimeout-hook command\nstartup-hook command\nshutdown-hook command\n```\nThe **Global Hooks** feature introduces these hooks to NeoMutt. They are called when global events take place in NeoMutt. **startup-hook** and **shutdown-hook** are most likely to be useful to users of **notmuch**(1).**timeout-hook** runs a *command* periodically when NeoMutt checks for new mail. This hook is called every \\$timeout seconds.Before NeoMutt opens the first mailbox when first starting, NeoMutt will run the **startup-hook** for the given *command*.Before NeoMutt is about to exit, and before the mailbox is closed, NeoMutt will run the **shutdown-hook** for the given *command*."
    },
    "startup-hook": {
      "description": "```neomuttrc\ntimeout-hook command\nstartup-hook command\nshutdown-hook command\n```\nThe **Global Hooks** feature introduces these hooks to NeoMutt. They are called when global events take place in NeoMutt. **startup-hook** and **shutdown-hook** are most likely to be useful to users of **notmuch**(1).**timeout-hook** runs a *command* periodically when NeoMutt checks for new mail. This hook is called every \\$timeout seconds.Before NeoMutt opens the first mailbox when first starting, NeoMutt will run the **startup-hook** for the given *command*.Before NeoMutt is about to exit, and before the mailbox is closed, NeoMutt will run the **shutdown-hook** for the given *command*."
    },
    "shutdown-hook": {
      "description": "```neomuttrc\ntimeout-hook command\nstartup-hook command\nshutdown-hook command\n```\nThe **Global Hooks** feature introduces these hooks to NeoMutt. They are called when global events take place in NeoMutt. **startup-hook** and **shutdown-hook** are most likely to be useful to users of **notmuch**(1).**timeout-hook** runs a *command* periodically when NeoMutt checks for new mail. This hook is called every \\$timeout seconds.Before NeoMutt opens the first mailbox when first starting, NeoMutt will run the **startup-hook** for the given *command*.Before NeoMutt is about to exit, and before the mailbox is closed, NeoMutt will run the **shutdown-hook** for the given *command*."
    },
    "unhook": {
      "description": "```neomuttrc\nunhook { * | hook-type }\n```\nThis command permits you to flush hooks you have previously defined. You can either remove all hooks by giving the \"**\\***\" character as an argument, or you can remove all hooks of a specific *hook-type* by saying something like \"**unhook**\u00a0*send-hook*\"."
    }
  }
}
